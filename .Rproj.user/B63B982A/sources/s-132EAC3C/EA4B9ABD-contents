---
title: 'FYP: TPOT Attribution'
author: "Kavya Mudiam"
date: "12/9/2019"
output:
  pdf_document: default
  html_document: default
  word_document: default
editor_options: 
  chunk_output_type: inline
---

*Setup code*
```{r setup, message=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(reshape2)
library(stringr)
library(dplyr)
library(tidyverse)
library(irr)
library(psych)
library(rio)
library(lubridate)
library(ggplot2)
library(sjPlot)
library(skimr)
library(visdat)
library(pscl)
library(reshape)
library(ez)
library(rstatix)
library(ggpubr)

setwd("~/Dropbox (University of Oregon)/My Mac (Tests-Air.domain)/Desktop/UO/Year 1/FYP")
nona_data <- rio::import("nona_data.csv") 
data <- rio::import("data_512.csv") 
#nona_data <- rio::import("~/Desktop/UO/Year 1 /FYP/nona_data.csv") 
nona_data <- nona_data[,-1] #getting rid of the V1 column
nona_data$c_age <- trunc(nona_data$c_age)
nona_data$m_age <- trunc(nona_data$m_age)

data.rel <- rio::import("CC02_1292019_KM_RELonly.csv") %>% 
  mutate(Reliability = ifelse(Unique_ID == "101752alopezPSI", " ", Reliability) ) %>% 
  mutate(Interaction_edited = ifelse(Unique_ID == "101932alopezVMR1", "EPI", Interaction_edited)) %>% 
  mutate(Interaction_edited = ifelse(Unique_ID == "101932ldonnellyVMR1", "EPI", Interaction_edited)) %>% 
  mutate(Interaction_edited = ifelse(Unique_ID == "101932alopezVMR2", "PSI", Interaction_edited)) %>% 
  mutate(Interaction_edited = ifelse(Unique_ID == "101932ldonnellyVMR2", "PSI", Interaction_edited)) %>% 
    filter(Reliability=="X", Drop !='Y')


#Dropped 101752 PSI ratings because there's no reliability ratings for that
#101932 did not have the correct Interactions listed, so after receiving that information from Ramona and Craig, I replaced the interaction with the correct interaction type

data.rel$Coder[data.rel$Coder=="ldonnelly"] <- "Liz" 
data.rel$Coder[data.rel$Coder=="alopez"] <- "Arturo" 
  

attributions <- rio::import("attributionTable.csv")

#view(attributions)
attributions <- attributions %>% 
    dplyr::rename("Famid" = `ID #`, "cCoder" = `Cal assigned`, "rCoder" = `RELIABILITY ASSIGNED`) %>% 
    mutate(rCoder = ifelse(Famid == "101752", "Liz", rCoder) ) %>% 
  filter(rCoder != "")
#101752 has reliability ratings, but for some reason the rCoder wasn't indicatedon the attribution Table spreadsheet, so I was adding that above.

attributions$Famid <- as.character(attributions$Famid)
#need to run the above in order to join with ICC.prop
attributions <- dplyr::select(attributions, Famid, cCoder, rCoder)
```

*Wrangling Data for ICC*
```{r, message=FALSE}
ICC.data <-  data.rel %>% 
  select(Famid, Famid_edit, Unique_ID, Interaction, Interaction_edited, Coder, (contains("POS")), (contains("NEG")), (contains("NEU")), everything())
  #rearranging so that all the attribution types are together, so proportions can be more easily calculated/visualized 

ICC.data$Famid <- ICC.data$Famid_edit
ICC.data$Famid <- as.character(ICC.data$Famid)
ICC.data$Interaction <- ICC.data$Interaction_edited
#have to do this because some of the Interactions aren't identified as EPI or PSI

ICC.data$POS.sum <- rowSums(ICC.data[,grep("POS", names(ICC.data))])
ICC.data$NEG.sum <- rowSums(ICC.data[,grep("NEG", names(ICC.data))])
ICC.data$NEU.sum <- rowSums(ICC.data[,grep("NEU", names(ICC.data))])

ICC.data$POS.prop <- (ICC.data$POS.sum)/(ICC.data$POS.sum + ICC.data$NEG.sum + ICC.data$NEU.sum)
ICC.data$NEG.prop <- (ICC.data$NEG.sum)/(ICC.data$POS.sum + ICC.data$NEG.sum + ICC.data$NEU.sum)
ICC.data$NEU.prop <- (ICC.data$NEU.sum)/(ICC.data$POS.sum + ICC.data$NEG.sum + ICC.data$NEU.sum)

ICC.prop <- ICC.data %>% 
  select(Famid, Coder, Interaction, POS.prop, NEG.prop, NEU.prop) 


ICC.melt <- full_join(ICC.prop,attributions,by="Famid")
ICC.melt$Coder.status[ICC.melt$Coder==ICC.melt$cCoder] <- "C1"
ICC.melt$Coder.status[ICC.melt$Coder!= ICC.melt$cCoder] <- "C2"
ICC.melt <- ICC.melt %>% 
  select(Famid, Interaction, Coder.status, POS.prop, NEG.prop, NEU.prop) %>% 
  arrange(Famid, Interaction, Coder.status)
#ICC.melt<- unite(ICC.melt, Int.Coder, Interaction:Code.status, sep = "_", remove = TRUE, na.rm = FALSE)

ICC.l <- reshape(ICC.melt, 
  varying = c("POS.prop", "NEG.prop", "NEU.prop"), 
  v.names = "p", #p for proportion
  timevar = "emotion", 
  times = c("POS", "NEG", "NEU"),
  direction = "long")
ICC.l<- ICC.l %>% 
  select (Famid, Interaction, emotion, Coder.status, p)
ICC.l <- unite(ICC.l, Combination, Interaction:Coder.status, sep = "_", remove = TRUE, na.rm = FALSE)

ICC <- reshape(ICC.l, 
  timevar = "Combination",
  idvar = c("Famid"),
  direction = "wide")

#ICC <- ICC %>% select(-contains("NA"))

EPI_pos <- ICC %>% 
  filter(!is.na(p.EPI_POS_C1) & !is.na(p.EPI_POS_C2)) %>% 
  select(p.EPI_POS_C1, p.EPI_POS_C2)

EPI_neg <- ICC %>% 
  filter(!is.na(p.EPI_NEG_C1) & !is.na(p.EPI_NEG_C2)) %>% 
  select(p.EPI_NEG_C1, p.EPI_NEG_C2)

#write.csv(EPI_neg, file = "ICCEPI.csv")

EPI_neu <- ICC %>% 
  filter(!is.na(p.EPI_NEU_C1) & !is.na(p.EPI_NEU_C2)) %>% 
  select(p.EPI_NEU_C1, p.EPI_NEU_C2)

PSI_pos <- ICC %>% 
  filter(!is.na(p.PSI_POS_C1) & !is.na(p.PSI_POS_C2)) %>% 
  select(p.PSI_POS_C1, p.PSI_POS_C2)

PSI_neg <- ICC %>% 
  filter(!is.na(p.PSI_NEG_C1) & !is.na(p.PSI_NEG_C2)) %>% 
  select(p.PSI_NEG_C1, p.PSI_NEG_C2)

PSI_neu <- ICC %>% 
  filter(!is.na(p.PSI_NEU_C1) & !is.na(p.PSI_NEU_C2)) %>% 
  select(p.PSI_NEU_C1, p.PSI_NEU_C2)



#remove(ICC.data)
#remove(ICC.l)
#remove(ICC.melt)
#remove(ICC.prop)
```

*ICC Calculations*
```{r message=FALSE, warning=FALSE}
#psych:: icc(EPI_pos, model = "oneway", type = "consistency", unit = "single")
#40 subjects for positive EPI
#This provides a longer decimal & more options such as average, random, fixed
```

```{r ICC Calculations, message=FALSE, warning=FALSE}
ICC(EPI_pos,missing=T,alpha=.05,lmer=TRUE,check.keys=FALSE)
ICC(EPI_neg,missing=T,alpha=.05,lmer=TRUE,check.keys=FALSE)
ICC(EPI_neu,missing=T,alpha=.05,lmer=TRUE,check.keys=FALSE)

ICC(PSI_pos,missing=T,alpha=.05,lmer=TRUE,check.keys=FALSE)
ICC(PSI_neg,missing=T,alpha=.05,lmer=TRUE,check.keys=FALSE)
ICC(PSI_neu,missing=T,alpha=.05,lmer=TRUE,check.keys=FALSE)
```

*Wrangling data for kappa*
```{r Wrangling data for kappa, message=FALSE}
kappa.data <-  data.rel %>% 
  select(Famid, Famid_edit, Coder, Interaction, Interaction_edited, (contains("POS")), (contains("NEG")), (contains("NEU")))
kappa.data$Famid <- kappa.data$Famid_edit #have to do this because some of the FamID is incorrect. 
kappa.data$Interaction <- kappa.data$Interaction_edited
#have to do this because some of the Interactions aren't identified as EPI or PSI
kappa.data$Famid <- as.character(kappa.data$Famid)
kappa.l<- gather(kappa.data, segment, attribution, I01POS:I15NEU, factor_key=TRUE) %>% 
  select(-c(Interaction_edited, Famid_edit))
kappa.join <- full_join(kappa.l,attributions,by="Famid") 
kappa.join$Code.status <- kappa.join$Coder
kappa.join$Code.status[kappa.join$Coder==kappa.join$cCoder] <- "C1"
kappa.join$Code.status[kappa.join$Coder!= kappa.join$cCoder] <- "C2"
kappa.join <- kappa.join %>% 
  select(Famid, Interaction, Code.status, segment, attribution) %>% 
  arrange(Famid, Interaction, Code.status)


#Converting to Wide by Coder
library(reshape2)
?reshape
kappa.w <- reshape(kappa.join, 
  timevar = "Code.status",
  idvar = c("Famid", "Interaction", "segment"),
  direction = "wide")

#Need to find a way to only have numbers and to then create Columns for POSraters, NEGraters, and NEUraters. 

kappa.w<- separate(kappa.w, col= segment, into = c("seg", "at.type"), sep = 3)
kappa.w <- separate(kappa.w, col= seg, into = c("ignore", "segment"), sep = -2)
kappa.w <- select (kappa.w,-(ignore))

#kappa.w <- select (kappa.w,-(`NA`)) 
#kappa.w <- kappa.w %>% 
 # filter(Interaction != "NA")
library(dplyr)
kappa.w <- kappa.w %>% 
  dplyr::rename (C1 = attribution.C1, C2 = attribution.C2)

kappa <- reshape(kappa.w, 
   timevar = "at.type",
  idvar = c("Famid", "Interaction", "segment"),
  direction = "wide")


kappa.EPI <-  kappa %>% 
  filter(Interaction == "EPI")
#write.csv(kappa.EPI, "kappaEPI.csv")
kappa.PSI <-  kappa %>% 
  filter(Interaction == "PSI")
```

*Computing kappa*
```{r Computing Kappa}
library(irr)
#agree(kappa.EPI[,c("C1.POS","C2.POS")], tolerance=0)

kappa2(kappa.EPI[,c("C1.POS","C2.POS")])
kappa2(kappa.EPI[,c("C1.NEG","C2.NEG")])
kappa2(kappa.EPI[,c("C1.NEU","C2.NEU")])

kappa2(kappa.PSI[,c("C1.POS","C2.POS")])
kappa2(kappa.PSI[,c("C1.NEG","C2.NEG")])
kappa2(kappa.PSI[,c("C1.NEU","C2.NEU")])
```

*Cleaning Attribution Data*

```{r Cleaning Attribution Data}
groups <- rio::import("~/Desktop/UO/Year 1 /FYP/groups.csv") %>% 
  dplyr::rename("Famid" = `V1`,"Group" = `V2`, "Match" = `V7`) %>% 
  select("Famid", "Group", "Match")  
#The Match column indicated that the following IDs were listed on the Group Sheet but not in the Attribution Report Sheet:
#102630 – There aren’t any CC01 or CC02 files for this session because the sound on the VMR files is very bad.
#108668 – 108668 was mislabelled as 9108668 and there’s EPI + PSI data, BUT no VMR data. Nikki followed up: things didn’t record correctly, so we were unable to do the VMR coding for this family.
#Still waiting to hear back about 104013. (2/24/20) Currently have PSI coded 3 times. Not sure which of the 3 to use.
#101373 - might have usable data. Ramona will code this. 4/1/20: it's seeming like this didn't get coded and thus, we just aren't including it in the analyses. Emailed Craig today to check on this. 
#4/9/20 - using the data set that Craig cleaned and finalized, which do not include all of those confusing IDs

groups <- groups[-c(1,2),]

data <- rio::import("CC02_01232020_KM.csv") %>% 
  mutate(Interaction_edited = ifelse(Unique_ID == "101932alopezVMR1", "EPI", Interaction_edited)) %>% 
  mutate(Interaction_edited = ifelse(Unique_ID == "101932ldonnellyVMR1", "EPI", Interaction_edited)) %>% 
  mutate(Interaction_edited = ifelse(Unique_ID == "101932alopezVMR2", "PSI", Interaction_edited)) %>% 
  mutate(Interaction_edited = ifelse(Unique_ID == "101932ldonnellyVMR2", "PSI", Interaction_edited)) %>% 
dplyr::rename(Drop = 'Drop (because of coder)')


  
missing.intrxns <- rio::import("~/Desktop/UO/Year 1 /FYP/CC02_01232020_KM_CL_missingintrxn.csv") %>% 
  dplyr::rename("newInt" = `Interaction_edited`) %>% 
  select(Unique_ID, newInt)
data <- full_join(data, missing.intrxns, by="Unique_ID")  

data <-  data %>% 
  select(Famid, Famid_edit, Unique_ID, Interaction, Interaction_edited, newInt, Coder, (contains("POS")), (contains("NEG")), (contains("NEU")), everything()) #rearranging so that all the attribution types are together, so proportions can be more easily calculated/visualized 
  
data <- data %>% 
  mutate(Interaction_edited = ifelse(Interaction_edited == "VMR1"| Interaction_edited =="VMR2"| Interaction_edited =="VMR3", newInt, Interaction_edited)) 
  
data <-  select(data,-(newInt)) %>% 
  filter (Drop != 'Y')


data$Famid <- data$Famid_edit
data$Famid <- as.character(data$Famid)
data$Interaction <- data$Interaction_edited #have to do this because some of the Interactions aren't identified as EPI or PSI
data <- data %>% 
  select(Famid, Unique_ID, Interaction, Coder, (contains("POS")), (contains("NEG")), (contains("NEU")), everything())

#indicate which set is reliability and which is calibrator?
data$Coder[data$Coder=="ldonnelly"] <- "Liz" 
data$Coder[data$Coder=="alopez"] <- "Arturo" 

attributions <- rio::import("~/Desktop/UO/Year 1 /FYP/attributionTable.csv") %>% 
    dplyr::rename("Famid" = `ID #`, "cCoder" = `Cal assigned`, "rCoder" = `RELIABILITY ASSIGNED`) %>% 
    mutate(rCoder = ifelse(Famid == "101752", "Liz", rCoder) ) %>% 
  filter(rCoder != "")
#101752 has reliability ratings, but for some reason the rCoder wasn't indicatedon the attribution Table spreadsheet, so I was adding that above.

attributions$Famid <- as.character(attributions$Famid)
#need to run the above in order to join with ICC.prop
attributions <- select(attributions, Famid, cCoder, rCoder)

AttributionsClean <- full_join(data,attributions,by="Famid")
AttributionsClean$Coder.status[AttributionsClean$Coder==AttributionsClean$cCoder] <- "C1"
AttributionsClean$Coder.status[AttributionsClean$Coder== AttributionsClean$rCoder] <- "C2"
AttributionsClean <- AttributionsClean %>% 
  select(Famid, Unique_ID, Interaction, Coder, Coder.status, (contains("POS")), (contains("NEG")), (contains("NEU")), everything())

#write.csv(AttributionsClean, "AttributionsClean.csv")
```

*DAG Model*
```{r DAG Model}
library(ggdag)

dag.obj = dagify(NA ~ D,
                 AS ~ D + NA + P,
                 P ~ D + NA,
                # NA ~ CB,
                 # P ~ CB,
                 labels = c("NA" = "Neg Attributions",
                            "D"= "Maternal Dep",
                            "AS"= "Ado Sxs",
                            "P"= "Parenting Behav",
                           "CB" = "Child Behavior"))

ggdag(dag.obj, text = FALSE, use_labels = "label", 
      label_size = 25) + 
  theme_bw()

#what to control for when looking at attribution mediating parental behavior  - nothing!
dag.con1 = dagify(NA ~ D,
                 AS ~ D + NA + P,
                 P ~ D + NA,
                  NA ~ CB,
                  P ~ CB,
                 labels = c("NA" = "Neg Attributions",
                            "D"= "Maternal Dep",
                            "AS"= "Ado Sxs",
                            "P"= "Parenting Behav",
                            "CB" = "Child Behavior"),
                 exposure = "D", outcome = "P")
ggdag(dag.con1, text = FALSE, use_labels = "label", 
      label_size = 25) + 
  theme_bw()


ggdag_adjustment_set(dag.con1, text = FALSE, use_labels = "label") + theme_bw()

#what to control for when looking at attribution mediating adolescent symptoms  - nothing!
dag.con2 = dagify(NA ~ D, 
                 AS ~ D + NA + P,
                 P ~ D + NA,
                 labels = c("NA" = "Neg Attributions",
                            "D"= "Maternal Dep",
                            "AS"= "Ado Sxs",
                            "P"= "Parenting Behav"),
                 exposure = "D", outcome = "AS")

ggdag_adjustment_set(dag.con2, text = FALSE, use_labels = "label") + theme_bw()
#parenting behavior is a collider - don't want to control for that bc it could lead to spurious correlations
```


*Create massive dataset: Clean Attribution Data Set + MomQ_sc (Demographics, CRPBI) + ChildQ_sc (Demographics, CRPBI) + Construct OR (LIFE Parental Behavior) + TPOT Kavya Data_sxs (CBCL and YRS scores for adolescents)*

```{r Cleaned Attribution Data Set, Missing Data, and Calculating Proportions}
AttributionsClean <- rio::import("VMR Attribution Data.csv") #dataset cleaned and uploaded by Craig on DropBox
groups <- rio::import("groups.csv") %>% 
  dplyr::rename("Famid" = `V1`,"Group" = `V2`, "Match" = `V7`)
groups <- groups[-c(1,2),]
groups <- groups %>% 
  select("Famid", "Group", "Match")


AttributionsClean$Famid <- as.character(AttributionsClean$Famid)
AttributionsClean <- full_join(AttributionsClean, groups, by="Famid")  
AttributionsClean <- AttributionsClean %>% 
  select(Famid, Group, epi.coder, (contains("EPI.VMR")), psi.coder, (contains("PSI.VMR")), Match) 
AttributionsClean <- AttributionsClean %>% 
  filter(Match == "TRUE") #Only keeping IDs that have been assigned to groups, coders, and have data. The following get dropped. 101373 108668 102630. There are 177 observations.
AttributionsClean <- AttributionsClean %>% 
  select(-Match)

#Renaming variables/values
AttributionsClean$Group[AttributionsClean$Group=="2"] <- "0" 
AttributionsClean$Group[AttributionsClean$Group == '1'] <- 'Depressed'
AttributionsClean$Group[AttributionsClean$Group == '0'] <- 'Non Depressed'
#Make IV Factor
AttributionsClean$Group <- as.factor(AttributionsClean$Group)
AttributionsClean <- AttributionsClean %>% 
  mutate(att.neg = (EPI.VMR.ATT.NEG + PSI.VMR.ATT.NEG)/2,
         att.pos = (EPI.VMR.ATT.POS + PSI.VMR.ATT.POS)/2)
#names(AttributionsClean)

vis_miss(AttributionsClean)
which(is.na(AttributionsClean$EPI.VMR.ATT.POS)) #40 [101619], 168[109885]
which(is.na(AttributionsClean$PSI.VMR.ATT.POS)) #101 [104429], 137[106179]

#impute missing data one time
#pre_att <- prelim.norm(as.matrix(mAttribution))   #do preliminary manipulations
#thetahat_Att <- em.norm(pre_att)   #find the maximum likelihood estimation
#rngseed(1234)   #set random number generator seed
#imp_AttributionsClean <- imp.norm(pre_att,thetahat_Att,AttributionsClean)  #impute missing data under the MLE

#view(imp_AttributionsClean[c(40, 168, 101, 137),]) #ISSUE -- creates a negative number
```

Combine all of the data sets so that the following multiple imputations have more information to work from, and THEN run all diagnostics and check for violations?

```{r Demographics Data Sets}
#Mom Demographics#
library(dplyr)
mom_demo <- rio::import("MomQ_sc.csv")
mom_demo <- mom_demo %>% 
 dplyr::rename("Famid" = `famid`)
mom_demo$Famid <- as.character(mom_demo$Famid)

#Labelling Variables
mom_demo <- mom_demo %>% 
  dplyr::rename("m_age" = MOMAGEQ, "m_dob" = `m_7r1002_1`, "m_sex" = `m_7r101a`, "m_gender"= `m_7r101b`,"m_race" = `MRACE_R`, "m_ethnicity" = `MRACE_D`, "c_race" = `CRACE_R`, "c_ethnicity" = `CRACE_D`, "income_cat" = `INCOME.R`, "m_Latino" = `m_7r1006`, "m_American Indian/Alaska Native" = m_7r1007_1,"m_Asian" = `m_7r1007_2`, "m_Black" = `m_7r1007_3`, "m_White" = `m_7r1007_4`, "m_Native Hawaiian/Pacific Islander" = `m_7r1007_5`, "Relationship" = `m_7r1003`, "Education" = `m_7r1008`, "c_Latino" = `mc7r1029`, "c_American Indian/Alaska Native" = mc7r1030_1,"c_Asian" = `mc7r1030_2`, "c_Black" = `mc7r1030_3`, "c_White" = `mc7r1030_4`, "c_Native Hawaiian/Pacific Islander" = `mc7r1030_5`,"Relation_Child" = `mc7r1031`, "Relation_Child_Other_Relative" = `mc7r1031b`,  "Relation_Child_Other" = `mc7r1031c`, "PHQ9" = `M_3L1TOT`, "PHQ8" = `M_3L1TO8`, "PHQ9_Severity" = `M_3L1SEV`)

#Calculating Age
#mom_demo$m_dob <- c(mom_demo$m_dob)
#mom_demo$m_dob<- as.Date(mom_demo$m_dob, "%m/%d/%Y")
#mom_demo$date_1 <- c(mom_demo$date_1)
#mom_demo$date_1 <- as.Date(mom_demo$date_1, "%m/%d/%Y")
#mom_demo$m_age <- interval(mom_demo$m_dob, end=mom_demo$date_1)/duration(n=1, unit="years")
#mom_demo$m_age <- trunc(mom_demo$m_age)

#Labelling Sex and Gender 
mom_demo$m_sex[mom_demo$m_sex == '1'] <- 'Male'
mom_demo$m_sex[mom_demo$m_sex == '2'] <- 'Female'
mom_demo$m_gender[mom_demo$m_gender == '1'] <- 'Male'
mom_demo$m_gender[mom_demo$m_gender == '2'] <- 'Female'
mom_demo$m_gender[mom_demo$m_gender == '3'] <- 'Other'

#Labelling Relationship Statuses
mom_demo$Relationship[mom_demo$Relationship == '1'] <- 'Married'
mom_demo$Relationship[mom_demo$Relationship == '2'] <- 'Living Together'
mom_demo$Relationship[mom_demo$Relationship == '3'] <- 'Divorced/Separated'
mom_demo$Relationship[mom_demo$Relationship == '4'] <- 'Widowed'
mom_demo$Relationship[mom_demo$Relationship == '5'] <- 'Single'

#Labelling Education Status
mom_demo$Education[mom_demo$Education == '1'] <- 'Less than High School'
mom_demo$Education[mom_demo$Education == '2'] <- 'High School Graduate / GED'
mom_demo$Education[mom_demo$Education == '3'] <- 'Vocational or Professional School Certificate'
mom_demo$Education[mom_demo$Education == '4'] <- 'Some College '
mom_demo$Education[mom_demo$Education == '5'] <- 'Bachelors Degree or Higher Degree'

#Labelling Mom & Child Race 
mom_demo$m_race <- factor(mom_demo$m_race,
  levels = c(0, 1, 2, 3, 4, 5, 6),
  labels = c("American Indian/Alaska Native", "Asian", "Native Hawaiian/Pacific Islander", "Black or African American", "White or Caucasian", "Multiple Races indicated", "No response/Unknown")
)

mom_demo$c_race <- factor(mom_demo$c_race,
  levels = c(0, 1, 2, 3, 4, 5, 6),
  labels = c("American Indian/Alaska Native", "Asian", "Native Hawaiian/Pacific Islander", "Black or African American", "White or Caucasian", "Multiple Races indicated", "No response/Unknown")
)

#Labelling Mom & Child Ethnicity
mom_demo$m_Latino <- factor(mom_demo$m_Latino,
  levels = c(0, 1),
  labels = c("Not Latinx or Hispanic", "Latinx or Hispanic")
)

mom_demo$c_Latino <- factor(mom_demo$c_Latino,
  levels = c(0, 1),
  labels = c("Not Latinx or Hispanic", "Latinx or Hispanic")
)
                               

#Labelling Income
mom_demo$income_cat <- factor(mom_demo$income_cat,
  levels = c(1, 2, 3, 4, 5, 6, 7, 8),
  labels = c("<$17,000", "$17,000 - $19,999", "$20,000 - $24,999", "$25,000 - $29,999", "$30,000 - $34,999", "$35,000 - $39,999", "$40,000 - $49,999", ">= $50,000")
)

#Labelling Relationships to Child 
mom_demo$Relation_Child[mom_demo$Relation_Child == '1'] <- 'Mother'
mom_demo$Relation_Child[mom_demo$Relation_Child == '2'] <- 'Stepmother'
mom_demo$Relation_Child[mom_demo$Relation_Child == '3'] <- 'Foster Mother'
#mom_demo$Relation_Child[mom_demo$Relation_Child == '4'] <- '' 4 is skipped in the codebook
mom_demo$Relation_Child[mom_demo$Relation_Child == '5'] <- 'Grandmother'
mom_demo$Relation_Child[mom_demo$Relation_Child == '6'] <- 'Other Relative'
mom_demo$Relation_Child[mom_demo$Relation_Child == '7'] <- 'Other'


#Select relevant variables
mom_demo <- mom_demo %>% 
  select("Famid", "m_dob", "m_age", "m_sex", "m_gender", "m_race", "m_ethnicity", "c_race", "c_ethnicity", "income_cat", "m_Latino", "m_American Indian/Alaska Native","m_Asian", "m_Black", "m_White", "m_Native Hawaiian/Pacific Islander", "Relationship", "Education", "c_Latino", "c_American Indian/Alaska Native", "c_Asian", "c_Black", "c_White", "c_Native Hawaiian/Pacific Islander","Relation_Child", "Relation_Child_Other_Relative",  "Relation_Child_Other", "PHQ9", "PHQ8", "PHQ9_Severity")

vis_miss(mom_demo)
view(mom_demo)
#names(data)

#Child Demographics
chi_demo <-  rio::import("ChildQ_sc.csv")
chi_demo <- chi_demo %>% 
  dplyr::rename("Famid" = `famid`)
chi_demo$Famid <- as.character(chi_demo$Famid)

#Labelling Variables
chi_demo <- chi_demo %>% 
  dplyr::rename("c_age" = `CHIAGEQ`, "c_dob" = `c_7r1002_1`, "c_sex" = `c_7r101a`, "c_gender"= `c_7r101b`)
view(chi_demo)
#Calculating Age
#chi_demo$c_dob <- c(chi_demo$c_dob)
#chi_demo$c_dob<- as.Date(chi_demo$c_dob, "%m/%d/%Y")
#chi_demo$date_1 <- c(chi_demo$date_1)
#chi_demo$date_1 <- as.Date(chi_demo$date_1, "%m/%d/%Y")
#chi_demo$c_age <- interval(chi_demo$c_dob, end=chi_demo$date_1)/duration(n=1, unit="years")
#chi_demo$c_age <- trunc(chi_demo$c_age)



#Labelling Sex and Gender 
chi_demo$c_sex[chi_demo$c_sex == '1'] <- 'Male'
chi_demo$c_sex[chi_demo$c_sex == '2'] <- 'Female'
chi_demo$c_gender[chi_demo$c_gender == '1'] <- 'Male'
chi_demo$c_gender[chi_demo$c_gender == '2'] <- 'Female'
chi_demo$c_gender[chi_demo$c_gender == '3'] <- 'Other'

#Selecting relevant variables
chi_demo <- chi_demo %>% 
  select("Famid", "c_dob", "c_age", "c_sex", "c_gender")

vis_miss(chi_demo)

count(chi_demo) #183
count(mom_demo) #185

#COMBINING DATA SET 
demo_only <- full_join(mom_demo, chi_demo, by= "Famid")
demo_only <- demo_only %>% 
  janitor::clean_names()
demo_only$famid <- as.integer(demo_only$famid)
group_demo <- nona_data %>% 
  select(famid, group)
demo_only <- full_join(group_demo, demo_only, by= "famid")


data <- full_join(AttributionsClean,mom_demo,by="Famid")
data <- full_join(data,chi_demo,by="Famid")
```

```{r Self Reported Parental Behavior}
#Mom Reported Parenting Behaviors
CRPBI_mom <- rio::import("~/Desktop/UO/Year 1 /FYP/MomQ_sc.csv")
CRPBI_mom <- CRPBI_mom %>% 
  dplyr::rename("Famid" = `famid`)
CRPBI_mom$Famid <- as.character(CRPBI_mom$Famid)

#labelling the CRPBI variables 
CRPBI_mom <- CRPBI_mom %>% 
  dplyr::rename("crpbim_accept" = `MC2R1ACC`,
"crpbim_chicent" = `MC2R1CHI`,      
"crpbim_cong" = `MC2R1CON`,
"crpbim_insanx" = `MC2R1INS`,
"crpbim_lax" = `MC2R1LAX`,
"crpbim_norul" = `MC2R1RUL`,
"crpbim_AvRej"= `MC2R1AVR`,
"crpbim_AutvPcon" = `MC2R1AVP`,
"crpbim_FvLax" = `MC2R1FVL`)

CRPBI_mom <- CRPBI_mom %>% 
  select("Famid", "crpbim_AvRej")

vis_miss(CRPBI_mom)

#Child Reported Parenting Behaviors
CRPBI_chi <- rio::import("~/Desktop/UO/Year 1 /FYP/ChildQ_sc.csv")
CRPBI_chi <- CRPBI_chi %>% 
  dplyr::rename("Famid" = `famid`)
CRPBI_chi$Famid <- as.character(CRPBI_chi$Famid)

#labelling the CRPBI variables 
CRPBI_chi <- CRPBI_chi %>% 
  dplyr::rename("crpbic_accept" = `CM2R1ACC`,
"crpbic_chicent" = `CM2R1CHI`,      
"crpbic_cong" = `CM2R1CON`,
"crpbic_insanx" = `CM2R1INS`,
"crpbic_lax" = `CM2R1LAX`,
"crpbic_norul" = `CM2R1RUL`,
"crpbic_AvRej"= `CM2R1AVR`,
"crpbic_AutvPcon" = `CM2R1AVP`,
"crpbic_FvLax" = `CM2R1FVL`)

CRPBI_chi <- CRPBI_chi %>% 
  select("Famid","crpbic_AvRej")
vis_miss(CRPBI_chi)

#missing data
which(is.na(CRPBI_chi$crpbic_AvRej)) #11 [100665], 162[108603]

#COMBINING DATA SET 
data <- full_join(data,CRPBI_mom,by="Famid")
data <- full_join(data,CRPBI_chi,by="Famid")
```

```{r Construct Parental Behaviors}
Construct <- rio::import("~/Desktop/UO/Year 1 /FYP/Construct OR.csv")
#view(Construct)
Construct <- Construct %>% 
  dplyr::rename("Famid" = `FAMID`)
Construct$Famid <- as.character(Construct$Famid)

#renaming variables
##Interpretation
##Frequency =
##RPM = rate per minute
##Duration/du = (what unit is this in? seconds)
##PRD/pd = proportion of duration
##DPE = (Duration/Frequency)

Construct <- Construct %>% 
dplyr::rename("avs_fr_epi" = `MCE.AVS.FR.OR`,
"avs_rpm_epi" = `MCE.AVS.RA.OR`,
"avs_du_epi" = `MCE.AVS.DU.OR`,
"avs_pd_epi" = `MCE.AVS.PR.OR`,
"avs_dpe_epi" = `MCE.AVS.DP.OR`,
"dys_fr_epi" = `MCE.DYS.FR.OR`, 
"dys_rpm_epi" = `MCE.DYS.RA.OR`, 
"dys_du_epi" = `MCE.DYS.DU.OR`,
"dys_pd_epi" =`MCE.DYS.PR.OR`, 
"dys_dpe_epi"= `MCE.DYS.DP.OR`, 
"pos_fr_epi" = `MCE.POS.FR.OR`,
"pos_rpm_epi" = `MCE.POS.RA.OR`, 
"pos_du_epi" = `MCE.POS.DU.OR`,
"pos_pd_epi" = `MCE.POS.PR.OR`,
"pos_dpe_epi" = `MCE.POS.DP.OR`,

"avs_fr_psi" = `MCP.AVS.FR.OR`,
"avs_rpm_psi" = `MCP.AVS.RA.OR`,
"avs_du_psi" = `MCP.AVS.DU.OR`,
"avs_pd_psi" = `MCP.AVS.PR.OR`,
"avs_dpe_psi" = `MCP.AVS.DP.OR`,
"dys_fr_psi" = `MCP.DYS.FR.OR`, 
"dys_rpm_psi" = `MCP.DYS.RA.OR`, 
"dys_du_psi" = `MCP.DYS.DU.OR`,
"dys_pd_psi" =`MCP.DYS.PR.OR`, 
"dys_dpe_psi"= `MCP.DYS.DP.OR`, 
"pos_fr_psi" = `MCP.POS.FR.OR`,
"pos_rpm_psi" = `MCP.POS.RA.OR`, 
"pos_du_psi" = `MCP.POS.DU.OR`,
"pos_pd_psi" = `MCP.POS.PR.OR`,
"pos_dpe_psi" = `MCP.POS.DP.OR`, 

"chi_pos_pd_epi" = `CCE.POS.PR.OR`,
"chi_pos_pd_psi" = `CCP.POS.PR.OR`,
"chi_avs_pd_epi" = `CCE.AVS.PR.OR`, #aggressive coded as aversive?
"chi_avs_pd_psi" = `CCP.AVS.PR.OR`,  #aggressive coded as aversive?
)

#"Because we were interested in examining the influence of parental attributions on their behavior above and beyond the influence of adolescent behavior, we also entered into each regression model an overall indicant of the relative level of adolescent negative and positive behavior displayed during the interaction. This indicant was created by taking the ratio of the **proportion of adolescent aggressive to the proportion of facilitative behaviors** displayed"
## ** are there concerns about using a ratio? what about when one of the proprortion is 0? MEETING W NICK
##I'm turning neg into an integer by *100 as well as the ratio because of zero-inf models. Do I also need to do that for positive? MEETING WITH NICK
Construct <- Construct %>% 
  mutate(chi_pos_pd = ((chi_pos_pd_epi+chi_pos_pd_psi)/2),
         chi_avs_pd = ((chi_avs_pd_epi+chi_avs_pd_psi)/2)) 
Construct <- Construct %>% 
  mutate(chi_beh_control = (chi_avs_pd/chi_pos_pd)) #creating the ratio to control for adolescent behavior
Construct <- Construct %>% 
  select("Famid", (contains("epi")), (contains("psi")), (contains("chi")))
#don't need frequency or duration
Construct <- Construct %>% 
  select(-contains("fr"), -contains("du")) #Didn't include Other
vis_miss(Construct)
which(is.na(Construct$avs_dpe_epi)) ##All of these except for 171[109885] have NA, because the rpm and pd values are 0
which(is.na(Construct$avs_dpe_psi))

Construct <- Construct %>% 
  mutate(avs_dpe_epi = ifelse(avs_rpm_epi == "0" & avs_pd_epi == "0", 0, avs_dpe_epi)) %>% 
  mutate(avs_dpe_psi = ifelse(avs_rpm_psi == "0" & avs_pd_psi == "0", 0, avs_dpe_psi))

#COMBINING DATA SET 
data <- full_join(data, Construct,by="Famid")
```

```{r Ado Sxs Data Set}
AdoSxs <- rio::import("~/Desktop/UO/Year 1 /FYP/TPOT Kavya Data_sxs.csv") #the transformed CBCL ext variable isn't here, so adding all 4 of the transformed variables specifically to the data file directly

#PHQ-9 score = variable M_3L1TOT
#CBCL = variables starting with mc2
#Int CBCL sxs = mc2x1intr
#Ext CBCL sxs = mc2x1extr 
#YSR = variables starting with c_7w (child codebook)
#Internalizing YRS Sxs = c_7w1INTR
#Externalizing YRS Sxs = c_7w1EXT
#decided to use the transformed scores, not raw scores - 8/12/20
AdoSxs2 <- rio::import("~/Desktop/UO/Year 1 /FYP/MomQ_CBCL_sc.sav")
AdoSxs2 <- AdoSxs2 %>% 
  select(famid, mc2x1extt)
AdoSxs2 <- AdoSxs2 %>% 
  dplyr::rename("Famid" = `famid`, "CBCL_ext_t" = `mc2x1extt`)
AdoSxs2$Famid <- as.character(AdoSxs2$Famid)
#T Int CBCL sxs = mc2x1intt 
#T Ext CBCL sxs = ??? <- there's no transformed variable in my data set
#YSR = variables starting with c_7w (child codebook)
#T Internalizing YRS Sxs = c_7w1INTT
#T Externalizing YRS Sxs = c_7w1EXTT


AdoSxs <- AdoSxs %>% 
dplyr::rename("Famid" = `FamId`) 
AdoSxs$Famid <- as.character(AdoSxs$Famid)

#Renaming variables/values
AdoSxs$GROUP[AdoSxs$GROUP == '1'] <- 'Depressed'
AdoSxs$GROUP[AdoSxs$GROUP == '2'] <- 'Non Depressed'
AdoSxs$GROUP <- as.factor(AdoSxs$GROUP)
AdoSxs <- AdoSxs %>% 
  dplyr::rename("CBCL_int"= `mc2x1intr`, "CBCL_ext" =`mc2x1extr`, "CBCL_tot" = `mc2x1totr`, "CBCL_int_t" = `mc2x1intt`, "YRS_ext" = `c_7w1EXTR`, "YRS_int" = `c_7w1INTR`,"YRS_tot" = `c_7w1TOTR`, "YRS_ext_t" = `c_7w1EXTT`,	"YRS_int_t" = `c_7w1INTT`)
AdoSxs <- AdoSxs %>% 
  select(Famid, CBCL_int, CBCL_ext, YRS_int, YRS_ext, YRS_int_t, YRS_ext_t, CBCL_int_t)

vis_miss(AdoSxs) 
which(is.na(AdoSxs$CBCL_int)) # 1  30  50 147 missing CBCL. Do we need to impute for all the values in the scale or it's ok to impute just for the subscales/total scores? We shouldn't impute the total score bc that should be int + ext?
which(is.na(AdoSxs$YRS_int))#  1  62 112 153 167 missing YMRS #kavya look at why there's ext but no int data

#WE WANT THE T SCORE, NOT THE RAW SCORE
#COMBINING DATA SET 
AdoSxs <- full_join(AdoSxs, AdoSxs2, by="Famid")
data <- full_join(data, AdoSxs,by="Famid")
```

```{r Full Data Set + Get variables ready for imputation}

library(janitor)
data <- data %>% 
  clean_names()

data$m_sex <- as.factor(data$m_sex)
data$m_gender <- as.factor(data$m_gender)
data$c_gender <- as.factor(data$c_gender)
data$relationship <- as.character(data$relationship) #made this character because some reason imputation was creating values for 137 Relationship
data$education <- as.factor(data$education)
data$relation_child <- as.factor(data$relation_child)
data$c_sex <- as.factor(data$c_sex)
data$c_gender <- as.factor(data$c_gender)
data$crpbic_av_rej <- as.numeric(data$crpbic_av_rej)
data$crpbim_av_rej <- as.numeric(data$crpbim_av_rej)

data$m_american_indian_alaska_native <- as.numeric(data$m_american_indian_alaska_native)
data$m_american_indian_alaska_native[is.na(data$m_american_indian_alaska_native)] <- 0
data$c_american_indian_alaska_native <- as.numeric(data$c_american_indian_alaska_native)
data$c_american_indian_alaska_native[is.na(data$c_american_indian_alaska_native)] <- 0
data$m_asian <- as.numeric(data$m_asian)
data$m_asian[is.na(data$m_asian)] <- 0
data$c_asian <- as.numeric(data$c_asian)
data$c_asian[is.na(data$c_asian)] <- 0
data$m_black <- as.numeric(data$m_black)
data$m_black[is.na(data$m_black)] <- 0
data$c_black <- as.numeric(data$c_black)
data$c_black[is.na(data$c_black)] <- 0
data$m_white <- as.numeric(data$m_white)
data$m_white[is.na(data$m_white)] <- 0
data$c_white <- as.numeric(data$c_white)
data$c_white[is.na(data$c_white)] <- 0
data$m_native_hawaiian_pacific_islander <- as.numeric(data$m_native_hawaiian_pacific_islander)
data$m_native_hawaiian_pacific_islander[is.na(data$m_native_hawaiian_pacific_islander)] <- 0
data$c_native_hawaiian_pacific_islander <- as.numeric(data$c_native_hawaiian_pacific_islander)
data$c_native_hawaiian_pacific_islander[is.na(data$c_native_hawaiian_pacific_islander)] <- 0

data$m_latino <- as.factor(data$m_latino)
data$c_latino <- as.factor(data$c_latino)
data$m_american_indian_alaska_native <- as.factor(data$m_american_indian_alaska_native)
data$c_american_indian_alaska_native <- as.factor(data$c_american_indian_alaska_native)
data$m_asian <- as.factor(data$m_asian)
data$c_asian <- as.factor(data$c_asian)
data$m_black <- as.factor(data$m_black)
data$c_black <- as.factor(data$c_black)
data$m_white <- as.factor(data$m_white)
data$c_white <- as.factor(data$c_white)
data$m_native_hawaiian_pacific_islander <- as.factor(data$m_native_hawaiian_pacific_islander)
data$c_native_hawaiian_pacific_islander <- as.factor(data$c_native_hawaiian_pacific_islander)

#changing all the ethnicity stuff to factor instead of numberic. Not sure if that will mess with the imputations
data <- data %>% 
  select(- c(m_dob, c_dob))
data <- data %>% 
  filter(!is.na(group)) #177 subjects
```

#Descriptives - do I calculate prior to missing data?
*Between groups
** Mom age
** Child age
** Mom starting depression 
** Ethnicity #maybe a percentage is easiest <- still need to do this


```{r}
library(table1)
#??table1
#install.packages("table1")

label(nona_data$c_sex)       <- "Sex of Child"
label(nona_data$m_age)       <- "Age of Mothers"
label(nona_data$c_age)       <- "Age of Children"
label(nona_data$phq9)        <- "Mother's PHQ-9"
label(nona_data$education)   <- "Mother's Education" 

units(nona_data$m_age)       <- "years"
units(nona_data$c_age)       <- "years"


desc_table <- table1(~ m_age + c_age + c_sex + phq9 + education | group, data=nona_data)
desc_table
desc_bysex_table <- table1(~ m_age + c_age + phq9 | group*c_sex, data=nona_data)
desc_bysex_table
```


```{r }
library(table1)
#??table1
#install.packages("table1")

label(nona_data$c_sex)       <- "Sex of Child"
label(nona_data$m_age)       <- "Age of Mothers"
label(nona_data$c_age)       <- "Age of Children"
label(nona_data$phq9)        <- "Mother's PHQ-9"
label(nona_data$education)   <- "Mother's Education" 

units(nona_data$m_age)       <- "years"
units(nona_data$c_age)       <- "years"


desc_table <- table1(~ m_age + c_age + c_sex + phq9 + education | group, data=nona_data)
desc_table
desc_bysex_table <- table1(~ m_age + c_age + phq9 | group*c_sex, data=nona_data)
desc_bysex_table

```

```{r tbl summary attributions}

att_data_summ <- nona_data %>% 
  dplyr::select(group, att_neg, att_pos)

install.packages("dplyr")
library(dplyr)
install.packages("gtsummary")
library(gtsummary)

tbl_summary(att_data_summ)
att_data_summ %>% tbl_summary(by= group, statistic = list(all_continuous() ~ "{mean} ({sd})",       all_categorical() ~ "{n} / {N} ({p}%)"),
    digits = all_continuous() ~ 2) %>% 
  add_p()

,
    label = Characteristic ~ "Attribution")

apa.descriptives(
  data = att_data_summ(
    rnorm(100, mean = 0, sd = 1),
    rnorm(100, mean = 0, sd = 1),
    rnorm(100, mean = 0, sd = 1),
    rnorm(100, mean = 0, sd = 1)
  ),
  variables = c("group", "att_neg", "pos_neg")
)

```


```{r differences in ado behaviors + neg parenting + int sxs}
library(table1)
#??table1
#install.packages("table1")


label(nona_data$chi_beh_control)       <- "Adolescent Behaviors"
label(nona_data$crpbic_av_rej)       <- "Accept v Rej (Child)"
label(nona_data$crpbim_av_rej)       <- "Accept v Rej (Mom)"
label(nona_data$cbcl_int)        <- "Ado Internalizing Sxs (Child)"
label(nona_data$yrs_int)   <- "Ado Internalizing Sxs (Mom)" 
label(nona_data$cbcl_ext)        <- "Ado Externalizing Sxs (Child)"
label(nona_data$yrs_ext)   <- "Ado Externalizing Sxs (Mom)" 

adosxs_bygroup <- table1(~ cbcl_int + yrs_int + cbcl_ext + yrs_ext | group, data=nona_data)
adosxs_bysex <- table1(~ cbcl_int + yrs_int + cbcl_ext + yrs_ext | c_sex*group, data=nona_data)
desc_demo_table <- table1(~ chi_beh_control + crpbic_av_rej + crpbim_av_rej + cbcl_int + yrs_int | group, data=nona_data) #1 depressed 2 nondep
desc_demo_table
table1(~ chi_beh_control + crpbic_av_rej + crpbim_av_rej + cbcl_int + yrs_int | group, data=nona_data)
desc_bysex_table <- table1(~ m_age + c_age + phq9 | group*c_sex, data=nona_data)
desc_bysex_table
```


```{r basic dems}
library(table1)
?table1
#install.packages("table1")



label(demo_only$m_age)       <- "Age"
label(demo_only$phq9)        <- "Depressive Symptoms (PHQ-9)"
label(demo_only$m_race)     <- "Race"
#label(demo_only$m_ethnicity)<- "Ethnicity"
label(demo_only$education) <- " Education Level"
label(demo_only$income_cat) <- " Income"
label(demo_only$m_white)     <- "Proportion of White Mothers"
label(demo_only$m_latino)     <- "Proportion of Latinx Mothers"

mom_demo_table <- table1(~ m_age + phq9 + m_race + m_ethnicity + education  + income_cat | group, data=demo_only, overall = F) #1 depressed 2 nondep

label(demo_only$c_age)       <- "Age"
label(demo_only$c_sex)       <- "Sex"
label(demo_only$c_race)     <- "Race"
#label(demo_only$c_ethnicity)<- "Ethnicity"

ado_demo_table <- table1(~ c_age + c_sex + c_race + c_ethnicity | group, data = demo_only, overall = F) 





mom_demo_table <- table1(~ m_age + m_white + m_latino + phq9 + c_age + c_white + c_latino | group, data=nona_data) #1 depressed 2 nondep

basic_demo_table
table1(~ chi_beh_control + crpbic_av_rej + crpbim_av_rej + cbcl_int + yrs_int | group, data=nona_data)



desc_bysex_table <- table1(~ m_age + c_age + phq9 | group*c_sex, data=nona_data)
desc_bysex_table


label(data$m_age)       <- "Mother's Age"
label(data$c_age)       <- "Child's Age"
label(data$c_sex)       <- "Child's Sex"
label(data$phq9)        <- "PHQ-9 Score"
label(data$m_white)     <- "Proportion of White Mothers"
label(data$c_white)     <- "Proportion of White Adolescents"


basic_demo_table_data <- table1(~ m_age + c_age + phq9 + m_white + c_white | group, data=data) #1 depressed 2 nondep

basic_demo_table_data
table1(~ chi_beh_control + crpbic_av_rej + crpbim_av_rej + cbcl_int + yrs_int | group, data=data)

desc_bysex_table_data <- table1(~ m_age + c_age + phq9 | group*c_sex, data=data)
desc_bysex_table_data
```

```{r Mom age graph }
data %>%
  group_by(group) %>%
  summarise(age_avg = mean(m_age), sd=sd(m_age)) %>%
  ggplot(aes(x = group, y = age_avg)) +
  geom_col(fill   = "grey",
             colour = "white",
             alpha  = .7,
             width  = .5) +
    geom_errorbar(aes(ymin=age_avg-sd, ymax=age_avg+sd), width=.25)+
    theme_bw() +
    labs(title    = "Average Age of Mothers by Depression Status",
         x        = "Group",
         y        = "Age") +
    theme_apa(box= TRUE)
```


```{r Ado age graph }
data %>%
  group_by(group) %>%
  summarise(age_c_avg = mean(c_age), sd=sd(c_age)) %>%
  ggplot(aes(x = group, y = age_c_avg)) +
  geom_col(fill   = "grey",
             colour = "white",
             alpha  = .7,
             width  = .5) +
    geom_errorbar(aes(ymin=age_c_avg-sd, ymax=age_c_avg+sd), width=.25)+
    theme_bw() +
    labs(title    = "Average Age of Adolescents by Maternal Depression",
         x        = "Group",
         y        = "Age") +
    theme_apa(box= TRUE)
```



```{r descrips-race-tab, results = "asis" }
###Ethnicity###


ethnicity_table <- table1(~ m_latino + m_white | group, data=nona_data)

AI_freq <- nona_data %>% group_by(group) %>% summarise(`American Indian/Alaska Native` = sum(`m_american_indian_alaska_native`, na.rm = TRUE))
Asian_freq <- nona_data %>% group_by(group) %>% summarise(Asian=sum(m_asian, na.rm = TRUE)) 
Black_freq <- nona_data %>% group_by(group) %>% summarise(Black = sum(m_black, na.rm = TRUE))
White_freq <- nona_data %>% group_by(group) %>% summarise(White = sum(m_white, na.rm = TRUE))
NH_freq <- nona_data %>% group_by(group) %>% summarise(`Native Hawawaiian/Pacific Islander` = sum(m_native_hawaiian_pacific_islander, na.rm = TRUE))

bind <- cbind(AI_freq, Asian_freq, Black_freq, White_freq, NH_freq)
bind <- bind[,-c(3,5,7,9)]
bind[, -1] <- printnum(bind[, -1], digits = 0) 
#bind <- knitr::kable(bind)

papaja::apa_table(
  bind
  , caption = "Descriptive Statistics of Mothers' Ethnicities"
  , note = "Frequency Table"
  , escape = TRUE)
```

```{r descrips-relat-tab, results = "asis"}
###Relationship###
?xtabs
relation_freq <- xtabs(~ Group + Relationship, data = project, addNA = TRUE)
relation_freq <- as.data.frame(relation_freq)
relation_freq_w <- reshape(relation_freq, 
  timevar = "Relationship",
  idvar = c("Group"),
  direction = "wide")
relation_freq_w<- relation_freq_w %>% 
  dplyr::rename("Divorced/Separated" = `Freq.Divorced/Separated`, "Living Together" = `Freq.Living Together`, "Married" = `Freq.Married`, "Single" = `Freq.Single`, "NA" = `Freq.NA`)
relation_freq[, -1] <- printnum(relation_freq[, -1], digits = 0) 

papaja::apa_table(
  relation_freq_w
  , caption = "Descriptive Statistics of Mothers' Relationships."
  , note = "This table was created with apa_table()."
  , escape = TRUE)

relation_hist <- relation_freq %>% 
  ggplot(aes(x=Relationship, y = Freq, color = Group)) +
    labs(title    = "Frequency of Mothers' Relationship Types",
         x        = "Relationship",
         y        = "Frequency") +
  geom_bar(stat="identity", position = "dodge") +
  theme_apa()
```



#QUESTIONS
1) Are there certain variables I should not include as predictors? (famid, gender, age, ethnicity?)
2) I need to create a new column that has the averages of positive and negative attributions. If I do that before imputing will the correct averages fill in after imputing? - Able to do passive imputation. 
3) How do I transform variables after imputing?
4) one.way ANOVA function if heterogeniety is violated - yes. we're using zero-inflated poisson though 

#Question: Nick/Lauren
Bimodal distribution for residuals of model with winsorized variable
Distribution of residuals for Zero Inflated Poisson Model
* Do I need to bootstrap? How do I create figures? 

```{r Visualizations and Assumptions for Attribution Proportions as DV}
describe(data$att_neg) #skew 1.8, min 0, max .7
describe(data$att_pos) #skew -.3, min 0, max .5
data$group <- as.factor(data$group)
negatt_plot<- data %>%
  ggplot(aes(x = att_neg)) +
    geom_histogram( 
                   fill   = "turquoise",
                   colour = "black",
                   alpha  = .6,
                   bins   = 35) +
    theme_bw() +
    labs(title    = "Frequency of NEG.Prop",
         x        = "NEG.Prop",
         y        = "Frequency") +
    facet_grid(~group) #Positively skewed. Lots of 0s. Consider zero-inflated poisson model https://stats.idre.ucla.edu/r/dae/zip/
negatt_plot

#Positive attribution
posatt_plot <- data %>%
  ggplot(aes(x = att_pos)) +
    geom_histogram( 
                   fill   = "turquoise",
                   colour = "black",
                   alpha  = .6,
                   bins   = 35) +
    theme_bw() +
    labs(title    = "Frequency of POS.Prop",
         x        = "POS.Prop",
         y        = "Frequency") +
    facet_grid(~group) 
posatt_plot #normal 

##3. Plot bivariate distributions & look for outliers
ggplot(data = data, aes(x = group, y = att_neg)) +
  geom_point() +
  geom_smooth(method = "lm", color = "blue")     #winsorize the whole variable
boxplot(data$att_neg)

model_negprop <- aov(att_neg ~ group, data)
plot(model_negprop, which = 4)
plot(model_negprop, which = 5)
library(olsrr)
ols_plot_resid_stud_fit(lm(att_neg ~ group, data)) #there are 6 outliers? past 2 SD. Will likely winsorize with a threshold of 2.5 or 3
head(dfbeta(model_negprop))

      #Need to winsorize. WINSORIZED NEG ATTRIBUTIONS 
      install.packages("DescTools")
      library(DescTools)
 
        data <- data %>% 
              mutate(att_neg_win = Winsorize(data$att_neg, probs = c(.05, .99), na.rm = TRUE)) %>%  #winsorizing closer to 3 SD
              mutate(att_neg_win98 = Winsorize(data$att_neg, probs = c(.05, .98), na.rm = TRUE)) #closer to 2.5 SD
            view(cbind(data$att_neg_win, data$att_neg_win98, data$att_neg))
            describe(data$att_neg_win)
            describe(data$att_neg_win98)
            describe(data$att_neg)
            
            ##distributions with winsorized data
            negatt_win_hist <- data %>%
              ggplot(aes(x = att_neg_win)) +
                geom_histogram( 
                               fill   = "turquoise",
                               colour = "black",
                               alpha  = .6,
                               bins   = 35) +
                theme_bw() +
                labs(title    = "Frequency of NEG.Prop",
                     x        = "NEG.Prop",
                     y        = "Frequency") +
                facet_grid(~group)
            
             negatt_win_plot <-
                ggplot(data = data, aes(x = group, y = att_neg_win)) +
                geom_point() +
                geom_smooth(method = "lm", color = "blue")   
                
             negatt_win98_hist <- data %>%
              ggplot(aes(x = att_neg_win98)) +
                geom_histogram( 
                               fill   = "turquoise",
                               colour = "black",
                               alpha  = .6,
                               bins   = 35) +
                theme_bw() +
                labs(title    = "Frequency of NEG.Prop",
                     x        = "NEG.Prop",
                     y        = "Frequency") +
                facet_grid(~group)
             negatt_win98_hist
            
      #Plots   +   Normality of Residuals (IF USING ANOVA - WHICH WE'RE NOT)
      ggplot(data = data, aes(x = group, y = att_neg)) +
        geom_point() +
        geom_smooth(method = "lm", color = "blue") 
      model_neg_att <- aov(att_neg ~ group, data = data, var.equal = F) 
      model_neg_att %>% 
          plot_model(type = "diag") #not normal
      
      ggplot(data = data, aes(x = group, y = att_neg_win)) +
        geom_point() +
        geom_smooth(method = "lm", color = "blue")  #ABOUT 3 SD, 99 doesn't pull in the outlier in the non-depressed group though
      model_neg_att_win <- aov(att_neg_win ~ group, data)
        model_neg_att_win %>% 
            plot_model(type = "diag") #99, ~3 SD
      
      ggplot(data = data, aes(x = group, y = att_neg_win98)) +
        geom_point() +
        geom_smooth(method = "lm", color = "blue")  #about 2.5 SD, the outlier in the non-depressed group is pulled in a little bit 
      model_neg_att_win98 <- aov(att_neg_win98 ~ group, data)
      model_neg_att_win98 %>% 
          plot_model(type = "diag") #98, ~2.5 SD
      
      
##Normality of Residuals
model_pos_att <- aov(att_pos ~ group, data = data)
model_pos_att %>% 
    plot_model(type = "diag") #normal 

##Levene's Test for homogeniety of variance (checking that variance is the same across 2+ groups)
car::leveneTest(att_neg ~ group, data = data) #sig --> variance is not equal across groups, so can use one.way (welch's) ANOVA
car::leveneTest(att_neg_wins ~ group, data = data) #not sig, so if I'm using the winsorized values, I can do a normal anova. BUT we're doing zero-inflated Poisson model
car::leveneTest(att_pos ~ group, data = data) #not sig

data$chi_beh_control

#needs to be an integer. Scale it by 100? and then try?
data <- data %>%
  mutate(att_neg_integer = (100*(data$att_neg))) %>% 
  mutate(att_neg_win_integer = (100*(data$att_neg_win))) %>% 
  mutate(att_neg_win98_integer = (100*(data$att_neg_win98))) %>% 
  mutate(chi_beh_control_integer = (100*data$chi_beh_control))

data$att_neg_win_integer <- as.integer(data$att_neg_win_integer)
data$att_neg_win98_integer <- as.integer(data$att_neg_win98_integer)
data$att_neg_integer <- as.integer(data$att_neg_integer)
data$chi_beh_control_integer <- as.integer(data$chi_beh_control_integer)


#SHOW THESE PLOTS + RESIDUALS

data$att_neg_integer <- as.integer(data$att_neg_integer)
ggplot(data = data, aes(x = group, y = att_neg_integer)) +
        geom_point() +
        geom_smooth(method = "lm", color = "blue") 
zeromodel_neg_att <- zeroinfl(att_neg_integer ~ group, data) #non-winsorized
#summary(zeromodel_neg_att)
hist( x = residuals( zeromodel_neg_att),   
       xlab = "Value of residual",      
       main = "",                       
       breaks = 40                      
 )


neg_descriptives <- nona_data %>%
  # select just the scale scores
  select(group, att_pos, att_neg, chi_beh_control) %>% 
  group_by(group) %>% 
  #
  summarize(
    Mean = mean(att_neg), 
    Median = median(att_neg), 
    SD = sd(att_neg), 
    Min = min(att_neg),
    Max = max(att_neg)
  )
neg_descriptives

ggplot(data = data, aes(x = group, y = att_neg_win_integer)) +
        geom_point() +
        geom_smooth(method = "lm", color = "blue")  #ABOUT 3 SD, 99 doesn't pull in the outlier in the non-depressed group though
data$att_neg_win_integer <- as.integer(data$att_neg_win_integer )
zeromodel_neg_att_win <- zeroinfl(att_neg_win_integer ~ group, data) #99 winsorized
#summary(zeromodel_neg_att)
hist( x = residuals( zeromodel_neg_att),   
       xlab = "Value of residual",      
       main = "",                       
       breaks = 40                      
 )


ggplot(data = data, aes(x = group, y = att_neg_win98_integer)) +
        geom_point() +
        geom_smooth(method = "lm", color = "blue")  #about 2.5 SD, the outlier in the non-depressed group is pulled in a little bit 
data$att_neg_win98_integer <- as.integer(data$att_neg_win98_integer)      
zeromodel_neg_att_98 <- zeroinfl(att_neg_win98_integer ~ group, data) #98 winsorized - i think this is a little closer to normal
#summary(zeromodel_neg_att_98)
hist( x = residuals( zeromodel_neg_att_98),   
       xlab = "Value of residual",      
       main = "",                       
       breaks = 40                      
 )

#Postive attributions are all good
model_posprop <- aov(att_pos ~ group, data)
model_posprop %>% 
  sjPlot::plot_model(type = "diag") #normal residuals

tbl_summary()

```

```{r List-wise deletion}

#write.csv(data, file = "data_512.csv")
#nona_data<- na.omit(data) #drops 14 IDs /listwise deletion
#write.csv(nona_data, file = "nona_data.csv")

data <- rio::import("data_512.csv") 
data$c_age <- trunc(data$c_age)
data$m_age <- trunc(data$m_age)
nona_data <- rio::import("nona_data.csv") 
#Checking if I need to replacing the outlier in each group with the next highest number 
ggplot(data = data, aes(x = group, y = att_neg)) +
  geom_point() +
  geom_smooth(method = "lm", color = "blue")     
boxplot(data$att_neg)

ggplot(data = nona_data, aes(x = group, y = att_neg)) +
  geom_point() +
  geom_smooth(method = "lm", color = "blue") #do not need to winsorize or remove any participant data or replace any outliers because the listwise deletion took care of the outliers-- 5/20/KM
boxplot(nona_data$att_neg)

#df$CRP[df$CRP == 20] <- 10

```

```{r Visualize Remaining Outcome Variables}
library(purrr)
library(ggplot2)
data %>%
  keep(is.numeric) %>%                     # Keep only numeric columns
  gather() %>%                             # Convert to key-value pairs
  ggplot(aes(value)) +                     # Plot the values
    facet_wrap(~ key, scales = "free") +   # In separate panels
    geom_histogram()                       # as histogram
  
#or+ geomdensity()                       #as density

#data %>% 
 # ggplot(aes(x = crpbic_av_rej)) + 
  #geom_histogram(fill = "grey", bins = 20) +
  #geom_vline(aes(xintercept=mean(crpbic_av_rej, na.rm = T)),color="blue") +
  #geom_vline(data=data, aes(xintercept = median(crpbic_av_rej, na.rm = T)), colour= "red", linetype="dashed") +
  #theme_minimal()
```

#Question for Nick:
Not sure how to check residuals for this test though
Uncertain about which assumptions to check for mediations. Only the residuals and homoscedasticity for the model including IV and Mediator?

```{r Checking residuals and assumptions for the mediations}
#CRPBI_CHILD - Y in the Mediational analyses
crpbi_chi_tm <- lm(att_neg ~ group, data) #T on M
crpbi_chi_tm %>% 
  sjPlot::plot_model(type = "diag") #normal residuals, mostly homoscedastic?
  #gvlma(crpbi_chi_tm) # Assumptions not satisfied: skewness, kurtosis
crpbi_chi_xmt <- lm(crpbic_av_rej ~ att_neg + group, data) #TM on Y
crpbi_chi_xmt %>% 
  sjPlot::plot_model(type = "diag")
  #gvlma(crpbi_chi_xmt) #Assumptions not satisfied: skewness
crpbi_chi_ty <- lm(crpbic_av_rej ~ group, data)#T on Y
crpbi_chi_ty %>% 
  sjPlot::plot_model(type = "diag") #normal residuals, slightly unsure about homoscedasticity
  #gvlma(crpbi_chi_ty) #Assumptions not satisfied: skewness

#CRPBI_MOM - Y in the Mediational analyses
crpbi_mom_xmt <- lm(crpbim_av_rej ~ att_neg + group, data) #TM on Y
crpbi_mom_xmt %>% 
  sjPlot::plot_model(type = "diag") #normal resid
  #gvlma(crpbi_mom_xmt) 
crpbi_mom_ty <- lm(crpbim_av_rej ~ group, data)#T on Y
crpbi_mom_ty %>% 
  sjPlot::plot_model(type = "diag") #normal residuals, slightly unsure about homoscedasticity
  #gvlma(crpbi_mom_ty) 

#ysr_int - Y in the Mediational analyses
yrs_int_xmt <- lm(yrs_int ~ att_neg + group, data) #TM on Y
yrs_int_xmt %>% 
  sjPlot::plot_model(type = "diag") #mostly normal resid, slightly unsure about homoscedasticity
  #gvlma(crpbi_mom_xmt) 
yrs_int_ty <- lm(yrs_int ~ group, data)#T on Y
yrs_int_ty %>% 
  sjPlot::plot_model(type = "diag") #normal residuals
  #gvlma(crpbi_mom_ty) 

#data %>% 
 # ggplot(aes(x = crpbic_av_rej)) + 
  #geom_histogram(fill = "grey", bins = 20) +
  #geom_vline(aes(xintercept=mean(crpbic_av_rej, na.rm = T)),color="blue") +
  #geom_vline(data=data, aes(xintercept = median(crpbic_av_rej, na.rm = T)), colour= "red", linetype="dashed") +
  #theme_minimal()

#will be using glm instead of lm for the mediator analyses for any violations of assumptions
```

```{r Single Imputation - Expectation Maximization Model, eval=FALSE, include=FALSE}
#Not running this. This was my attempy
#https://cran.r-project.org/web/packages/norm/norm.pdf

vis_miss(data)
#install.packages("norm")
library(norm)

mdata <- as.matrix(data)
s <- prelim.norm(mdata)   #do preliminary manipulations
thetahat <- em.norm(s)   #find the maximum likelihood estimation
rngseed(1234)   #set random number generator seed
imp_data <- imp.norm(s,thetahat,mdata)  #impute missing data under the MLE
#this is a fail because it has so many different vairables and is creating wildly large imputed values even when I remove variables like ID from the matrix
#the suggestion by stats consulting was to impute each subset of data and compile it -- Nick did not approve.
imp_data <- as.data.frame(imp_data)
```

```{r tried Hmisc packaage multiple imputations, eval=FALSE, include=FALSE}
#missing2$imp #so next I choose the variables that have missing data that I want fixed/imputed? Proper phrasing/terminology?
#missing2$imp$EPI.VMR.ATT.POS 
#missing2$imp$EPI.VMR.ATT.POS[,1:2]
#for ALL remaining measures, it's best to have ALL the data combined, so there's as much info to gather from? what do I do about totals? demographic details relevant? lots of missing variables?
###DONT RUN ALL THIS BELOW 
#library(Hmisc)
#missing_att <- aregImpute(formula = ~Group + EPI.VMR.ATT.POS + EPI.VMR.ATT.NEG + EPI.VMR.ATT.NEU + PSI.VMR.ATT.POS + PSI.VMR.ATT.NEG + PSI.VMR.ATT.NEU, data = AttributionsClean, n.impute = 1, nk= 0)
#missing_att$imputed$EPI.VMR.ATT.POS #If n.impute = 5, giving me 5 values for each ID. Decide how to pick the missing value. I could pick mean or randomly. Could impute once. Could run analysis on each of the 5 imputed data sets. For now, 1 imputation and swap in whatever.
#missing_att$imputed$EPI.VMR.ATT.NEG
#missing_att$imputed$EPI.VMR.ATT.NEU
#AttributionsClean[40, 4] <- missing_att$imputed$EPI.VMR.ATT.POS[1,1] #fill in the EPI POS props
#AttributionsClean[40, 5] <- missing_att$imputed$EPI.VMR.ATT.NEG[1,1] #fill in the EPI NEG props
```

```{r Handle Missing Data}
pMiss <- function(data){sum(is.na(data))/length(data)*100}
apply(data,2,pMiss) #shows columns and percentage of missing data in each column. Everything is less than 5% so we're ok 

library(lattice)
library(mice)
datpat <- md.pattern(data)

#vis_miss(data)
#skim(data)
#vis_dat(data)
#which(is.na(data$epi_vmr_att_pos)) #40, 168 - nondepressed
#which(is.na(data$psi_vmr_att_pos)) #101, 137 - nondepressed
#names(data)

#see what the predictors are. Keeping them. Wanted to make sure Famid isn't being used as a predictor
set.seed(1234)
imp <- mice(data, print = FALSE)
imp$predictorMatrix
pred <- imp$predictorMatrix
pred[, "famid"] #making sure it's all 0 so that famid isn't being used as a predictor
pred[, "att_neg"] <- 0
pred[, "att_pos"] <- 0
pred[, "att_neg_win"] <- 0
pred[, "att_neg_win98"] <- 0
pred[, "att_neg_integer"] <- 0
pred[, "att_neg_win_integer"] <- 0
pred[, "att_neg_win98_integer"] <- 0
pred[, "chi_pos_pd"] <- 0
pred[, "chi_avs_pd"] <- 0
pred[, "chi_beh_control"] <- 0
pred[, "chi_beh_control_integer"] <- 0


#Now make sure that att.neg and att.pos will be the averages of epi.neg/psi.neg and epi.pos/psi.pos  
meth <- imp$meth
meth["att_neg"] <- "~I((epi_vmr_att_neg+psi_vmr_att_neg)/2)"
meth["att_pos"] <- "~I((epi_vmr_att_pos+psi_vmr_att_pos)/2)"
meth["att_neg_win"] <- "~I(Winsorize(data$att_neg, probs = c(.05, .99), na.rm = TRUE))"
meth["att_neg_win98"] <- "~I(Winsorize(data$att_neg, probs = c(.05, .98), na.rm = TRUE))"
meth["att_neg_integer"] <- "~I(att_neg*100)"
meth["att_neg_win_integer"] <- "~I(att_neg_win*100)"
meth["att_neg_win98_integer"] <- "~I(att_neg_win98*100)"
meth["chi_pos_pd"] <- "~I((chi_pos_pd_epi+chi_pos_pd_psi)/2)"
meth["chi_avs_pd"] <- "~I((chi_avs_pd_epi+chi_avs_pd_psi)/2)"
meth["chi_beh_control"] <- "~I((chi_avs_pd/chi_pos_pd))"
meth["chi_beh_control_integer"] <- "~I(chi_beh_control* 100)"

#use where to select which varibales I don't 
where = is.na(data)
#view(where)
where[,c("epi_coder","psi_coder", "m_american_indian_alaska_native", "m_asian", "m_black", "m_native_hawaiian_pacific_islander", "relationship", "c_american_indian_alaska_native", "c_asian", "c_black")] = FALSE

set.seed(1234)
impute <- mice(data, m = 5, pred = pred, meth = meth, where = where)
plot(impute)
class(impute)

#Checking that values were imputed for the missing variables
impute$imp$epi_vmr_att_neg
impute$imp$att_neg
impute$imp$psi_vmr_att_neg
impute$imp$epi_vmr_att_pos
impute$imp$att_pos
impute$imp$pos_rpm_psi
impute$imp$avs_dpe_epi
impute$imp$dys_rpm_epi
impute$imp$psi_vmr_att_neu
impute$imp$relation_child_other_relative
impute$imp$relationship

nona_data <- complete(impute,1)

vis_miss(nona_data)
nona_data <- nona_data %>% 
  select(-att_neg_98_integer)
view(nona_data)

avg_att_p1 <- ((nona_data$epi_vmr_att_pos+nona_data$psi_vmr_att_pos)/2)
identical(nona_data$att_pos, avg_att_p1)
round(nona_data$att_pos,2) == round(avg_att_p1,2)
view(cbind(nona_data$att_pos, avg_att_p1))





#winsorize after the missing data is imputed
#data <- data %>% 
 # mutate(att_neg_win = Winsorize(data$att_neg, probs = c(.05, .99), na.rm = TRUE)) %>%  #winsorizing closer to 3 SD
  #mutate(att_neg_win98 = Winsorize(data$att_neg, probs = c(.05, .98), na.rm = TRUE)) #closer to 2.5 SD
#needs to be an integer. Scale it by 100? and then try?
#data <- data %>%
 # mutate(att_neg_integer = (100*(data$att_neg))) %>% 
  #mutate(att_neg_win_integer = (100*(data$att_neg_win))) %>% #need to figure out which winsorized variable to transform as integer
  #mutate(att_neg_98_integer = (100*(data$att_neg_win98))) %>% 
  #mutate(chi_beh_control_integer = (100*data$chi_beh_control)) 

view(data)
data$att_neg_integer <- as.integer(data$att_neg_integer)
data$att_neg_win_integer <- as.integer(data$att_neg_win_integer)
data$att_neg_98_integer <- as.integer(data$att_neg_98_integer)
data$chi_beh_control_integer <- as.integer(data$chi_beh_control_integer)
```


```{r Handle Missing Data - not using multiple imputations anymore, eval=FALSE, include=FALSE}
nona_data2 <- complete(impute,2)
nona_data3 <- complete(impute,3)
nona_data4 <- complete(impute,4)
nona_data5 <- complete(impute,5)
view(nona_data)

vis_dat(nona_data)
vis_dat(nona_data2)
vis_dat(nona_data3)
vis_dat(nona_data4)
vis_dat(nona_data5)

#Checking that the averages calculated correctly -- looks right 

avg_att_p2<- ((nona_data2$epi_vmr_att_pos+nona_data2$psi_vmr_att_pos)/2)
avg_att_p3<- ((nona_data3$epi_vmr_att_pos+nona_data3$psi_vmr_att_pos)/2)
avg_att_p4<- ((nona_data4$epi_vmr_att_pos+nona_data4$psi_vmr_att_pos)/2)
avg_att_p5<- ((nona_data5$epi_vmr_att_pos+nona_data5$psi_vmr_att_pos)/2)
avg_att_n1 <- ((nona_data$epi_vmr_att_neg+nona_data$psi_vmr_att_neg)/2)
avg_att_n2<- ((nona_data2$epi_vmr_att_neg+nona_data2$psi_vmr_att_neg)/2)
avg_att_n3<- ((nona_data3$epi_vmr_att_neg+nona_data3$psi_vmr_att_neg)/2)
avg_att_n4<- ((nona_data4$epi_vmr_att_neg+nona_data4$psi_vmr_att_neg)/2)
avg_att_n5<- ((nona_data5$epi_vmr_att_neg+nona_data5$psi_vmr_att_neg)/2)
identical(nona_data2$att_pos, avg_att_p2)
identical(nona_data3$att_pos, avg_att_p3)
identical(nona_data4$att_pos, avg_att_p4)
identical(nona_data5$att_pos, avg_att_p5)
identical(nona_data$att_neg, avg_att_n1)

identical(nona_data2$att_neg, avg_att_n2)
round(nona_data2$att_neg,1) == round(avg_att_n2,1)
identical(nona_data3$att_neg, avg_att_n3)
round(nona_data3$att_neg,1) == round(avg_att_n3,1)
identical(nona_data4$att_neg, avg_att_n4)
round(nona_data4$att_neg,1) == round(avg_att_n4,1)
identical(nona_data5$att_neg, avg_att_n5)
round(nona_data5$att_neg,1) == round(avg_att_n5,1)
```

#ANALYSES
#Issue - unable to get pool function to work bc there are non-integer values EVEN though the DV is classified as an integer
https://www.uni-bielefeld.de/soz/kds/pdf/countimp.pdf according to this, my code SHOULD work


```{r ANOVA - neg att: main effect + interaction. violation of several assumptions}
names(nona_data) 

a_data_att_n <- nona_data %>% 
  select(famid, group, epi_vmr_att_neg, psi_vmr_att_neg)

a_data_att_n <- melt(a_data_att_n, 
                   id = c("famid", "group"),
                   measured = c("epi_vmr_att_neg", "psi_vmr_att_neg"))
colnames(a_data_att_n) = c("famid", "group", "task", "neg_att")
a_data_att_n$group <- as.factor(a_data_att_n$group)
#view(a_data_att_n)

a_data_att_n %>%
  group_by(group, task) %>%
  get_summary_stats(neg_att, type = "mean_sd")

#gmodels::CrossTable(a_data_att_n$group, a_data_att_n$task)

bxp.neg <- ggboxplot(
  a_data_att_n, x = "group", y = "neg_att",
  color = "task", palette = "jco"
  )
bxp.neg2 <- ggboxplot(
  a_data_att_n, x = "task", y = "neg_att",
  color = "group", palette = "jco"
  )

#Assumptions
##Checking for Outliers
a_data_att_n %>%
 group_by(group, task) %>%
  identify_outliers(neg_att) 

###epi_vmr_att_neg	108289	& 	epi_vmr_att_neg	101627	:outliers and extreme
#Without the outliers 
a_data_att_n_noout <- a_data_att_n %>% 
  filter(!famid %in%c( "108289", "101627"))

#LOG AND SQ TRANSFORMATIONS. DOING + 1 BECAUSE LOG OF 0 IS -INF, AND SO IT'S CREATING PROBLEMS
#Creating a new df for each transformed variable 
a_data_att_n$neg_att_log = log(a_data_att_n$neg_att)
a_data_att_n_log <- a_data_att_n %>% 
   select(famid, group, task, neg_att_log)
a_data_att_n$neg_att_log_1 = log(1 + a_data_att_n$neg_att)
a_data_att_n_log_1 <- a_data_att_n %>% 
   select(famid, group, task, neg_att_log_1)
a_data_att_n$neg_att_sq = sqrt(a_data_att_n$neg_att)
a_data_att_n_sq <- a_data_att_n %>% 
  select(famid, group, task, neg_att_sq)
a_data_att_n$neg_att_sq_1 = sqrt(1 + a_data_att_n$neg_att)
a_data_att_n_sq_1 <- a_data_att_n %>% 
  select(famid, group, task, neg_att_sq_1)
a_data_att_n <- a_data_att_n %>% 
  select(famid, group, task, neg_att)

##Identifying outliers with the non-transformed and transformed - squared is best -
a_data_att_n %>%
 group_by(group, task) %>%
  identify_outliers(neg_att) #16 outliers, 2 extremes
a_data_att_n_noout %>%
 group_by(group, task) %>%
  identify_outliers(neg_att) #15 outliers, 0 extremes
#a_data_att_n_log %>%
 #group_by(group, task) %>%
  #identify_outliers(neg_att_log) #not usable because -INF
a_data_att_n_log_1 %>%
 group_by(group, task) %>%
  identify_outliers(neg_att_log_1) 	#13 outliers, 1 extreme epi_vmr_att_neg 108289	
a_data_att_n_sq %>%
 group_by(group, task) %>%
  identify_outliers(neg_att_sq) #NO OUTLIERS! 
a_data_att_n_sq_1 %>%
 group_by(group, task) %>%
  identify_outliers(neg_att_sq_1) #14 outliers, 1 extreme Non Depressed	epi_vmr_att_neg	108289	

 bxp.neg
 ggboxplot(
  a_data_att_n_log, x = "group", y = "neg_att_log",
  color = "task", palette = "jco"
  )
  ggboxplot(
  a_data_att_n_log_1, x = "group", y = "neg_att_log_1",
  color = "task", palette = "jco"
  )
 
  ggboxplot(
  a_data_att_n_sq, x = "group", y = "neg_att_sq",
  color = "task", palette = "jco"
  )
  
  ggboxplot(
  a_data_att_n_sq_1, x = "group", y = "neg_att_sq_1",
  color = "task", palette = "jco"
  )

##Normality Assumption
a_data_att_n %>%
 group_by(group, task) %>%
shapiro_test(neg_att) #p val > .05 indicates normality. All below .05... --> violated

ggqqplot(a_data_att_n, "neg_att", ggtheme = theme_bw()) +
  facet_grid(task ~ group) # points fall approximately along the reference line, for each cell, except below 0

a_data_att_n_log_1 %>%
 group_by(group, task) %>%
shapiro_test(neg_att_log_1) #all <.05 

ggqqplot(a_data_att_n_log_1, "neg_att_log_1", ggtheme = theme_bw()) +
  facet_grid(task ~ group) # 

a_data_att_n_sq %>%
 group_by(group, task) %>%
shapiro_test(neg_att_sq) #all <.05

ggqqplot(a_data_att_n_sq, "neg_att_sq", ggtheme = theme_bw()) +
  facet_grid(task ~ group) #The points fall within the shaded line better than they do with the other transformations. NICK - is this an issue?

a_data_att_n_sq_1 %>%
 group_by(group, task) %>%
shapiro_test(neg_att_sq_1) #<.05

ggqqplot(a_data_att_n_sq_1, "neg_att_sq_1", ggtheme = theme_bw()) +
  facet_grid(task ~ group)  

##Homogeneity of Variance -- squared
a_data_att_n %>%
  group_by(task) %>%
  levene_test(neg_att ~ group) #psi p-value <.05 --> homog violated 

#a_data_att_n_log %>%
 # group_by(task) %>%
#  levene_test(neg_att_log ~ group) #can't run because -INF
a_data_att_n_log_1 %>%
  group_by(task) %>%
  levene_test(neg_att_log_1 ~ group) #violated
a_data_att_n_sq %>%
  group_by(task) %>%
  levene_test(neg_att_sq ~ group) #p-values > .05 -- homog met
a_data_att_n_sq_1 %>%
  group_by(task) %>%
  levene_test(neg_att_sq_1 ~ group) #violated

##Homog of covariance >.001
###Compute Box’s M-test:
box_m(a_data_att_n[, "neg_att", drop = FALSE], a_data_att_n$group) #<.001 --> covariance homogeniety violated. Note that, if you do not have homogeneity of covariances, you could consider separating your analyses into distinct repeated measures ANOVAs for each group. Alternatively, you could omit the interpretation of the interaction term. Unfortunately, it is difficult to remedy a failure of this assumption. Often, a mixed ANOVA is run anyway and the violation noted. 

#box_m(a_data_att_n[, "neg_att_log", drop = FALSE], a_data_att_n$group) 
box_m(a_data_att_n_log_1[, "neg_att_log_1", drop = FALSE], a_data_att_n_log_1$group) 
box_m(a_data_att_n_sq[, "neg_att_sq", drop = FALSE], a_data_att_n_sq$group)  # 0.02905303. Homog of covariance met. 
box_m(a_data_att_n_sq_1[, "neg_att_sq_1", drop = FALSE], a_data_att_n_sq_1$group) 

#MAIN EFFECTS AND INTERACTION WITH NON-TRANSFORMED AND SQ TRANSFORMATION 

negatt.aov <- anova_test(
  data = a_data_att_n, dv = neg_att, wid = famid,
  between = group, within = task
  )
get_anova_table(negatt.aov) #sig main effects & interaction

negatt.aov.sq <- anova_test(
  data = a_data_att_n_sq, dv = neg_att_sq, wid = famid,
  between = group, within = task
  )
get_anova_table(negatt.aov.sq) #sig main effects & interaction

# simple main effect of group during each task. Simple main effect of group was significant during PSI task, but not at EPI task.
main_neg <- a_data_att_n %>%
  group_by(task) %>%
  anova_test(dv = neg_att, wid = famid, between = group) %>%
  get_anova_table() %>%
  adjust_pvalue(method = "holm")
main_neg

pwc <- a_data_att_n %>%
  group_by(task) %>%
  pairwise_t_test(neg_att ~ group, p.adjust.method = "holm", detailed = T)
pwc

a_data_att_n %>% #I think this is the main effect of group.. 
  group_by(task) %>%
  get_summary_stats(neg_att, type = "mean_sd")

main_neg_sq <- a_data_att_n_sq %>%
  group_by(task) %>%
  anova_test(dv = neg_att_sq, wid = famid, between = group) %>%
  get_anova_table() %>%
  adjust_pvalue(method = "holm")
main_neg_sq

pwc_sq <- a_data_att_n_sq %>%
  group_by(task) %>%
  pairwise_t_test(neg_att_sq ~ group, p.adjust.method = "holm") #the adjusted p-value is different from the main_neg 
pwc_sq

# main effect of task in each group
main_neg2 <- a_data_att_n %>%
  group_by(group) %>%
  anova_test(dv = neg_att, wid = famid, within = task) %>%
  get_anova_table() %>%
  adjust_pvalue(method = "holm")
main_neg2

pwc2 <- a_data_att_n %>%
  group_by(group) %>%
  pairwise_t_test(
    neg_att ~ task, paired = TRUE, 
    p.adjust.method = "holm"
    ) %>%
  select(-df, -statistic, -p) # Remove details
pwc2

a_data_att_n %>%
  group_by(group) %>%
  get_summary_stats(neg_att, type = "mean_sd")

main_neg2_sq <- a_data_att_n_sq %>%
  group_by(group) %>%
  anova_test(dv = neg_att_sq, wid = famid, within = task) %>%
  get_anova_table() %>%
  adjust_pvalue(method = "holm")
main_neg2_sq


pwc2_sq <- a_data_att_n_sq %>%
  group_by(group) %>%
  pairwise_t_test(
    neg_att_sq ~ task, paired = TRUE, 
    p.adjust.method = "holm"
    ) %>%
  select(-df, -statistic, -p) # Remove details
pwc2_sq
a_data_att_n %>%
  group_by(group, task) %>%
  get_summary_stats(neg_att, type = "mean_sd")

# Visualization: boxplots with p-values
pwc <- pwc %>% add_xy_position(x = "task")
pwc.filtered <- pwc %>% filter(task != "epi_vmr_att_neg") 
bxp.neg2 + 
  stat_pvalue_manual(pwc, tip.length = 0, hide.ns = TRUE) +
  labs(
    subtitle = get_test_label(negatt.aov, detailed = TRUE),
    caption = get_pwc_label(pwc)
  )

pwc2 <- pwc2 %>% add_xy_position(x = "group")
pwc2.filtered <- pwc2 
bxp.neg + 
  stat_pvalue_manual(pwc2.filtered, tip.length = 0, hide.ns = TRUE) +
  labs(
    subtitle = get_test_label(negatt.aov, detailed = TRUE),
    caption = get_pwc_label(pwc2)
  )
```

```{r ANOVA - pos att: no main effects OR intrxn}
a_data_att_p <- nona_data %>% 
  select(famid, group, epi_vmr_att_pos, psi_vmr_att_pos)
a_data_att_p <- melt(a_data_att_p, 
                   id = c("famid", "group"),
                   measured = c( "epi_vmr_att_pos", "psi_vmr_att_pos"))
colnames(a_data_att_p ) = c("famid", "group", "task", "pos_att")
a_data_att_p$group <- as.factor(a_data_att_p$group)
view(a_data_att_p)  


a_data_att_p %>%
  group_by(group, task) %>%
  get_summary_stats(pos_att, type = "mean_sd")

bxp.pos <- ggboxplot(
  a_data_att_p, x = "group", y = "pos_att",
  color = "task", palette = "jco"
  )



#Assumptions
##Checking for Outliers
a_data_att_p %>%
 group_by(group, task) %>%
  identify_outliers(pos_att) #3 outliers. Not extreme.

a_data_att_p_noout <- a_data_att_p %>% 
  filter(!famid%in%c("103628", "100495", "105031"))

#Transformations
a_data_att_p$pos_att_log = log(a_data_att_p$pos_att)
a_data_att_p_log <- a_data_att_p %>% 
   select(famid, group, task, pos_att_log)
a_data_att_p$pos_att_log_1 = log(1 + a_data_att_p$pos_att)
a_data_att_p_log_1 <- a_data_att_p %>% 
   select(famid, group, task, pos_att_log_1)
a_data_att_p$pos_att_sq = sqrt(a_data_att_p$pos_att)
a_data_att_p_sq <- a_data_att_p %>% 
  select(famid, group, task, pos_att_sq)
a_data_att_p$pos_att_sq_1 = sqrt(1 + a_data_att_p$pos_att)
a_data_att_p_sq_1 <- a_data_att_p %>% 
  select(famid, group, task, pos_att_sq_1)
a_data_att_p <- a_data_att_p %>% 
  select(famid, group, task, pos_att)

##Normality Assumption
a_data_att_p %>%
group_by(group, task) %>%
shapiro_test(pos_att) #<.05
ggqqplot(a_data_att_p, "pos_att", ggtheme = theme_bw()) +
  facet_grid(task ~ group) # points fall approximately along the reference line and are within the shaded area for each cell, except below 0. We can't have <0, so that makese sense? So we can assume normality?

a_data_att_p_noout %>%
group_by(group, task) %>%
shapiro_test(pos_att) #all <.05
ggqqplot(a_data_att_p_noout, "pos_att", ggtheme = theme_bw()) +
  facet_grid(task ~ group) 

#a_data_att_p_log %>%
#group_by(group, task) %>%
#shapiro_test(pos_att_log) #-INF
#ggqqplot(a_data_att_p_log, "pos_att_log", ggtheme = theme_bw()) +
 # facet_grid(task ~ group) 

a_data_att_p_log_1 %>%
group_by(group, task) %>%
shapiro_test(pos_att_log_1) #one <.05
ggqqplot(a_data_att_p_log_1, "pos_att_log_1", ggtheme = theme_bw()) +
  facet_grid(task ~ group) #slightly better fit than original 

a_data_att_p_sq %>%
group_by(group, task) %>% #all <.05
shapiro_test(pos_att_sq) 
ggqqplot(a_data_att_p_sq, "pos_att_sq", ggtheme = theme_bw()) +
  facet_grid(task ~ group) #worse fit

a_data_att_p_sq_1 %>%
group_by(group, task) %>% #3 <.05
shapiro_test(pos_att_sq_1) 
ggqqplot(a_data_att_p_sq_1, "pos_att_sq_1", ggtheme = theme_bw()) +
  facet_grid(task ~ group) #worse fit

##Homogeneity of Variance
a_data_att_p %>%
  group_by(task) %>%
  levene_test(pos_att ~ group) #all >.05 --> assumption met

a_data_att_p_noout %>%
  group_by(task) %>%
  levene_test(pos_att ~ group) #all >.05 --> assumption met

a_data_att_p_log_1 %>%
  group_by(task) %>%
  levene_test(pos_att_log_1 ~ group) #all >.05 --> assumption met

##Homog of covariance >.001
###Compute Box’s M-test:
box_m(a_data_att_p[, "pos_att", drop = FALSE], a_data_att_p$group) #>.001 --> assumption met. 
box_m(a_data_att_p_noout[, "pos_att", drop = FALSE], a_data_att_p_noout$group) #>.001 --> assumption met.
box_m(a_data_att_p_log_1[, "pos_att_log_1", drop = FALSE], a_data_att_p_log_1$group) #>.001 --> assumption met. 

posatt.aov <- anova_test(
  data = a_data_att_p, dv = pos_att, wid = famid,
  between = group, within = task
  )
get_anova_table(posatt.aov)

posatt.aov.noout <- anova_test(
  data = a_data_att_p_noout, dv = pos_att, wid = famid,
  between = group, within = task
  )
get_anova_table(posatt.aov.noout)

posatt.aov.log.1 <- anova_test(
  data = a_data_att_p_log_1, dv = pos_att_log_1, wid = famid,
  between = group, within = task
  )
get_anova_table(posatt.aov.log.1)

#No main effects or interactions for ALL DATA SETS, even transformed set that met all assumptions
```

```{r ANOVA - avs rpm: main effects}
names(nona_data)
a_data_avs_rpm <- nona_data %>% 
  select(famid, group, avs_rpm_epi, avs_rpm_psi)

a_data_avs_rpm <- melt(a_data_avs_rpm, 
                   id = c("famid", "group"),
                   measured = c("avs_rpm_epi", "avs_rpm_psi"))
colnames(a_data_avs_rpm) = c("famid", "group", "task", "avs_rpm")
a_data_avs_rpm$group <- as.factor(a_data_avs_rpm$group)
#view(a_data_avs_rpm)


a_data_avs_rpm %>%
  group_by(group, task) %>%
  get_summary_stats(avs_rpm, type = "mean_sd")

 bxp.avs.rpm <- ggboxplot(
  a_data_avs_rpm, x = "group", y = "avs_rpm",
  color = "task", palette = "jco"
  )
 
  bxp.avs.rpm2 <- ggboxplot(
  a_data_avs_rpm, x = "task", y = "avs_rpm",
  color = "group", palette = "jco"
  )

#Assumptions
##Checking for Outliers
a_data_avs_rpm %>%
 group_by(group, task) %>%
  identify_outliers(avs_rpm) #1 TRUE/TRUE outlier... Non Depressed	avs_rpm_psi	104237
a_data_avs_rpm_noout <- a_data_avs_rpm %>%
 filter(famid != "104237")

#### trying transformations 
a_data_avs_rpm$avs_rpm_log = log(a_data_avs_rpm$avs_rpm)
a_data_avs_rpm_log <- a_data_avs_rpm %>% 
   select(famid, group, task, avs_rpm_log)
a_data_avs_rpm$avs_rpm_log_1 = log(1 + a_data_avs_rpm$avs_rpm)
a_data_avs_rpm_log_1 <- a_data_avs_rpm %>% 
   select(famid, group, task, avs_rpm_log_1)
a_data_avs_rpm$avs_rpm_sq = sqrt(a_data_avs_rpm$avs_rpm)
a_data_avs_rpm_sq <- a_data_avs_rpm %>% 
  select(famid, group, task, avs_rpm_sq)
a_data_avs_rpm$avs_rpm_sq_1 = sqrt(1 + a_data_avs_rpm$avs_rpm)
a_data_avs_rpm_sq_1 <- a_data_avs_rpm %>% 
  select(famid, group, task, avs_rpm_sq_1)
a_data_avs_rpm <- a_data_avs_rpm %>% 
  select(famid, group, task, avs_rpm)

a_data_avs_rpm %>%
 group_by(group, task) %>%
  identify_outliers(avs_rpm) 
a_data_avs_rpm_log %>% # many -INF values
 group_by(group, task) %>%
  identify_outliers(avs_rpm_log) 
a_data_avs_rpm_log_1 %>%
 group_by(group, task) %>%
  identify_outliers(avs_rpm_log_1) 	
a_data_avs_rpm_sq %>%
 group_by(group, task) %>%
  identify_outliers(avs_rpm_sq) #lowest number of outliers. No TRUE/TRUE. Non Depressed	avs_rpm_psi	104237	
a_data_avs_rpm_sq_1 %>%
 group_by(group, task) %>%
  identify_outliers(avs_rpm_sq_1) 


 bxp.avs.rpm
 ggboxplot(
  a_data_avs_rpm_log, x = "group", y = "avs_rpm_log",
  color = "task", palette = "jco"
  )
  ggboxplot(
  a_data_avs_rpm_log_1, x = "group", y = "avs_rpm_log_1",
  color = "task", palette = "jco"
  )
 
  ggboxplot(
  a_data_avs_rpm_sq, x = "group", y = "avs_rpm_sq",
  color = "task", palette = "jco"
  )
  
  ggboxplot(
  a_data_avs_rpm_sq_1, x = "group", y = "avs_rpm_sq_1",
  color = "task", palette = "jco"
  )

##Normality Assumption
a_data_avs_rpm %>%
 group_by(group, task) %>%
shapiro_test(avs_rpm) #all <.05
  
ggqqplot(a_data_avs_rpm, "avs_rpm", ggtheme = theme_bw()) +
  facet_grid(task ~ group) # points fall a little above the reference line

a_data_avs_rpm_noout %>%
 group_by(group, task) %>%
shapiro_test(avs_rpm) #all <.05
ggqqplot(a_data_avs_rpm_noout, "avs_rpm", ggtheme = theme_bw()) +
  facet_grid(task ~ group) # points fall a little above the reference line, but better than the original 

#a_data_avs_rpm_log %>%
 #group_by(group, task) %>%
#shapiro_test(avs_rpm_log) #
#ggqqplot(a_data_avs_rpm_log, "avs_rpm_log", ggtheme = theme_bw()) +
 # facet_grid(task ~ group) #Several NAs bc of - INF

a_data_avs_rpm_log_1 %>%
 group_by(group, task) %>%
shapiro_test(avs_rpm_log_1) #values <.05

ggqqplot(a_data_avs_rpm_log_1, "avs_rpm_log_1", ggtheme = theme_bw()) +
  facet_grid(task ~ group) # 

a_data_avs_rpm_sq %>%
 group_by(group, task) %>%
shapiro_test(avs_rpm_sq) #1 value <.05 
ggqqplot(a_data_avs_rpm_sq, "avs_rpm_sq", ggtheme = theme_bw()) +
  facet_grid(task ~ group) #Pretty much all of the plotted points fall within the shaded area, so I think this might be the best option

a_data_avs_rpm_sq_1 %>%
 group_by(group, task) %>%
shapiro_test(avs_rpm_sq_1) 
ggqqplot(a_data_avs_rpm_sq_1, "avs_rpm_sq_1", ggtheme = theme_bw()) +
  facet_grid(task ~ group) # 

##Homogeneity of Variance
a_data_avs_rpm %>%
  group_by(task) %>%
  levene_test(avs_rpm ~ group) #epi p-value <.05 --> homog violated 

#a_data_avs_rpm_log %>%
 # group_by(task) %>%
  #levene_test(avs_rpm_log ~ group) #too many NAns, won't run
a_data_avs_rpm_log_1 %>%
  group_by(task) %>%
  levene_test(avs_rpm_log_1 ~ group)
a_data_avs_rpm_sq %>%
  group_by(task) %>%
  levene_test(avs_rpm_sq ~ group) #all p-values >.05
a_data_avs_rpm_sq_1 %>%
  group_by(task) %>%
  levene_test(avs_rpm_sq_1 ~ group)

##Homog of covariance >.001
###Compute Box’s M-test:
box_m(a_data_avs_rpm[, "avs_rpm", drop = FALSE], a_data_avs_rpm$group) #assumption met
box_m(a_data_avs_rpm_log[, "avs_rpm_log", drop = FALSE], a_data_avs_rpm_log$group) 
box_m(a_data_avs_rpm_log_1[, "avs_rpm_log_1", drop = FALSE], a_data_avs_rpm_log_1$group) #.33, assumption met
box_m(a_data_avs_rpm_sq[, "avs_rpm_sq", drop = FALSE], a_data_avs_rpm_sq$group)  # 0.77, assumption met
box_m(a_data_avs_rpm_sq_1[, "avs_rpm_sq_1", drop = FALSE], a_data_avs_rpm_sq_1$group) 


avs.rpm.aov <- anova_test(
  data = a_data_avs_rpm, dv = avs_rpm, wid = famid,
  between = group, within = task
  )
get_anova_table(avs.rpm.aov)

avs.rpm.aov.noout <- anova_test(
  data = a_data_avs_rpm_noout, dv = avs_rpm, wid = famid,
  between = group, within = task
  )
get_anova_table(avs.rpm.aov.noout)


avs.rpm.aov.sq <- anova_test(
  data = a_data_avs_rpm_sq, dv = avs_rpm_sq, wid = famid,
  between = group, within = task
  )
get_anova_table(avs.rpm.aov.sq)

a_data_avs_rpm %>%
  group_by(group, task) %>%
  get_summary_stats(avs_rpm, type = "mean_sd")
a_data_avs_rpm_noout %>%
  group_by(group, task) %>%
  get_summary_stats(avs_rpm, type = "mean_sd")
a_data_avs_rpm_sq %>%
  group_by(group, task) %>%
  get_summary_stats(avs_rpm_sq, type = "mean_sd")

#MAIN EFFECTS ONLY

#MAIN EFFECT OF GROUP AND TASK -- KAVYA COME BACK TO THIS!!! MAIN EFFECTS MIGHT NOT HAVE BEEN DONE CORRECTLY 
main_avs_rpm <- a_data_avs_rpm %>%
  pairwise_t_test(
    avs_rpm ~ group, 
    p.adjust.method = "holm"
  )
main_avs_rpm

main_avs_rpm_2 <- a_data_avs_rpm %>%
  pairwise_t_test(
    avs_rpm ~ task, 
    p.adjust.method = "holm"
  )
main_avs_rpm_2

a_data_avs_rpm %>%
  group_by(group, task) %>%
  get_summary_stats(avs_rpm, type = "mean_sd")

pwc_avs_rpm <- a_data_avs_rpm %>%
  group_by(task) %>%
  pairwise_t_test(avs_rpm ~ group, p.adjust.method = "holm") 
pwc_avs_rpm

pwc_avs_rpm_2 <- a_data_avs_rpm %>%
  group_by(group) %>%
  pairwise_t_test(avs_rpm ~ task, p.adjust.method = "holm") 
pwc_avs_rpm_2

##doing with the sq transformed set also 
a_data_avs_rpm_sq %>%
  pairwise_t_test(
    avs_rpm_sq ~ group, 
    p.adjust.method = "holm"
  )

a_data_avs_rpm_sq %>%
  pairwise_t_test(
    avs_rpm_sq ~ task, paired = TRUE, 
    p.adjust.method = "holm"
  )

# Visualization
pwc_avs_rpm <- pwc_avs_rpm %>% add_xy_position(x = "task")
 bxp.avs.rpm + 
  stat_pvalue_manual(pwc_avs_rpm, tip.length = 0, hide.ns = TRUE) +
  labs(
    subtitle = get_test_label(avs.rpm.aov, detailed = TRUE),
    caption = get_pwc_label(pwc_avs_rpm)
  )

pwc_avs_rpm_2 <- pwc_avs_rpm_2 %>% add_xy_position(x = "group")
 bxp.avs.rpm2 + 
  stat_pvalue_manual(pwc_avs_rpm_2, tip.length = 0, hide.ns = TRUE) +
  labs(
    subtitle = get_test_label(avs.rpm.aov, detailed = TRUE),
    caption = get_pwc_label(pwc_avs_rpm_2)
  )
```

```{r ANOVA - avs dpe: main effects and intrxn BUT only main effects with log1 data}

a_data_avs_dpe <- nona_data %>% 
  select(famid, group, avs_dpe_epi, avs_dpe_psi)

a_data_avs_dpe <- melt(a_data_avs_dpe, 
                   id = c("famid", "group"),
                   measured = c("avs_dpe_epi", "avs_dpe_psi"))
colnames(a_data_avs_dpe) = c("famid", "group", "task", "avs_dpe")
a_data_avs_dpe$group <- as.factor(a_data_avs_dpe$group)
#view(a_data_avs_dpe)


a_data_avs_dpe %>%
  group_by(group, task) %>%
  get_summary_stats(avs_dpe, type = "mean_sd")

bxp.avs.dpe <- ggboxplot(
  a_data_avs_dpe, x = "group", y = "avs_dpe",
  color = "task", palette = "jco"
  )

bxp.avs.dpe.2 <- ggboxplot(
  a_data_avs_dpe, x = "task", y = "avs_dpe",
  color = "group", palette = "jco"
  )

#Assumptions
##Checking for Outliers
a_data_avs_dpe %>%
 group_by(group, task) %>%
  identify_outliers(avs_dpe) #12 outliers, 6 extreme...all in depressed
#ridding of extreme outliers
a_data_avs_dpe_noout <- a_data_avs_dpe %>% 
  filter(!famid%in% c("100293", "100757", "100776", "100873", "101070","102106"))

view(a_data_avs_dpe)
view(a_data_avs_dpe_noout)

#### trying transformations 
a_data_avs_dpe$avs_dpe_log = log(a_data_avs_dpe$avs_dpe)
a_data_avs_dpe_log <- a_data_avs_dpe %>% 
   select(famid, group, task, avs_dpe_log)
a_data_avs_dpe$avs_dpe_log_1 = log(1 + a_data_avs_dpe$avs_dpe)
a_data_avs_dpe_log_1 <- a_data_avs_dpe %>% 
   select(famid, group, task, avs_dpe_log_1)
a_data_avs_dpe$avs_dpe_sq = sqrt(a_data_avs_dpe$avs_dpe)
a_data_avs_dpe_sq <- a_data_avs_dpe %>% 
  select(famid, group, task, avs_dpe_sq)
a_data_avs_dpe$avs_dpe_sq_1 = sqrt(1 + a_data_avs_dpe$avs_dpe)
a_data_avs_dpe_sq_1 <- a_data_avs_dpe %>% 
  select(famid, group, task, avs_dpe_sq_1)
a_data_avs_dpe <- a_data_avs_dpe %>% 
  select(famid, group, task, avs_dpe)

#outliers with transformed -- SOS NOT SURE WHICH IS THE BEST!! Ask Nick
a_data_avs_dpe %>%
 group_by(group, task) %>%
  identify_outliers(avs_dpe) 
a_data_avs_dpe_log %>%
 group_by(group, task) %>%
  identify_outliers(avs_dpe_log) 
a_data_avs_dpe_log_1 %>%
 group_by(group, task) %>%
  identify_outliers(avs_dpe_log_1) 	#18 outliers, 1 extreme 
a_data_avs_dpe_sq %>%
 group_by(group, task) %>%
  identify_outliers(avs_dpe_sq) #21 out, 3 extreme	
a_data_avs_dpe_sq_1 %>%
 group_by(group, task) %>%
  identify_outliers(avs_dpe_sq_1) #11 out, 4 extreme


 bxp.avs.dpe
 ggboxplot(
  a_data_avs_dpe_log, x = "group", y = "avs_dpe_log",
  color = "task", palette = "jco"
  )
  ggboxplot(
  a_data_avs_dpe_log_1, x = "group", y = "avs_dpe_log_1",
  color = "task", palette = "jco"
  )
  ggboxplot(
  a_data_avs_dpe_sq, x = "group", y = "avs_dpe_sq",
  color = "task", palette = "jco"
  )
  ggboxplot(
  a_data_avs_dpe_sq_1, x = "group", y = "avs_dpe_sq_1",
  color = "task", palette = "jco"
  )

##Normality Assumption

ggqqplot(a_data_avs_dpe, "avs_dpe", ggtheme = theme_bw()) +
  facet_grid(task ~ group) # 1 abnormal plot, but everything else is almost perfect 
a_data_avs_dpe %>%
 group_by(group, task) %>%
shapiro_test(avs_dpe) # all <.05

#a_data_avs_dpe_log %>%
 #group_by(group, task) %>%
#shapiro_test(avs_dpe_log) #too many - INF

#ggqqplot(a_data_avs_dpe_log, "avs_dpe_log", ggtheme = theme_bw()) +
 # facet_grid(task ~ group) #Several NAs 

a_data_avs_dpe_log_1 %>%
 group_by(group, task) %>%
shapiro_test(avs_dpe_log_1) # all <.05
ggqqplot(a_data_avs_dpe_log_1, "avs_dpe_log_1", ggtheme = theme_bw()) +
  facet_grid(task ~ group) #pretty normal

a_data_avs_dpe_sq %>%
 group_by(group, task) %>% 
shapiro_test(avs_dpe_sq) # all <.05

ggqqplot(a_data_avs_dpe_sq, "avs_dpe_sq", ggtheme = theme_bw()) +
  facet_grid(task ~ group) #pretty normal

a_data_avs_dpe_sq_1 %>%
 group_by(group, task) %>%
shapiro_test(avs_dpe_sq_1) # all <.05

ggqqplot(a_data_avs_dpe_sq_1, "avs_dpe_sq_1", ggtheme = theme_bw()) +
  facet_grid(task ~ group) 


##Homogeneity of Variance -- violated in all instances
a_data_avs_dpe %>%
  group_by(task) %>%
  levene_test(avs_dpe ~ group) #psi p-value <.05 --> homog violated 

#a_data_avs_dpe_log %>%
 # group_by(task) %>%
  #levene_test(avs_dpe_log ~ group) #too many NAns, won't run
a_data_avs_dpe_log_1 %>%
  group_by(task) %>%
  levene_test(avs_dpe_log_1 ~ group) #psi p-value .02
a_data_avs_dpe_sq %>%
  group_by(task) %>%
  levene_test(avs_dpe_sq ~ group) #psi p-value <.01
a_data_avs_dpe_sq_1 %>%
  group_by(task) %>%
  levene_test(avs_dpe_sq_1 ~ group) #psi p-value <.01


##Homog of covariance >.001 -- log_1 meets assumptions
###Compute Box’s M-test:
box_m(a_data_avs_dpe[, "avs_dpe", drop = FALSE], a_data_avs_dpe$group) #violated
box_m(a_data_avs_dpe_log[, "avs_dpe_log", drop = FALSE], a_data_avs_dpe_log$group) #violated
box_m(a_data_avs_dpe_log_1[, "avs_dpe_log_1", drop = FALSE], a_data_avs_dpe_log_1$group) #0.07, assumption met
box_m(a_data_avs_dpe_sq[, "avs_dpe_sq", drop = FALSE], a_data_avs_dpe_sq$group)  #violated
box_m(a_data_avs_dpe_sq_1[, "avs_dpe_sq_1", drop = FALSE], a_data_avs_dpe_sq_1$group) #violated


avs.dpe.aov <- anova_test(
  data = a_data_avs_dpe, dv = avs_dpe, wid = famid,
  between = group, within = task
  )
get_anova_table(avs.dpe.aov) #main effect and interaction

avs.dpe.aov.log1 <- anova_test(
  data = a_data_avs_dpe_log_1, dv = avs_dpe_log_1, wid = famid,
  between = group, within = task
  )
get_anova_table(avs.dpe.aov.log1) #main effects, NO interaction


# effect of group in each task 
main_avs_dpe <- a_data_avs_dpe %>%
  group_by(task) %>%
  anova_test(dv = avs_dpe, wid = famid, between = group) %>%
  get_anova_table() %>%
  adjust_pvalue(method = "holm")
main_avs_dpe 

pwc_avs_dpe <- a_data_avs_dpe %>%
  group_by(task) %>%
  pairwise_t_test(avs_dpe ~ group, p.adjust.method = "holm")
pwc_avs_dpe

a_data_avs_dpe %>%
  group_by(group, task) %>%
  get_summary_stats(avs_dpe, type = "mean_sd")

main_avs_dpe_log1 <- a_data_avs_dpe_log_1 %>%
  group_by(task) %>%
  anova_test(dv = avs_dpe_log_1, wid = famid, between = group) %>%
  get_anova_table() %>%
  adjust_pvalue(method = "holm")
main_avs_dpe 

pwc_avs_dpe_log1 <- a_data_avs_dpe_log_1 %>%
  group_by(task) %>%
  pairwise_t_test(avs_dpe_log_1 ~ group, p.adjust.method = "holm")
pwc_avs_dpe_log1

a_data_avs_dpe_log_1 %>%
  group_by(group, task) %>%
  get_summary_stats(avs_dpe_log_1, type = "mean_sd")

#main effect of task  
main_avs_dpe2 <- a_data_avs_dpe %>%
  group_by(group) %>%
  anova_test(dv = avs_dpe, wid = famid, within = task) %>%
  get_anova_table() %>%
  adjust_pvalue(method = "holm")
main_avs_dpe2

pwc_avs_dpe2 <- a_data_avs_dpe %>%
  group_by(group) %>%
  pairwise_t_test(
    avs_dpe ~ task, paired = TRUE, 
    p.adjust.method = "holm"
    ) %>%
  select(-df, -statistic, -p) # Remove details
pwc_avs_dpe2

main_avs_dpe_log1_2 <- a_data_avs_dpe_log_1 %>%
  group_by(group) %>%
  anova_test(dv = avs_dpe_log_1, wid = famid, within = task) %>%
  get_anova_table() %>%
  adjust_pvalue(method = "holm")
main_avs_dpe_log1_2

pwc_avs_dpe_log1_2 <- a_data_avs_dpe_log_1 %>%
  group_by(group) %>%
  pairwise_t_test(
    avs_dpe_log_1 ~ task, paired = TRUE, 
    p.adjust.method = "holm"
    ) %>%
  select(-df, -statistic, -p) # Remove details
pwc_avs_dpe_log1_2

# Visualization: boxplots with p-values -- honestly not sure if the ** are correct. the F-values don't match up

pwc_avs_dpe <- pwc_avs_dpe %>% add_xy_position(x = "task") 
 bxp.avs.dpe + 
  stat_pvalue_manual(pwc_avs_dpe, tip.length = 0, hide.ns = TRUE) +
  labs(
    subtitle = get_test_label(avs.dpe.aov, detailed = TRUE),
    caption = get_pwc_label(pwc_avs_dpe)
  )

pwc_avs_dpe2 <- pwc_avs_dpe2 %>% add_xy_position(x = "group")
 bxp.avs.dpe.2 + 
  stat_pvalue_manual(pwc_avs_dpe2, tip.length = 0, hide.ns = TRUE) +
  labs(
    subtitle = get_test_label(avs.dpe.aov, detailed = TRUE),
    caption = get_pwc_label(pwc_avs_dpe2)
  )
 
 ##visuals for log.1 transformation
 
bxp.avs.dpe.log1 <- ggboxplot(
  a_data_avs_dpe_log_1, x = "group", y = "avs_dpe_log_1",
  color = "task", palette = "jco"
  )
 
bxp.avs.dpe.log1.2 <- ggboxplot(
  a_data_avs_dpe_log_1, x = "task", y = "avs_dpe_log_1",
  color = "group", palette = "jco"
  )

pwc_avs_dpe_log1 <- pwc_avs_dpe_log1 %>% add_xy_position(x = "task") 
 bxp.avs.dpe.log1 + 
  stat_pvalue_manual(pwc_avs_dpe_log1, tip.length = 0, hide.ns = TRUE) +
  labs(
    subtitle = get_test_label(avs.dpe.aov.log1, detailed = TRUE),
    caption = get_pwc_label(pwc_avs_dpe_log1)
  )

pwc_avs_dpe_log1_2 <- pwc_avs_dpe_log1_2 %>% add_xy_position(x = "group")
 bxp.avs.dpe.log1.2 + 
  stat_pvalue_manual(pwc_avs_dpe_log1_2, tip.length = 0, hide.ns = TRUE) +
  labs(
    subtitle = get_test_label(avs.dpe.aov.log1, detailed = TRUE),
    caption = get_pwc_label(pwc_avs_dpe_log1_2)
  )


```

```{r ANOVA - dys rpm: main effect of task. Some issues with outliers and assumptions with transformed as well}
#names(nona_data)
a_data_dys_rpm <- nona_data %>% 
  select(famid, group, dys_rpm_epi, dys_rpm_psi)

a_data_dys_rpm <- melt(a_data_dys_rpm, 
                   id = c("famid", "group"),
                   measured = c("dys_rpm_epi", "dys_rpm_psi"))
colnames(a_data_dys_rpm) = c("famid", "group", "task", "dys_rpm")
a_data_dys_rpm$group <- as.factor(a_data_dys_rpm$group)
#view(a_data_dys_rpm)

a_data_dys_rpm %>%
  group_by(group, task) %>%
  get_summary_stats(dys_rpm, type = "mean_sd")

 bxp.dys.rpm <- ggboxplot(
  a_data_dys_rpm, x = "group", y = "dys_rpm",
  color = "task", palette = "jco"
  )
 bxp.dys.rpm
  bxp.dys.rpm2 <- ggboxplot(
  a_data_dys_rpm, x = "task", y = "dys_rpm",
  color = "group", palette = "jco"
  )
bxp.dys.rpm2
#Assumptions
##Checking for Outliers
a_data_dys_rpm %>%
 group_by(group, task) %>%
  identify_outliers(dys_rpm) #1 TRUE/TRUE outlier... Non Depressed dys_rpm_psi 103679 

a_data_dys_rpm_noout <- a_data_dys_rpm %>% 
  filter(famid != "103679")

#### trying transformations 
a_data_dys_rpm$dys_rpm_log = log(a_data_dys_rpm$dys_rpm)
a_data_dys_rpm_log <- a_data_dys_rpm %>% 
   select(famid, group, task, dys_rpm_log)
a_data_dys_rpm$dys_rpm_log_1 = log(1 + a_data_dys_rpm$dys_rpm)
a_data_dys_rpm_log_1 <- a_data_dys_rpm %>% 
   select(famid, group, task, dys_rpm_log_1)
a_data_dys_rpm$dys_rpm_sq = sqrt(a_data_dys_rpm$dys_rpm)
a_data_dys_rpm_sq <- a_data_dys_rpm %>% 
  select(famid, group, task, dys_rpm_sq)
a_data_dys_rpm$dys_rpm_sq_1 = sqrt(1 + a_data_dys_rpm$dys_rpm)
a_data_dys_rpm_sq_1 <- a_data_dys_rpm %>% 
  select(famid, group, task, dys_rpm_sq_1)
a_data_dys_rpm <- a_data_dys_rpm %>% 
  select(famid, group, task, dys_rpm)

a_data_dys_rpm %>%
 group_by(group, task) %>%
  identify_outliers(dys_rpm) 
a_data_dys_rpm_log %>%
 group_by(group, task) %>%
  identify_outliers(dys_rpm_log) 
a_data_dys_rpm_log_1 %>%
 group_by(group, task) %>%
  identify_outliers(dys_rpm_log_1) 	##2 outliers. No TRUE/TRUE.
a_data_dys_rpm_sq %>%
 group_by(group, task) %>%
  identify_outliers(dys_rpm_sq) # 3 outliers. No T/T	
a_data_dys_rpm_sq_1 %>%
 group_by(group, task) %>%
  identify_outliers(dys_rpm_sq_1) 


 bxp.dys.rpm
 ggboxplot(
  a_data_dys_rpm_log, x = "group", y = "dys_rpm_log",
  color = "task", palette = "jco"
  )
  ggboxplot(
  a_data_dys_rpm_log_1, x = "group", y = "dys_rpm_log_1",
  color = "task", palette = "jco"
  )
 
  ggboxplot(
  a_data_dys_rpm_sq, x = "group", y = "dys_rpm_sq",
  color = "task", palette = "jco"
  )
  
  ggboxplot(
  a_data_dys_rpm_sq_1, x = "group", y = "dys_rpm_sq_1",
  color = "task", palette = "jco"
  )

##Normality Assumption -- log1 might be the best
a_data_dys_rpm %>%
 group_by(group, task) %>%
shapiro_test(dys_rpm) #
  
ggqqplot(a_data_dys_rpm, "dys_rpm", ggtheme = theme_bw()) +
  facet_grid(task ~ group) # <.05, but mostly all within the shaded area

a_data_dys_rpm_log %>%
 group_by(group, task) %>%
shapiro_test(dys_rpm_log) #

ggqqplot(a_data_dys_rpm_log, "dys_rpm_log", ggtheme = theme_bw()) +
  facet_grid(task ~ group) #Several NAs 

a_data_dys_rpm_log_1 %>%
 group_by(group, task) %>%
shapiro_test(dys_rpm_log_1) #homog met! all >.05

ggqqplot(a_data_dys_rpm_log_1, "dys_rpm_log_1", ggtheme = theme_bw()) +
  facet_grid(task ~ group) #slightly better fit than sq and non-transformed

a_data_dys_rpm_sq %>%
 group_by(group, task) %>%
shapiro_test(dys_rpm_sq) #homog met! all >.05

ggqqplot(a_data_dys_rpm_sq, "dys_rpm_sq", ggtheme = theme_bw()) +
  facet_grid(task ~ group) # 

a_data_dys_rpm_sq_1 %>%
 group_by(group, task) %>%
shapiro_test(dys_rpm_sq_1) 

ggqqplot(a_data_dys_rpm_sq_1, "dys_rpm_sq_1", ggtheme = theme_bw()) +
  facet_grid(task ~ group) # 

##Homogeneity of Variance
a_data_dys_rpm %>%
  group_by(task) %>%
  levene_test(dys_rpm ~ group) #epi p-value >.05 --> homog of var assumption met 

#a_data_dys_rpm_log %>%
 # group_by(task) %>%
  #levene_test(dys_rpm_log ~ group) #too many NAns, won't run
a_data_dys_rpm_log_1 %>%
  group_by(task) %>%
  levene_test(dys_rpm_log_1 ~ group) #all p-values >.05
a_data_dys_rpm_sq %>%
  group_by(task) %>%
  levene_test(dys_rpm_sq ~ group) #all p-values >.05
a_data_dys_rpm_sq_1 %>%
  group_by(task) %>%
  levene_test(dys_rpm_sq_1 ~ group) #all p-values >.05

##Homog of covariance >.001
###Compute Box’s M-test:
box_m(a_data_dys_rpm[, "dys_rpm", drop = FALSE], a_data_dys_rpm$group) #assumption met
box_m(a_data_dys_rpm_log[, "dys_rpm_log", drop = FALSE], a_data_dys_rpm_log$group) #assumption met
box_m(a_data_dys_rpm_log_1[, "dys_rpm_log_1", drop = FALSE], a_data_dys_rpm_log_1$group) #assumption met
box_m(a_data_dys_rpm_sq[, "dys_rpm_sq", drop = FALSE], a_data_dys_rpm_sq$group)  #assumption met
box_m(a_data_dys_rpm_sq_1[, "dys_rpm_sq_1", drop = FALSE], a_data_dys_rpm_sq_1$group)  #assumption met


dys.rpm.aov <- anova_test(
  data = a_data_dys_rpm, dv = dys_rpm, wid = famid,
  between = group, within = task
  )
get_anova_table(dys.rpm.aov)

dys.rpm.aov.noout <- anova_test(
  data = a_data_dys_rpm_noout, dv = dys_rpm, wid = famid,
  between = group, within = task
  )
get_anova_table(dys.rpm.aov)


dys.rpm.aov.log1 <- anova_test(
  data = a_data_dys_rpm_log_1, dv = dys_rpm_log_1, wid = famid,
  between = group, within = task
  )
get_anova_table(dys.rpm.aov.log1)

dys.rpm.aov.sq <- anova_test(
  data = a_data_dys_rpm_sq, dv = dys_rpm_sq, wid = famid,
  between = group, within = task
  )
get_anova_table(dys.rpm.aov.sq)

#MAIN EFFECT OF TASK ONLY for all!
pwc_dys_rpm <- a_data_dys_rpm %>%
  pairwise_t_test(
    dys_rpm ~ task, paired = TRUE, 
    p.adjust.method = "holm"
  )
pwc_dys_rpm

##doing with the sq transformed set also 

pwc_dys_rpm_sq<- a_data_dys_rpm_sq %>%
  pairwise_t_test(
    dys_rpm_sq ~ task, paired = TRUE, 
    p.adjust.method = "holm"
  )

# Visualization
pwc_dys_rpm <- pwc_dys_rpm %>% add_xy_position(x = "task")
 #bxp.dys.rpm + 
  #stat_pvalue_manual(pwc_dys_rpm, tip.length = 0, hide.ns = TRUE) +
  #labs(
   # subtitle = get_test_label(dys.rpm.aov, detailed = TRUE),
    #caption = get_pwc_label(pwc_dys_rpm)
  #) #I'm not certain if the line is in the right place 
 
bxp.dys.rpm2 + 
  stat_pvalue_manual(pwc_dys_rpm, tip.length = 0, hide.ns = TRUE) +
  labs(
    subtitle = get_test_label(dys.rpm.aov, detailed = TRUE),
    caption = get_pwc_label(pwc_dys_rpm) #I DONT KNOW IF THE P-VAL IS CORRECT
  )

pwc_dys_rpm_sq <- pwc_dys_rpm_sq %>% add_xy_position(x = "group") 
bxp.dys.rpm2.sq <- ggboxplot(
  a_data_dys_rpm_sq, x = "task", y = "dys_rpm_sq",
  color = "group", palette = "jco"
  )
bxp.dys.rpm2.sq + 
  stat_pvalue_manual(pwc_dys_rpm_sq, tip.length = 0, hide.ns = TRUE) +
  labs(
    subtitle = get_test_label(dys.rpm.aov.sq, detailed = TRUE),
    caption = get_pwc_label(pwc_dys_rpm_sq)
  )

a_data_dys_rpm_sq %>%
  group_by(group, task) %>%
  get_summary_stats(dys_rpm_sq, type = "mean_sd")

```

```{r ANOVA - dys dpe/duration: no sig effects or intrxns BUT question about outliers and normality}
a_data_dys_dpe <- nona_data %>% 
  select(famid, group, dys_dpe_epi, dys_dpe_psi)

a_data_dys_dpe <- melt(a_data_dys_dpe, 
                   id = c("famid", "group"),
                   measured = c("dys_dpe_epi", "dys_dpe_psi"))
colnames(a_data_dys_dpe) = c("famid", "group", "task", "dys_dpe")
a_data_dys_dpe$group <- as.factor(a_data_dys_dpe$group)
#view(a_data_dys_dpe)

a_data_dys_dpe %>%
  group_by(group, task) %>%
  get_summary_stats(dys_dpe, type = "mean_sd")

 bxp.dys.dpe <- ggboxplot(
  a_data_dys_dpe, x = "group", y = "dys_dpe",
  color = "task", palette = "jco"
  )
 bxp.dys.dpe
  bxp.dys.dpe2 <- ggboxplot(
  a_data_dys_dpe, x = "task", y = "dys_dpe",
  color = "group", palette = "jco"
  )
bxp.dys.dpe2
#Assumptions
##Checking for Outliers
a_data_dys_dpe %>%
 group_by(group, task) %>%
  identify_outliers(dys_dpe) #7 TRUE/TRUE outliers (some in psi and epi)
#no outliers
a_data_dys_dpe_noout <- a_data_dys_dpe %>% 
  filter(!famid%in% c("101425", "100757", "107925", "102133", "108533"))

#### trying transformations 
a_data_dys_dpe$dys_dpe_log = log(a_data_dys_dpe$dys_dpe)
a_data_dys_dpe_log <- a_data_dys_dpe %>% 
   select(famid, group, task, dys_dpe_log)
a_data_dys_dpe$dys_dpe_log_1 = log(1 + a_data_dys_dpe$dys_dpe)
a_data_dys_dpe_log_1 <- a_data_dys_dpe %>% 
   select(famid, group, task, dys_dpe_log_1)
a_data_dys_dpe$dys_dpe_sq = sqrt(a_data_dys_dpe$dys_dpe)
a_data_dys_dpe_sq <- a_data_dys_dpe %>% 
  select(famid, group, task, dys_dpe_sq)
a_data_dys_dpe$dys_dpe_sq_1 = sqrt(1 + a_data_dys_dpe$dys_dpe)
a_data_dys_dpe_sq_1 <- a_data_dys_dpe %>% 
  select(famid, group, task, dys_dpe_sq_1)
a_data_dys_dpe <- a_data_dys_dpe %>% 
  select(famid, group, task, dys_dpe)

a_data_dys_dpe %>%
 group_by(group, task) %>%
  identify_outliers(dys_dpe) 
a_data_dys_dpe_log %>%
 group_by(group, task) %>%
  identify_outliers(dys_dpe_log) #1 T/T outlier. 9 other outliers. 102133	
a_data_dys_dpe_log_1 %>%
 group_by(group, task) %>%
  identify_outliers(dys_dpe_log_1) #1 T/T outlier. 9 other outliers. 102133	
a_data_dys_dpe_sq %>%
 group_by(group, task) %>%
  identify_outliers(dys_dpe_sq) #several outliers	
a_data_dys_dpe_sq_1 %>%
 group_by(group, task) %>%
  identify_outliers(dys_dpe_sq_1) # several outliers	


 ggboxplot(
  a_data_dys_dpe, x = "group", y = "dys_dpe",
  color = "task", palette = "jco"
  )
 ggboxplot(
  a_data_dys_dpe_log, x = "group", y = "dys_dpe_log",
  color = "task", palette = "jco"
  )
  ggboxplot(
  a_data_dys_dpe_log_1, x = "group", y = "dys_dpe_log_1",
  color = "task", palette = "jco"
  )
  ggboxplot(
  a_data_dys_dpe_sq, x = "group", y = "dys_dpe_sq",
  color = "task", palette = "jco"
  )
  
  ggboxplot(
  a_data_dys_dpe_sq_1, x = "group", y = "dys_dpe_sq_1",
  color = "task", palette = "jco"
  )

##Normality Assumption
a_data_dys_dpe %>%
 group_by(group, task) %>%
shapiro_test(dys_dpe) #
  
ggqqplot(a_data_dys_dpe, "dys_dpe", ggtheme = theme_bw()) +
  facet_grid(task ~ group) # all <.05, some of the higher values didn't fall into the shaded area very well 

a_data_dys_dpe_noout %>%
 group_by(group, task) %>%
shapiro_test(dys_dpe) #
  
ggqqplot(a_data_dys_dpe_noout, "dys_dpe", ggtheme = theme_bw()) +
  facet_grid(task ~ group) # 

a_data_dys_dpe_log %>%
 group_by(group, task) %>%
shapiro_test(dys_dpe_log) # two values <.05 but the points fit in the shaded areas a lil better than log1. Nick 

ggqqplot(a_data_dys_dpe_log, "dys_dpe_log", ggtheme = theme_bw()) +
  facet_grid(task ~ group) 

a_data_dys_dpe_log_1 %>%
 group_by(group, task) %>%
shapiro_test(dys_dpe_log_1) #two values <.05 but the log plot shows a slightlyyy better fit I think 

ggqqplot(a_data_dys_dpe_log_1, "dys_dpe_log_1", ggtheme = theme_bw()) +
  facet_grid(task ~ group) # 

a_data_dys_dpe_sq %>%
 group_by(group, task) %>%
shapiro_test(dys_dpe_sq) #all <.05

ggqqplot(a_data_dys_dpe_sq, "dys_dpe_sq", ggtheme = theme_bw()) +
  facet_grid(task ~ group) 

a_data_dys_dpe_sq_1 %>%
 group_by(group, task) %>%
shapiro_test(dys_dpe_sq_1) #all <.05

ggqqplot(a_data_dys_dpe_sq_1, "dys_dpe_sq_1", ggtheme = theme_bw()) +
  facet_grid(task ~ group) 

##Homogeneity of Variance
a_data_dys_dpe %>%
  group_by(task) %>%
  levene_test(dys_dpe ~ group) #epi p-value >.05 --> homog of var assumption met 
a_data_dys_dpe_log %>%
 group_by(task) %>%
levene_test(dys_dpe_log ~ group) #all p-values >.05
a_data_dys_dpe_log_1 %>%
  group_by(task) %>%
  levene_test(dys_dpe_log_1 ~ group) #all p-values >.05
a_data_dys_dpe_sq %>%
  group_by(task) %>%
  levene_test(dys_dpe_sq ~ group) #all p-values >.05
a_data_dys_dpe_sq_1 %>%
  group_by(task) %>%
  levene_test(dys_dpe_sq_1 ~ group) #all p-values >.05

##Homog of covariance >.001
###Compute Box’s M-test:
box_m(a_data_dys_dpe[, "dys_dpe", drop = FALSE], a_data_dys_dpe$group) #assumption violated
box_m(a_data_dys_dpe_log[, "dys_dpe_log", drop = FALSE], a_data_dys_dpe_log$group) #assumption met
box_m(a_data_dys_dpe_log_1[, "dys_dpe_log_1", drop = FALSE], a_data_dys_dpe_log_1$group) #assumption met
box_m(a_data_dys_dpe_sq[, "dys_dpe_sq", drop = FALSE], a_data_dys_dpe_sq$group)  #assumption met
box_m(a_data_dys_dpe_sq_1[, "dys_dpe_sq_1", drop = FALSE], a_data_dys_dpe_sq_1$group)  #assumption met


dys.dpe.aov <- anova_test(
  data = a_data_dys_dpe, dv = dys_dpe, wid = famid,
  between = group, within = task
  )
get_anova_table(dys.dpe.aov)

dys.dpe.aov.log <- anova_test(
  data = a_data_dys_dpe_log, dv = dys_dpe_log, wid = famid,
  between = group, within = task
  )
get_anova_table(dys.dpe.aov.log)

dys.dpe.aov.log.1 <- anova_test(
  data = a_data_dys_dpe_log_1, dv = dys_dpe_log_1, wid = famid,
  between = group, within = task
  )
get_anova_table(dys.dpe.aov.log.1)

#no sig effects or interactions 
```

```{r ANOVA - pos rpm - main effects and interaction}
#names(nona_data)
a_data_pos_rpm <- nona_data %>% 
  select(famid, group, pos_rpm_epi, pos_rpm_psi)

a_data_pos_rpm <- melt(a_data_pos_rpm, 
                   id = c("famid", "group"),
                   measured = c("pos_rpm_epi", "pos_rpm_psi"))
colnames(a_data_pos_rpm) = c("famid", "group", "task", "pos_rpm")
a_data_pos_rpm$group <- as.factor(a_data_pos_rpm$group)
#view(a_data_pos_rpm)

a_data_pos_rpm %>%
  group_by(group, task) %>%
  get_summary_stats(pos_rpm, type = "mean_sd")

 bxp.pos.rpm <- ggboxplot(
  a_data_pos_rpm, x = "group", y = "pos_rpm",
  color = "task", palette = "jco"
  )
 bxp.pos.rpm
  bxp.pos.rpm2 <- ggboxplot(
  a_data_pos_rpm, x = "task", y = "pos_rpm",
  color = "group", palette = "jco"
  )
bxp.pos.rpm2
#Assumptions
##Checking for Outliers
a_data_pos_rpm %>%
 group_by(group, task) %>%
  identify_outliers(pos_rpm) #0 TRUE/TRUE outliers. Only 1 outlier... Non Depressed pos_rpm_epi 104497  

#### trying transformations -- the transformations create ADDITIONAL OUTLIERS. Creating a data set with the 1 outlier removed
a_data_pos_rpm$pos_rpm_log = log(a_data_pos_rpm$pos_rpm)
a_data_pos_rpm_log <- a_data_pos_rpm %>% 
   select(famid, group, task, pos_rpm_log)
a_data_pos_rpm$pos_rpm_log_1 = log(1 + a_data_pos_rpm$pos_rpm)
a_data_pos_rpm_log_1 <- a_data_pos_rpm %>% 
   select(famid, group, task, pos_rpm_log_1)
a_data_pos_rpm$pos_rpm_sq = sqrt(a_data_pos_rpm$pos_rpm)
a_data_pos_rpm_sq <- a_data_pos_rpm %>% 
  select(famid, group, task, pos_rpm_sq)
a_data_pos_rpm$pos_rpm_sq_1 = sqrt(1 + a_data_pos_rpm$pos_rpm)
a_data_pos_rpm_sq_1 <- a_data_pos_rpm %>% 
  select(famid, group, task, pos_rpm_sq_1)
a_data_pos_rpm <- a_data_pos_rpm %>% 
  select(famid, group, task, pos_rpm)

a_data_pos_rpm_noout <- a_data_pos_rpm %>% 
   filter(famid != "104497")

a_data_pos_rpm %>%
 group_by(group, task) %>%
  identify_outliers(pos_rpm) 
a_data_pos_rpm_log %>%
 group_by(group, task) %>%
  identify_outliers(pos_rpm_log) 
a_data_pos_rpm_log_1 %>%
 group_by(group, task) %>%
  identify_outliers(pos_rpm_log_1) 	##2 outliers. No TRUE/TRUE.
a_data_pos_rpm_sq %>%
 group_by(group, task) %>%
  identify_outliers(pos_rpm_sq) # 3 outliers. No T/T	
a_data_pos_rpm_sq_1 %>%
 group_by(group, task) %>%
  identify_outliers(pos_rpm_sq_1) 


a_data_pos_rpm_noout %>%
 group_by(group, task) %>%
  identify_outliers(pos_rpm) #0 outliers!

 bxp.pos.rpm
 ggboxplot(
  a_data_pos_rpm_noout, x = "group", y = "pos_rpm",
  color = "task", palette = "jco"
  )

##Normality Assumption -- normal and no outlier
a_data_pos_rpm %>%
 group_by(group, task) %>%
shapiro_test(pos_rpm) # all >.05 and within shaded area

ggqqplot(a_data_pos_rpm, "pos_rpm", ggtheme = theme_bw()) +
  facet_grid(task ~ group) 

a_data_pos_rpm_noout %>%
 group_by(group, task) %>%
shapiro_test(pos_rpm) # all >.05 and within shaded area
  
ggqqplot(a_data_pos_rpm_noout, "pos_rpm", ggtheme = theme_bw()) +
  facet_grid(task ~ group) 

a_data_pos_rpm_log %>%
 group_by(group, task) %>%
shapiro_test(pos_rpm_log) # <.05 values

ggqqplot(a_data_pos_rpm_log, "pos_rpm_log", ggtheme = theme_bw()) +
  facet_grid(task ~ group) 

a_data_pos_rpm_log_1 %>%
 group_by(group, task) %>%
shapiro_test(pos_rpm_log_1) # <.05 values
  
ggqqplot(a_data_pos_rpm_log_1, "pos_rpm_log_1", ggtheme = theme_bw()) +
  facet_grid(task ~ group) 

a_data_pos_rpm_sq %>%
 group_by(group, task) %>%
shapiro_test(pos_rpm_sq) # some <.05 values

ggqqplot(a_data_pos_rpm_sq, "pos_rpm_sq", ggtheme = theme_bw()) +
  facet_grid(task ~ group) 

a_data_pos_rpm_sq_1 %>%
 group_by(group, task) %>%
shapiro_test(pos_rpm_sq_1) # >.05 values
  
ggqqplot(a_data_pos_rpm_sq_1, "pos_rpm_sq_1", ggtheme = theme_bw()) +
  facet_grid(task ~ group) 

##Homogeneity of Variance
a_data_pos_rpm %>%
  group_by(task) %>%
  levene_test(pos_rpm ~ group) #p-value >.05 --> homog of var assumption met 

a_data_pos_rpm_noout %>%
  group_by(task) %>%
  levene_test(pos_rpm ~ group) #p-value >.05 --> homog of var assumption met 

##Homog of covariance >.001
###Compute Box’s M-test:
box_m(a_data_pos_rpm[, "pos_rpm", drop = FALSE], a_data_pos_rpm$group) #assumption met
box_m(a_data_pos_rpm_noout[, "pos_rpm", drop = FALSE], a_data_pos_rpm_noout$group) #assumption met

pos.rpm.aov <- anova_test(
  data = a_data_pos_rpm, dv = pos_rpm, wid = famid,
  between = group, within = task
  )
get_anova_table(pos.rpm.aov)

pos.rpm.aov.noout <- anova_test(
  data = a_data_pos_rpm_noout, dv = pos_rpm, wid = famid,
  between = group, within = task
  )
get_anova_table(pos.rpm.aov.noout)

#MAIN EFFECTS AND INTERACTION WITH AND WITHOUT OUTLIER 

main_pos_rpm <- a_data_pos_rpm %>%
  group_by(task) %>%
  anova_test(dv = pos_rpm, wid = famid, between = group) %>%
  get_anova_table() %>%
  adjust_pvalue(method = "holm")
main_pos_rpm

pwc_pos_rpm <- a_data_pos_rpm %>%
  group_by(task) %>%
  pairwise_t_test(pos_rpm ~ group, p.adjust.method = "holm", detailed = T)
pwc_pos_rpm 

a_data_pos_rpm %>% #I think this is the main effect of group.. 
  group_by(task) %>%
  get_summary_stats(pos_rpm, type = "mean_sd")

main_pos_rpm_noout <- a_data_pos_rpm_noout %>%
  group_by(task) %>%
  anova_test(dv = pos_rpm, wid = famid, between = group) %>%
  get_anova_table() %>%
  adjust_pvalue(method = "holm")
main_pos_rpm_noout

pwc_rpm_noout <- a_data_pos_rpm_noout %>%
  group_by(task) %>%
  pairwise_t_test(pos_rpm ~ group, p.adjust.method = "holm") #the adjusted p-value is different from the main_pos_rpm 
pwc_rpm_noout

# main effect of task in each group
main_pos_rpm2 <- a_data_pos_rpm %>%
  group_by(group) %>%
  anova_test(dv = pos_rpm, wid = famid, within = task) %>%
  get_anova_table() %>%
  adjust_pvalue(method = "holm")
main_pos_rpm2

pwc_pos_rpm_2 <- a_data_pos_rpm %>%
  group_by(group) %>%
  pairwise_t_test(
    pos_rpm ~ task, paired = TRUE, 
    p.adjust.method = "holm"
    ) %>%
  select(-df, -statistic, -p) # Remove details
pwc_pos_rpm_2 

a_data_pos_rpm %>%
  group_by(group) %>%
  get_summary_stats(pos_rpm, type = "mean_sd")

a_data_pos_rpm_noout %>%
  group_by(group) %>%
  get_summary_stats(pos_rpm, type = "mean_sd")

# Visualization: boxplots with p-values
pwc_pos_rpm <- pwc_pos_rpm %>% add_xy_position(x = "task")
bxp.pos.rpm + 
  stat_pvalue_manual(pwc_pos_rpm, tip.length = 0, hide.ns = TRUE) +
  labs(
    subtitle = get_test_label(pos.rpm.aov, detailed = TRUE),
    caption = get_pwc_label(pwc_pos_rpm)
  )

pwc_pos_rpm_2 <- pwc_pos_rpm_2 %>% add_xy_position(x = "group")
bxp.pos.rpm2 + 
  stat_pvalue_manual(pwc_pos_rpm_2, tip.length = 0, hide.ns = TRUE) +
  labs(
    subtitle = get_test_label(pos.rpm.aov, detailed = TRUE),
    caption = get_pwc_label(pwc_pos_rpm_2)
  )
```

```{r ANOVA - pos dpe - main effect of task}
#names(nona_data)
a_data_pos_dpe <- nona_data %>% 
  select(famid, group, pos_dpe_epi, pos_dpe_psi)

a_data_pos_dpe <- melt(a_data_pos_dpe, 
                   id = c("famid", "group"),
                   measured = c("pos_dpe_epi", "pos_dpe_psi"))
colnames(a_data_pos_dpe) = c("famid", "group", "task", "pos_dpe")
a_data_pos_dpe$group <- as.factor(a_data_pos_dpe$group)
#view(a_data_pos_dpe)

a_data_pos_dpe %>%
  group_by(group, task) %>%
  get_summary_stats(pos_dpe, type = "mean_sd")

 bxp.pos.dpe <- ggboxplot(
  a_data_pos_dpe, x = "group", y = "pos_dpe",
  color = "task", palette = "jco"
  )
 bxp.pos.dpe
  bxp.pos.dpe2 <- ggboxplot(
  a_data_pos_dpe, x = "task", y = "pos_dpe",
  color = "group", palette = "jco"
  )
bxp.pos.dpe2
#Assumptions
##Checking for Outliers
a_data_pos_dpe %>%
 group_by(group, task) %>%
  identify_outliers(pos_dpe) #4 TRUE/TRUE outliers. 9 outliers... Depressed	pos_dpe_epi	102106, Depressed	pos_dpe_epi	102653, Depressed pos_dpe_psi 102106, Non Depressed pos_dpe_epi 103542
# Remove extreme outliers
a_data_pos_dpe_noout <- a_data_pos_dpe %>%
 filter(!famid%in%c("102106", "102653", "103542"))

#### trying transformations 
a_data_pos_dpe$pos_dpe_log = log(a_data_pos_dpe$pos_dpe)
a_data_pos_dpe_log <- a_data_pos_dpe %>% 
   select(famid, group, task, pos_dpe_log)
a_data_pos_dpe$pos_dpe_log_1 = log(1 + a_data_pos_dpe$pos_dpe)
a_data_pos_dpe_log_1 <- a_data_pos_dpe %>% 
   select(famid, group, task, pos_dpe_log_1)
a_data_pos_dpe$pos_dpe_sq = sqrt(a_data_pos_dpe$pos_dpe)
a_data_pos_dpe_sq <- a_data_pos_dpe %>% 
  select(famid, group, task, pos_dpe_sq)
a_data_pos_dpe$pos_dpe_sq_1 = sqrt(1 + a_data_pos_dpe$pos_dpe)
a_data_pos_dpe_sq_1 <- a_data_pos_dpe %>% 
  select(famid, group, task, pos_dpe_sq_1)
a_data_pos_dpe <- a_data_pos_dpe %>% 
  select(famid, group, task, pos_dpe) 

a_data_pos_dpe %>%
 group_by(group, task) %>%
  identify_outliers(pos_dpe) 
a_data_pos_dpe_log %>%
 group_by(group, task) %>%
  identify_outliers(pos_dpe_log) 
a_data_pos_dpe_log_1 %>%
 group_by(group, task) %>%
  identify_outliers(pos_dpe_log_1) 
a_data_pos_dpe_sq %>%
 group_by(group, task) %>%
  identify_outliers(pos_dpe_sq) #6 outliers, 0 T/T
a_data_pos_dpe_sq_1 %>%
 group_by(group, task) %>%
  identify_outliers(pos_dpe_sq_1) 


 bxp.pos.dpe
 ggboxplot(
  a_data_pos_dpe_log, x = "group", y = "pos_dpe_log",
  color = "task", palette = "jco"
  )
  ggboxplot(
  a_data_pos_dpe_log_1, x = "group", y = "pos_dpe_log_1",
  color = "task", palette = "jco"
  )
 
  ggboxplot(
  a_data_pos_dpe_sq, x = "group", y = "pos_dpe_sq",
  color = "task", palette = "jco"
  )
  
  ggboxplot(
  a_data_pos_dpe_sq_1, x = "group", y = "pos_dpe_sq_1",
  color = "task", palette = "jco"
  )

##Normality Assumption
a_data_pos_dpe %>%
 group_by(group, task) %>%
shapiro_test(pos_dpe) #assumption violated
ggqqplot(a_data_pos_dpe, "pos_dpe", ggtheme = theme_bw()) +
  facet_grid(task ~ group) 

a_data_pos_dpe_noout %>%
 group_by(group, task) %>%
shapiro_test(pos_dpe) #one <.05 
ggqqplot(a_data_pos_dpe_noout, "pos_dpe", ggtheme = theme_bw()) +
  facet_grid(task ~ group) 

a_data_pos_dpe_log %>%
 group_by(group, task) %>%
shapiro_test(pos_dpe_log) #all >.05 assumptions met
ggqqplot(a_data_pos_dpe_log, "pos_dpe_log", ggtheme = theme_bw()) +
  facet_grid(task ~ group) 

a_data_pos_dpe_log_1 %>%
 group_by(group, task) %>%
shapiro_test(pos_dpe_log_1) #all >.05 assumptions met
ggqqplot(a_data_pos_dpe_log_1, "pos_dpe_log_1", ggtheme = theme_bw()) +
  facet_grid(task ~ group)  

a_data_pos_dpe_sq %>%
 group_by(group, task) %>%
shapiro_test(pos_dpe_sq) #most values <.05, some plots outside of the shaded area
ggqqplot(a_data_pos_dpe_sq, "pos_dpe_sq", ggtheme = theme_bw()) +
  facet_grid(task ~ group) 

a_data_pos_dpe_sq_1 %>%
 group_by(group, task) %>%
shapiro_test(pos_dpe_sq_1) #most values <.05, some plots outside of the shaded area
ggqqplot(a_data_pos_dpe_sq_1, "pos_dpe_sq_1", ggtheme = theme_bw()) +
  facet_grid(task ~ group) 

##Homogeneity of Variance
a_data_pos_dpe %>%
  group_by(task) %>%
  levene_test(pos_dpe ~ group) #p-value >.05 --> homog of var assumption met 

a_data_pos_dpe_noout %>%
  group_by(task) %>%
  levene_test(pos_dpe ~ group) #p-value >.05 --> homog of var assumption met 

a_data_pos_dpe_log %>%
 group_by(task) %>%
 levene_test(pos_dpe_log ~ group) #p-value >.05 --> homog of var assumption met 
a_data_pos_dpe_log_1 %>%
  group_by(task) %>%
  levene_test(pos_dpe_log_1 ~ group) #p-value >.05 --> homog of var assumption met 
a_data_pos_dpe_sq %>%
  group_by(task) %>%
  levene_test(pos_dpe_sq ~ group) #p-value >.05 --> homog of var assumption met 
a_data_pos_dpe_sq_1 %>%
  group_by(task) %>%
  levene_test(pos_dpe_sq_1 ~ group) #p-value >.05 --> homog of var assumption met 

##Homog of covariance >.001
###Compute Box’s M-test:
box_m(a_data_pos_dpe[, "pos_dpe", drop = FALSE], a_data_pos_dpe$group) #assumption met
box_m(a_data_pos_dpe_noout[, "pos_dpe", drop = FALSE], a_data_pos_dpe_noout$group) #assumption met
box_m(a_data_pos_dpe_log[, "pos_dpe_log", drop = FALSE], a_data_pos_dpe_log$group) #assumption met
box_m(a_data_pos_dpe_log_1[, "pos_dpe_log_1", drop = FALSE], a_data_pos_dpe_log_1$group) #assumption met
box_m(a_data_pos_dpe_sq[, "pos_dpe_sq", drop = FALSE], a_data_pos_dpe_sq$group)  #assumption met
box_m(a_data_pos_dpe_sq_1[, "pos_dpe_sq_1", drop = FALSE], a_data_pos_dpe_sq_1$group) #assumption met


pos.dpe.aov <- anova_test(
  data = a_data_pos_dpe, dv = pos_dpe, wid = famid,
  between = group, within = task
  )
get_anova_table(pos.dpe.aov)

pos.dpe.aov.nooout <- anova_test(
  data = a_data_pos_dpe_noout, dv = pos_dpe, wid = famid,
  between = group, within = task
  )
get_anova_table(pos.dpe.aov.nooout)

pos.dpe.aov.log <- anova_test(
  data = a_data_pos_dpe_log, dv = pos_dpe_log, wid = famid,
  between = group, within = task
  )
get_anova_table(pos.dpe.aov.log)

#Main effect of task 
a_data_pos_dpe %>%
  group_by(group, task) %>%
  get_summary_stats(pos_dpe, type = "mean_sd")

a_data_pos_dpe %>%
  group_by(task) %>%
  get_summary_stats(pos_dpe, type = "mean_sd")
```

#transformed variables also violate the assumptions, some are violated even worse. Therefore used a non-parametric ANOVA. ranking. This needs to be mixed as well though, so figure this out... 
```{r ANOVA - CRPBI}
#names(nona_data) 

a_data_crpbi <- nona_data %>% 
  select(famid, group, crpbic_av_rej, crpbim_av_rej)

a_data_crpbi <- melt(a_data_crpbi, 
                   id = c("famid", "group"),
                   measured = c("crpbic_av_rej", "crpbim_av_rej"))
colnames(a_data_crpbi) = c("famid", "group", "rater", "score")
a_data_crpbi$group <- as.factor(a_data_crpbi$group)
#view(a_data_crpbi)

a_data_crpbi %>%
  group_by(group, rater) %>%
  get_summary_stats(score, type = "mean_sd")

#gmodels::CrossTable(a_data_crpbi$group, a_data_crpbi$rater)

bxp.crpbi <- ggboxplot(
  a_data_crpbi, x = "group", y = "score",
  color = "rater", palette = "jco"
  )
bxp.crpbi2 <- ggboxplot(
  a_data_crpbi, x = "rater", y = "score",
  color = "group", palette = "jco"
  )

#Assumptions
##Checking for Outliers
a_data_crpbi %>%
 group_by(group, rater) %>%
  identify_outliers(score) #4 outliers, no T/T extreme outliers

###Depressed  crpbic_av_rej 100776, Depressed crpbic_av_rej 102639, Non Depressed crpbic_av_rej 108340, Non Depressed crpbim_av_rej 104297
a_data_crpbi_noout <- a_data_crpbi %>% 
   filter(!famid%in%c("100776","102639","108340","104297"))

#LOG AND SQ TRANSFORMATIONS. DOING + 1 BECAUSE LOG OF 0 IS -INF, AND SO IT'S CREATING PROBLEMS
#Creating a new df for each transformed variable 
a_data_crpbi$score_log = log(a_data_crpbi$score)
a_data_crpbi_log <- a_data_crpbi %>% 
   select(famid, group, rater, score_log) #there's 1 -inf value
a_data_crpbi$score_log_1 = log(1 + a_data_crpbi$score)
a_data_crpbi_log_1 <- a_data_crpbi %>% 
   select(famid, group, rater, score_log_1)
a_data_crpbi$score_sq = sqrt(a_data_crpbi$score)
a_data_crpbi_sq <- a_data_crpbi %>% 
  select(famid, group, rater, score_sq)
a_data_crpbi$score_sq_1 = sqrt(1 + a_data_crpbi$score)
a_data_crpbi_sq_1 <- a_data_crpbi %>% 
  select(famid, group, rater, score_sq_1)
a_data_crpbi <- a_data_crpbi %>% 
  select(famid, group, rater, score)

##Identifying outliers with the non-transformed and transformed -- there are several more outliers with the transformed data
a_data_crpbi %>%
 group_by(group, rater) %>%
  identify_outliers(score) 
a_data_crpbi_log %>%
 group_by(group, rater) %>%
  identify_outliers(score_log) 
a_data_crpbi_log_1 %>%
 group_by(group, rater) %>%
  identify_outliers(score_log_1) 	
a_data_crpbi_sq %>%
 group_by(group, rater) %>%
  identify_outliers(score_sq) 
a_data_crpbi_sq_1 %>%
 group_by(group, rater) %>%
  identify_outliers(score_sq_1)	

##Normality Assumption
  
crpbi.aov <- aov (score ~ group * rater, data = a_data_crpbi) 
resid.crpbi <- residuals(crpbi.aov.correct)
hist(resid.crpbi)  #neg skewed
qqnorm(resid.crpbi)
shapiro.test(resid.crpbi) # <.05


crpbi.aov.c.noout <- aov (score ~ group * rater, data = a_data_crpbi_noout) 
resid.crpbi.noout <- residuals(crpbi.aov.c.noout)
hist(resid.crpbi.noout) #neg skewed but less
qqnorm(resid.crpbi.noout)
shapiro.test(resid.crpbi.noout) #<.05

crpbi.aov.log <- aov (score_log ~ group * rater, data = a_data_crpbi_log) #doesn't work because there's a -INF

crpbi.aov.log.1 <- aov (score_log_1 ~ group * rater, data = a_data_crpbi_log_1) 
resid.crpbi.log.1 <- residuals(crpbi.aov.log.1)
hist(resid.crpbi.log.1)
qqnorm(resid.crpbi.log.1)
shapiro.test(resid.crpbi.log.1) #SUPER negatively skewed

crpbi.aov.sq <- aov (score_sq ~ group * rater, data = a_data_crpbi_sq) 
resid.crpbi.sq <- residuals(crpbi.aov.sq)
hist(resid.crpbi.sq)
qqnorm(resid.crpbi.sq)
shapiro.test(resid.crpbi.sq) #SUPER negatively skewed

crpbi.aov.sq.1 <- aov (score_sq_1 ~ group * rater, data = a_data_crpbi_sq_1) 
resid.crpbi.sq.1 <- residuals(crpbi.aov.sq.1)
hist(resid.crpbi.sq.1)
qqnorm(resid.crpbi.sq.1)
shapiro.test(resid.crpbi.sq.1) #SUPER negatively skewed

library(lsr)
library(DescTools)

##Homogeneity of Variance -- assumption violated by all 
#library(DescTools)
LeveneTest(crpbi.aov)
LeveneTest(crpbi.aov.c.noout)
LeveneTest(crpbi.aov.log.1)
LeveneTest(crpbi.aov.sq)
LeveneTest(crpbi.aov.sq.1)

#MAIN EFFECTS OF GROUP AND RATER 


get_anova_table(crpbi.aov) #sig main effects
crpbi.aov<- aov (score ~ group * rater, data = a_data_crpbi) #sig main effects only
summary(crpbi.aov)
TukeyHSD( crpbi.aov) #Using Tukey HSD bc we don't have a planned method of comparisons/hypotheses
TukeyHSD(aov (score ~ group + rater, data = a_data_crpbi)) #ND > D, Mom rated > Child rated

crpbi.aov.c.noout <- aov (score ~ group * rater, data = a_data_crpbi_noout) #sig main effects only
summary(crpbi.aov.c.noout)
TukeyHSD( crpbi.aov.correct ) #Using Tukey HSD bc we don't have a planned method of comparisons/hypotheses
TukeyHSD(aov (score ~ group + rater, data = a_data_crpbi_noout)) #ND > D, Mom rated > Child rated

#TYPE II ANOVA - not sure how to do pairwise comparisons. Sig main effects of group and rater
crpbi.aov.unb <- lm(score ~ group*rater, a_data_crpbi)
crpbi.aov.unb<- Anova(crpbi.aov.unb, type = 2)
crpbi.aov.unb.noout <- lm(score ~ group*rater, a_data_crpbi_noout)
Anova(crpbi.aov.unb.noout, type = 2)




#HAVE NOT DONE ANY OF THE GRAPHING/VISUALIZING YET esp for the Type II-- KAVYA

```


```{r ANOVA - INT SXS - main effects. many violations though}
names(nona_data) 

a_data_int <- nona_data %>% 
  select(famid, group, cbcl_int, yrs_int)

a_data_int <- melt(a_data_int, 
                   id = c("famid", "group"),
                   measured = c("cbcl_int", "yrs_int"))
colnames(a_data_int) = c("famid", "group", "rater", "score")
a_data_int$group <- as.factor(a_data_int$group)
view(a_data_int)

a_data_int %>%
  group_by(group, rater) %>%
  get_summary_stats(score, type = "mean_sd")

#gmodels::CrossTable(a_data_int$group, a_data_int$rater)



#Assumptions
##Checking for Outliers
a_data_int %>%
 group_by(group, rater) %>%
 identify_outliers(score) #6 outliers, no T/T extreme outliers

###Depressed cbcl_int 100640, Depressed cbcl_int 101070, Non Depressed cbcl_int 103338, Non Depressed cbcl_int 105075 , Non Depressed cbcl_int 107011, Non Depressed yrs_int 104237

a_data_int_noout <- a_data_int %>% 
   filter(!famid%in%c("100640","101070","103338","105075", "107011", "104237"))

#LOG AND SQ TRANSFORMATIONS. DOING + 1 BECAUSE LOG OF 0 IS -INF, AND SO IT'S CREATING PROBLEMS
#Creating a new df for each transformed variable 
a_data_int$score_log = log(a_data_int$score)
a_data_int_log <- a_data_int %>% 
   select(famid, group, rater, score_log) #there are many -inf value
a_data_int$score_log_1 = log(1 + a_data_int$score)
a_data_int_log_1 <- a_data_int %>% 
   select(famid, group, rater, score_log_1)
a_data_int$score_sq = sqrt(a_data_int$score)
a_data_int_sq <- a_data_int %>% 
  select(famid, group, rater, score_sq)
a_data_int$score_sq_1 = sqrt(1 + a_data_int$score)
a_data_int_sq_1 <- a_data_int %>% 
  select(famid, group, rater, score_sq_1)
a_data_int <- a_data_int %>% 
  select(famid, group, rater, score)

##Identifying outliers with the non-transformed and transformed 

a_data_int %>%
 group_by(group, rater) %>%
  identify_outliers(score)  #6 outliers, no T/T extreme outliers
a_data_int_log %>%
 group_by(group, rater) %>%
  identify_outliers(score_log) 
a_data_int_log_1 %>%
 group_by(group, rater) %>%
  identify_outliers(score_log_1) 	
a_data_int_sq %>%
 group_by(group, rater) %>%
  identify_outliers(score_sq) 
a_data_int_sq_1 %>%         
 group_by(group, rater) %>%
  identify_outliers(score_sq_1)	#2 outliers. 0 extreme

##Normality Assumption
int.aov <- aov (score ~ group * rater, data = a_data_int) 
resid.int <- residuals(int.aov)
hist(resid.int)  #pos skewed
qqnorm(resid.int)
shapiro.test(resid.int) # <.05

int.aov.noout <- aov (score ~ group * rater, data = a_data_int_noout) 
resid.int.noout <- residuals(int.aov.noout)
hist(resid.int.noout) #pos skewed 
qqnorm(resid.int.noout)
shapiro.test(resid.int.noout) #<.05

int.aov.log <- aov (score_log ~ group * rater, data = a_data_int_log) #doesn't work because there's a -INF

int.aov.log.1 <- aov (score_log_1 ~ group * rater, data = a_data_int_log_1) 
resid.int.log.1 <- residuals(int.aov.log.1)
hist(resid.int.log.1)
qqnorm(resid.int.log.1)
shapiro.test(resid.int.log.1) #sort of negatively skewed?

int.aov.sq <- aov (score_sq ~ group * rater, data = a_data_int_sq) 
resid.int.sq <- residuals(int.aov.sq)
hist(resid.int.sq)
qqnorm(resid.int.sq)
shapiro.test(resid.int.sq) #almost normal

int.aov.sq.1 <- aov (score_sq_1 ~ group * rater, data = a_data_int_sq_1) 
resid.int.sq.1 <- residuals(int.aov.sq.1)
hist(resid.int.sq.1)
qqnorm(resid.int.sq.1)
shapiro.test(resid.int.sq.1) #normally distributed

library(lsr)
library(DescTools)

##Homogeneity of Variance -- assumption violated by all 
#library(DescTools)
LeveneTest(int.aov) # violated
LeveneTest(int.aov.noout) # violated
LeveneTest(int.aov.log.1) #assumption met
LeveneTest(int.aov.sq) #assumption met
LeveneTest(int.aov.sq.1) #assumption met

#MAIN EFFECTS OF GROUP AND RATER 


int.aov<- aov (score ~ group * rater, data = a_data_int) #sig main effects only
summary(int.aov)
TukeyHSD(int.aov) #Using Tukey HSD bc we don't have a planned method of comparisons/hypotheses
TukeyHSD(aov (score ~ group + rater, data = a_data_int)) #ND < D, Mom rated < Child rated

int.aov.noout <- aov (score ~ group * rater, data = a_data_int_noout) #sig main effects only
summary(int.aov.noout)
TukeyHSD(int.aov.noout) #Using Tukey HSD bc we don't have a planned method of comparisons/hypotheses
TukeyHSD(aov (score ~ group + rater, data = a_data_int_noout)) #ND < D, Mom rated < Child rated

summary(int.aov.sq.1) #sig main effects only
TukeyHSD(int.aov.sq.1) #Using Tukey HSD bc we don't have a planned method of comparisons/hypotheses
TukeyHSD(aov (score_sq_1 ~ group + rater, data = a_data_int_sq_1)) #ND < D, Mom rated < Child rated

#doing TYPE II for unbalanced - not sure how to do pairwise comparisons. Sig main effects of group and rater
int.aov.unb <- lm(score ~ group*rater, a_data_int)
int.aov.unb<- Anova(int.aov.unb, type = 2)
int.aov.unb
int.aov.unb.noout <- lm(score ~ group*rater, a_data_crpbi_noout)
Anova(int.aov.unb.noout, type = 2)
int.aov.unb.sq1 <- lm(score_sq_1 ~ group*rater, a_data_int_sq_1)
Anova(int.aov.unb.sq1, type = 2)

#HAVE NOT DONE ANY OF THE GRAPHING/VISUALIZING YET -- KAVYA
```

```{r ANOVA - EXT SXS - main effect of rater, and interaction. Still some violations. Check assumptions}
#names(nona_data) 
#I followed this http://www.sthda.com/english/wiki/two-way-anova-test-in-r#interpret-the-results

a_data_ext <- nona_data %>% 
  select(famid, group, cbcl_ext, yrs_ext)

a_data_ext <- melt(a_data_ext, 
                   id = c("famid", "group"),
                   measured = c("cbcl_ext", "yrs_ext"))
colnames(a_data_ext) = c("famid", "group", "rater", "score")
a_data_ext$group <- as.factor(a_data_ext$group)
#view(a_data_ext)

a_data_ext %>%
  group_by(group, rater) %>%
  get_summary_stats(score, type = "mean_sd")

#gmodels::CrossTable(a_data_ext$group, a_data_ext$rater)

#Assumptions
##Checking for Outliers
a_data_ext %>%
 group_by(group, rater) %>%
 identify_outliers(score) #13 outliers, 3 T/T extreme outliers

###Depressed  yrs_ext  101752, Non Depressed cbcl_ext 103338, Non Depressed cbcl_ext 10701

a_data_ext_noout <- a_data_ext %>% 
   filter(!famid%in%c("101752","103338","10701"))

#LOG AND SQ TRANSFORMATIONS. DOING + 1 BECAUSE LOG OF 0 IS -INF, AND SO IT'S CREATING PROBLEMS
#Creating a new df for each transformed variable 
a_data_ext$score_log = log(a_data_ext$score)
a_data_ext_log <- a_data_ext %>% 
   select(famid, group, rater, score_log) #there are many -inf value
a_data_ext$score_log_1 = log(1 + a_data_ext$score)
a_data_ext_log_1 <- a_data_ext %>% 
   select(famid, group, rater, score_log_1)
a_data_ext$score_sq = sqrt(a_data_ext$score)
a_data_ext_sq <- a_data_ext %>% 
  select(famid, group, rater, score_sq)
a_data_ext$score_sq_1 = sqrt(1 + a_data_ext$score)
a_data_ext_sq_1 <- a_data_ext %>% 
  select(famid, group, rater, score_sq_1)
a_data_ext <- a_data_ext %>% 
  select(famid, group, rater, score)

##Identifying outliers with the non-transformed and transformed 

a_data_ext %>%
 group_by(group, rater) %>%
  identify_outliers(score)
a_data_ext_log %>%
 group_by(group, rater) %>%
  identify_outliers(score_log) #lots of -inf
a_data_ext_log_1 %>%
 group_by(group, rater) %>%
  identify_outliers(score_log_1) 	#3 outliers, 0 extremes
a_data_ext_sq %>%
 group_by(group, rater) %>%
  identify_outliers(score_sq) #4 outliers, 0 extremes
a_data_ext_sq_1 %>%         
 group_by(group, rater) %>%
  identify_outliers(score_sq_1)	#6 outliers. 0 extreme

##Normality Assumption
ext.aov <- aov (score ~ group * rater, data = a_data_ext) 
resid.ext <- residuals(ext.aov)
hist(resid.ext)  #pos skewed
qqnorm(resid.ext)
shapiro.test(resid.ext) # <.05

ext.aov.noout <- aov (score ~ group * rater, data = a_data_ext_noout) 
resid.ext.noout <- residuals(ext.aov.noout)
hist(resid.ext.noout) #pos skewed 
qqnorm(resid.ext.noout)
shapiro.test(resid.ext.noout) #<.05

ext.aov.log <- aov (score_log ~ group * rater, data = a_data_ext_log) #doesn't work because there's a -INF

ext.aov.log.1 <- aov (score_log_1 ~ group * rater, data = a_data_ext_log_1) 
resid.ext.log.1 <- residuals(ext.aov.log.1)
hist(resid.ext.log.1) #looks normal, maybe a little positive. Ask Nick about this one. 
qqnorm(resid.ext.log.1)
shapiro.test(resid.ext.log.1) #<.05

ext.aov.sq <- aov (score_sq ~ group * rater, data = a_data_ext_sq) 
summary(ext.aov.sq)
a_data_ext_sq %>% anova_test(score_sq ~ group * rater)
resid.ext.sq <- residuals(ext.aov.sq)
hist(resid.ext.sq)
qqnorm(resid.ext.sq)
shapiro.test(resid.ext.sq) #> .05, normal 

ext.aov.sq.1 <- aov (score_sq_1 ~ group * rater, data = a_data_ext_sq_1) 
resid.ext.sq.1 <- residuals(ext.aov.sq.1)
hist(resid.ext.sq.1)
qqnorm(resid.ext.sq.1)
shapiro.test(resid.ext.sq.1) #<.05, positively skewed

library(lsr)
library(DescTools)

##Homogeneity of Variance -- assumption violated by all 
#library(DescTools)
LeveneTest(ext.aov) # violated
LeveneTest(ext.aov.noout) # violated
LeveneTest(ext.aov.log.1) #violated
LeveneTest(ext.aov.sq) #assumption met
LeveneTest(ext.aov.sq.1) #assumption met

#MAIN EFFECTS OF GROUP AND RATER 
##Nick -- are we ok with Tukey, or do we want to do pairwise with Holms? Also do I need to be doing unbalanced design for all of these? I do think so. 

summary(ext.aov) #main effect of group + interaction
TukeyHSD(ext.aov) # D > N, DC < DM, NC < DM
TukeyHSD(aov (score ~ group + rater, data = a_data_ext)) 
ggboxplot(a_data_ext, x = "group", y = "score", color = "rater",
          palette = c("#00AFBB", "#E7B800"))


summary(ext.aov.noout) #main effect of group + interaction
TukeyHSD(ext.aov.noout)
TukeyHSD(aov (score ~ group + rater, data = a_data_ext_noout)) 
TukeyHSD(aov (score ~ group + rater, data = a_data_ext_noout)) 
ggboxplot(a_data_ext_noout, x = "group", y = "score", color = "rater",
          palette = c("#00AFBB", "#E7B800"))

summary(ext.aov.log.1) #main effect of group + interaction
TukeyHSD(ext.aov.log.1) 
TukeyHSD(aov (score_log_1 ~ group + rater, data = a_data_ext_log_1))
ggboxplot(a_data_ext_log_1, x = "group", y = "score_log_1", color = "rater",
          palette = c("#00AFBB", "#E7B800"))

summary(ext.aov.sq) #main effect of group + interaction
TukeyHSD(ext.aov.sq) 
TukeyHSD(aov (score_sq ~ group + rater, data = a_data_ext_sq)) 
ggboxplot(a_data_ext_sq, x = "group", y = "score_sq", color = "rater",
          palette = c("#00AFBB", "#E7B800"))

#doing TYPE II for unbalanced - not sure how to do pairwise comparisons. Sig main effects of group and rater
ext.aov.unb <- lm(score ~ group*rater, a_data_ext)
ext.aov.unb<- Anova(ext.aov.unb, type = 2)
ext.aov.unb
ext.aov.unb.noout <- lm(score ~ group*rater, a_data_ext_noout)
Anova(ext.aov.unb.noout, type = 2)
ext.aov.unb.log.1 <- lm(score_log_1 ~ group*rater, a_data_ext_log_1)
Anova(ext.aov.unb.log.1, type = 2)
ext.aov.unb.sq <- lm(score_sq ~ group*rater, a_data_ext_sq)
Anova(ext.aov.unb.sq, type = 2)

#MADE VISUALS BUT NO ** LINES YET
```


```{r Hypothesis 1: Dep Status & Prop of Neg Attribution}
install.packages("pscl")
library(pscl)
#data <- data %>%
 # mutate(att_neg_win_integer = (100*(data$att_neg_win))) %>% 
  #mutate(att_neg_win98_integer = (100*(data$att_neg_win98))) %>% 
  #mutate(att_neg_integer = (100*(data$att_neg))) %>% 
  #mutate(chi_beh_control_integer = (100*data$chi_beh_control))
#data$att_neg_integer <- as.integer(data$att_neg_integer)
#data$chi_beh_control_integer <- as.integer(data$chi_beh_control_integer)

nona_data <- nona_data %>%
  #mutate(att_neg_win_integer = (100*(nona_data$att_neg_win))) %>% 
  #mutate(att_neg_win98_integer = (100*(nona_data$att_neg_win98))) %>% 
  mutate(att_neg_integer = (100*(nona_data$att_neg))) %>% 
  mutate(chi_beh_control_integer = (100*nona_data$chi_beh_control))
nona_data$att_neg_integer <- as.integer(nona_data$att_neg_integer)
nona_data$chi_beh_control_integer <- as.integer(nona_data$chi_beh_control_integer)
#nona_data$att_neg_win98_integer <- as.integer(nona_data$att_neg_win98_integer)

nona_data <- nona_data %>% 
  mutate(group = fct_relevel(group, c("Non Depressed", "Depressed")))




#Not controlling for child behavior
zeromodel_neg_att <- zeroinfl(att_neg_integer ~ group, nona_data) #raw data 
summary(zeromodel_neg_att)
#summary(zeroinfl(att_neg_integer ~ group, nona_data, dist = "poisson", link = "logit")) same as above model
nona_data$group <- as.factor(nona_data$group)

#zeromodel_neg_att_98 <- zeroinfl(att_neg_win98_integer ~ group, nona_data) #98 winsorized - but not using because the list-wise deleted data set removed the outliers. 
#zeromodel_neg_att_98
#summary(zeromodel_neg_att_98) same results as raw data


#Figures for Prop of Neg Att 
nona_data$group_fac <- as.factor(nona_data$group)
nona_data$group[nona_data$group == '1'] <- 'Non Depressed'
nona_data$group[nona_data$group == '2'] <- 'Depressed'
newdata1 <- data.frame(group = unique(nona_data$group))
colnames(newdata1) <- c("group")
newdata1$phat <- predict(zeromodel_neg_att, newdata1, se = TRUE)
yhat <- predict(zeromodel_neg_att, newdata1, se.fit=TRUE, MC=2500, conf = .95) #trying to get CI. not working

newdata1 <- newdata1 %>% 
  mutate(sd_neg = sd(phat), # calculates the standard deviation of each group
            n_neg = n())    # calculates the sample size per group

ggplot(newdata1, aes(x = group, y = phat)) +
  geom_point() + 
  geom_line() +
  #geom_errorbar(aes(ymin = phat - sd_neg, ymax = phat + sd_neg), width = .1) + #I NEED TO CALCULATE 95% CI!!!
  # geom_errorbar(aes(ymin = phat - (1.96*(sd_neg/sqrt(n_neg))), ymax = phat + (1.96*(sd_neg/sqrt(n_neg))), width = .1)) + correct 95%CI?
    geom_col(fill   = "black",
             colour = "white",
             alpha  = .7,
             width  = .5) +
    # set theme
    theme_apa() +
    # add labels 
 labs(title    = "Average proportion of negative attributions by maternal depression status",
         x        = "Depression Status",
         y        = "Negative Attributions (%)")


#Steps to obtain CI
dput(coef(zeromodel_neg_att, "count")) #intercept coefficients
dput(coef(zeromodel_neg_att, "zero")) #intercept coefficients


f <- function(nona_data, i) {
  require(pscl)
  m <- zeroinfl(zeromodel_neg_att ~ group, nona_data[i, ],
    start = list(count = c(2.6982, -0.2586), zero = c(-1.5115, -1.1578)))
  as.vector(t(do.call(rbind, coef(summary(m)))[, 1:2]))
}

set.seed(10)
res <- boot::boot(nona_data, f, R = 1200, parallel = "snow", ncpus = 4)
f
## print results
res

## basic parameter estimates with percentile and bias adjusted CIs
parms <- t(sapply(c(1, 3, 5, 7), function(i) {
  out <- boot::boot.ci(res, index = c(i, i + 1), type = c("perc", "bca"))
  with(out, c(Est = t0, pLL = percent[4], pUL = percent[5],
     bcaLL = bca[4], bcaLL = bca[5]))
}))

## add row names
row.names(parms) <- names(coef(zeromodel_neg_att))
## print results
parms

## compare with normal based approximation
confint(zeromodel_neg_att) #these CI ranges are a bit smaller than the above. Still not certain how to graph these though because the models are separate



## load boot package
require(boot)
## output coefficients from your original model
## these can be used as starting values for your bootstrap model
## to help speed up convergence and the bootstrap
dput(round(coef(zeromodel_neg_att_98, "count"), 3))
dput(round(coef(zeromodel_neg_att_98, "zero"), 3))

## function to pass to the boot function to fit your model
## needs to take data, an index (as the second argument!) and your new data
f <- function(data, i, newdata) {
  require(pscl)
  m <- zeroinfl(att_neg_win98_integer ~ group, nona_data[i, ], 
                start = list(count = c(2.698, -0.259), zero = c(1.511, 1.158)))
  mparams <- as.vector(t(do.call(rbind, coef(summary(m)))[, 1:2]))
  yhat <- predict(m, newdata, type = "response")
  return(c(mparams, yhat))    
}

## set the seed and do the bootstrap, make sure to set your number of cpus
## note this requires a fairly recent version of R
set.seed(10)
res <- boot(nona_data, f, R = 1200, parallel = "snow", ncpus = 4)

## get the bootstrapped percentile CIs
## the 10 here is because in my initial example, there were 10 parameters before predicted values
yhat <- t(sapply(10 + (1:nrow(Predict)), function(i) {
  out <- boot.ci(res, index = i, type = c("perc"))
  with(out, c(Est = t0, pLL = percent[4], pUL = percent[5]))
}))

## merge CIs with predicted values
Predict<- cbind(Predict, yhat)


#yarrr::pirateplot(
 #formula = att_neg_wins ~ group, 
  #data = nona_data,
  #ylab = "Negative Attributions",
  #theme = 1, pal = "google")


#Zero Inflated Poisson Model controlling for adolescent behavior 4/23/20

nona_data <- nona_data %>% 
  mutate(group = fct_relevel(group, c("Non Depressed", "Depressed")))

zeromodel_neg_att_1 <- zeroinfl(att_neg_integer ~ chi_beh_control + group, nona_data) 
summary(zeromodel_neg_att_1)

coef(zeromodel_neg_att_1) %>% 
  exp()


nona_data <- nona_data %>% 
  mutate(group = fct_relevel(group, c("Depressed", "Non Depressed")))

zeromodel_neg_att_1 <- zeroinfl(att_neg_integer ~ chi_beh_control + group, nona_data) 
summary(zeromodel_neg_att_1)

coef(zeromodel_neg_att_1) %>% 
  exp()

#Figure for proportion of negative attribution, controlling for child behavior
nona_data$group <- as.factor(nona_data$group)
newdata2 <- data.frame(group = unique(nona_data$group), chi_beh_control = mean(nona_data$chi_beh_control))
newdata2$phat <- predict(zeromodel_neg_att_1, newdata2)

newdata2 <- newdata2 %>% 
  mutate(sd_neg = sd(phat), # calculates the standard deviation of each group
            n_neg = n())    # calculates the sample size per group
  # the canvas
neg_att_plot <- ggplot(newdata2, aes(x = group, y = phat)) +
  geom_point() + #bar graph 
  geom_line() +
 geom_errorbar(aes(ymin = phat - sd_neg, ymax = phat + sd_neg), width = .1) + #I NEED TO CALCULATE 95% CI!!!
  labs(x = "Depression Status", y = "Predicted Neg Proportions") + #percentages +
  geom_col(fill   = "black",
             colour = "white",
             alpha  = .75,
             width  = .5) +
    # set theme
    theme_apa() +
    # add labels 
    labs(subtitle    = "Average proportion of negative attributions by maternal depression status",
         title = "Figure 2",
         x        = "Maternal Depression Status",
         y        = "Negative Attributions (%)")

neg_att_plot

rio::export(neg_att_plot, "~/neg_ZIP_plot", )
newdata2$phat 
newdata1$phat

dput(coef(m1, "count"))
#yarrr::pirateplot(
 # formula = att_neg_integer ~ group + chi_beh_control, 
 # data = nona_data,
 #ylab = "Negative Attributions",
  #theme = 1, pal = "google")
```
Because we were interested in examining the influence of maternal depression on their attributions without influence of adolescent behavior, we also entered into each model an overall indicant of the relative level of adolescent negative and positive behavior displayed during the interaction. This method and ratio was utilized in the group's previous studies as well (*Sheeber 2009*). This value was calculated by taking the ratio of the proportion of adolescent aggressive to the proportion of facilitative behaviors displayed during the PSI and EPI. "As parents are more likely to make negative attributions for negative than for positive child behaviors (and vice versa; Johnston & Freeman, 1997), the inclusion of this ratio variable controlled for the potential confounding influence of adolescent behavior in our examination of the association between parental attributions and parental behavior."

A zero-inflated poisson regression was run to examine whether mothers in the depressed group and non-depressed groups differed in the proportion of negative attributions they made of their adolescent’s behavior. These data demonstrated that a large number of the mothers did not make negative attributions during the VMR task, so the frequency of 0s were very large in this data set. Due to this distribution of the data, a zero-inflated poisson regression was implemented. 

Among mothers who displayed negative attributions, having depression significantly increased the likelihood of negative attributions by 126% (p<.001) when child behavior is held constant.

Being depressed decreased the odds of zero negative attributions by 33% (p <.01), when controlling for child behavior.

Figure *insert fancy R code for figure number* displays that when controlling for child behaviors, depressed mothers made significantly higher proportions of negative attributions than non-depressed mothers did. As demonstrated by a one-way ANOVA, the proportion of positive attributions did not differ between the groups when child behaviors were controlled for (p = 0.241 *insert statistic using fancy r*).

```{r ZOIB: negative attributions}
nona_data$group <- as.factor(nona_data$group)
lattice::histogram(nona_data$att_neg) #0 inflated
#install.packages("rjags")
#install.packages("zoib")
library(rjags)
library(zoib)
set.seed(123)
zoib1 <- zoib(att_neg ~ group|1|group , nona_data, n.response = 1, joint = FALSE, zero.inflation = TRUE, one.inflation = FALSE, random = 0, EUID = 1:nrow(nona_data), n.iter = 5000, n.burn =200, n.thin = 2) 
sample1<- zoib1$coeff
#check convergence of the MCMC chains
traceplot(sample1); autocorr.plot(sample1); gelman.diag(sample1)
summary(zoib1)
summary(sample1)
set.seed(123)
zoib2 <- zoib(att_neg ~ group + chi_beh_control|1|group+chi_beh_control, nona_data, n.response = 1, joint = FALSE, zero.inflation = T, one.inflation = FALSE, random = 0, EUID = 1:nrow(nona_data), n.iter = 5000, n.burn =200, n.thin = 2) 
sample2<- zoib2$coeff
#check convergence of the MCMC chains
traceplot(sample2); autocorr.plot(sample2); gelman.diag(sample2)
summary(zoib2)
summary(sample2)
 

```


```{r Hypothesis 1: Depression and Positive Attributions}
#ANOVA for positive attributions 
nona_data <- nona_data %>% 
mutate(att_pos_integer = (100*(nona_data$att_pos)))
#view(nona_data$att_pos_integer) 
nona_data$att_pos_integer <- as.integer(nona_data$att_pos_integer)


model_pos_att <- aov(att_pos ~ group, data = nona_data)
summary(model_pos_att)
model_pos_att_int <- aov(att_pos_integer ~ group, data = nona_data)
summary(model_pos_att_int) #slighlty different than the above because the variables are getting rounded down to the integer value. Keep it this way so that it's more standard with the integers used in the negative attributions

posCI <- confint(model_pos_att, level = .95)
#pos_avg

#ANOVA for positive attributions, controlling for adolescent behavior 
model_pos_att_con <- aov(att_pos ~ chi_beh_control + group, data = nona_data) 
model_pos_att_con_int <- aov(att_pos_integer ~ chi_beh_control + group, data = nona_data) 

summary(model_pos_att_con)
pos_descriptives <- nona_data %>%
  # select just the scale scores
  select(group, att_pos, att_neg, chi_beh_control) %>% 
  group_by(group) %>% 
  #
  summarize(
    Mean = mean(att_pos), 
    Median = median(att_pos), 
    SD = sd(att_pos), 
    Min = min(att_pos),
    Max = max(att_pos)
  )
pos_descriptives

summary(model_pos_att_con_int)


    #why are these confidence intervals coming out NEGATIVE? stats consulting
    posCI_con <- confint(model_pos_att_con, level = .95)
    str(posCI)

    ci1 <- confint(model_pos_att_con, level = 0.95)[1, ] 
    est1 <- data.frame(est = coef(model_pos_att_con)[1],
                       lb = ci1[1],
                       ub = ci1[2], 
                       model = "Depressed_pos")         
    
    ci2 <- confint(model_pos_att_con, level = 0.95)[2, ] 
    est2 <- data.frame(est = coef(model_pos_att_con)[2],
                       lb = ci2[1],
                       ub = ci2[2], 
                       model = "Non Depressed_pos")         
    est <- rbind(est1, est2)   #combine with estimates from first model

      ggplot(est, aes(x = model, y = est)) +
      geom_errorbar(aes(ymin = lb, ymax = ub), width = .1) +
        # the geometric elements
        geom_col(fill   = "turquoise",
                 colour = "white",
                 alpha  = .7,
                 width  = .5) +
        # set theme
        theme_bw() +
        # add labels 
        labs(title    = "Average proportion of positive attributions by maternal depression status",
             subtitle = "Controlling for Adolescent Behavior",
             x        = "Depression Status",
             y        = "Positive Attributions")
      
      ggplot(est, aes(x = model, y = est)) +
      geom_errorbar(aes(ymin = lb, ymax = ub), width = .1) +
        # the geometric elements
        geom_col(fill   = "turquoise",
                 colour = "white",
                 alpha  = .7,
                 width  = .5) +
        # set theme
        theme_bw() +
        # add labels 
        labs(title    = "Average proportion of positive attributions by maternal depression status controlling for children's behavior",
             subtitle = "Controlling for Adolescent Behavior",
             x        = "Depression Status",
             y        = "Positive Attributions")

nona_data %>%
  # get mean height by sex
  group_by(group) %>%
  summarise(pos_avg = mean(att_pos),
            sd_pos = sd(att_pos), # calculates the standard deviation of each group
            n_pos = n()) %>%   # calculates the sample size per group
  # the canvas
  ggplot(aes(x = group, y = pos_avg)) +
  geom_errorbar(aes(ymin = pos_avg - (1.96*(sd_pos/sqrt(n_pos))), ymax = pos_avg + (1.96*(sd_pos/sqrt(n_pos)))), width = .1) +
    # the geometric elements
    geom_col(fill   = "turquoise",
             colour = "white",
             alpha  = .7,
             width  = .5) +
    # set theme
    theme_bw() +
    # add labels 
    labs(title    = "Average proportion of positive attributions by maternal depression status",
         x        = "Depression Status",
         y        = "Positive Attributions")


#nona_data_ci <- nona_data %>% 
 # mutate(pos_avg = mean(att_pos, na.rm = T),
  #          sd_pos = sd(att_pos), # calculates the standard deviation of each group
   #         n_pos = n())
#nona_data_ci %>% 
 # (pos_avg - (1.96*(sd_pos/sqrt(n_pos))))

```

```{r Hypothesis 1: Dep Status & Prop of Neg - not using!, eval=FALSE, include=FALSE}
#Using the imputed datasets, and pool
fit <- with(imp1, zeroinfl(att_neg_integer ~ group)) #, link = "logit")) #using integer #unable to pool, and I don't think there are p-values shown
?zeroinfl
?with
#fit 
#summary(pool(fit)) #UNABLE TO POOL IT

nona_data2$att_neg_integer <- as.integer(nona_data2$att_neg_integer)
zeromodel_neg_att_wins2 <- zeroinfl(att_neg_integer ~ group, nona_data2) 
summary(zeromodel_neg_att_wins2)
yarrr::pirateplot(
  formula = att_neg_wins ~ group, 
  data = nona_data,
  ylab = "Negative Attributions",
  theme = 1, pal = "google")

nona_data3$att_neg_integer <- as.integer(nona_data3$att_neg_integer)
zeromodel_neg_att_wins3 <- zeroinfl(att_neg_integer ~ group, nona_data3) 
summary(zeromodel_neg_att_wins3)
yarrr::pirateplot(
  formula = att_neg_wins ~ group, 
  data = nona_data,
  ylab = "Negative Attributions",
  theme = 1, pal = "google")

nona_data4$att_neg_integer <- as.integer(nona_data4$att_neg_integer)
zeromodel_neg_att_wins4 <- zeroinfl(att_neg_integer ~ group, nona_data4) 
summary(zeromodel_neg_att_wins4)
yarrr::pirateplot(
  formula = att_neg_wins ~ group, 
  data = nona_data,
  ylab = "Negative Attributions",
  theme = 1, pal = "google")

nona_data5$att_neg_integer <- as.integer(nona_data5$att_neg_integer)
zeromodel_neg_att_wins5 <- zeroinfl(att_neg_integer ~ group, nona_data5) 
summary(zeromodel_neg_att_wins5)
yarrr::pirateplot(
  formula = att_neg_wins ~ group, 
  data = nona_data,
  ylab = "Negative Attributions",
  theme = 1, pal = "google")

##doing analyses as anova WITHOUT winsorized neg att
aovmod_neg_att_2 <- oneway.test(att_neg ~ group, data = nona_data2, var.equal = F)
aovmod_neg_att_2 
yarrr::pirateplot(
  formula = att_neg ~ group, 
  data = nona_data2,
  ylab = "Negative Attributions",
  theme = 1, pal = "google")

aovmod_neg_att_3 <- oneway.test(att_neg ~ group, data = nona_data3, var.equal = F)
aovmod_neg_att_3
yarrr::pirateplot(
  formula = att_neg ~ group, 
  data = nona_data3,
  ylab = "Negative Attributions",
  theme = 1, pal = "google")

aovmod_neg_att_4 <- oneway.test(att_neg ~ group, data = nona_data4, var.equal = F)
aovmod_neg_att_4
yarrr::pirateplot(
  formula = att_neg ~ group, 
  data = nona_data4,
  ylab = "Negative Attributions",
  theme = 1, pal = "google")

aovmod_neg_att_5 <- oneway.test(att_neg ~ group, data = nona_data5, var.equal = F)
aovmod_neg_att_5
yarrr::pirateplot(
  formula = att_neg ~ group, 
  data = nona_data5,
  ylab = "Negative Attributions",
  theme = 1, pal = "google")
##zero inflated poisson model. this is no longer an anova test --> update pre-reg? I AM NOT ABLE TO RUN THIS MODEL TO THEN CHECK RESIDUALS BECAUSE THERE ARE NA/MISSING VALUES 


#Zero Inflated Poisson Model controlling for adolescent behavior 4/23/20
nona_data2$att_neg_integer <- as.integer(nona_data2$att_neg_integer)
zeromodel_neg_att_wins2 <- zeroinfl(att_neg_integer ~ group + chi_beh_control, nona_data2) 
summary(zeromodel_neg_att_wins2)
yarrr::pirateplot(
  formula = att_neg_wins ~ group + chi_beh_control, 
  data = nona_data2,
  ylab = "Negative Attributions",
  theme = 1, pal = "google")

nona_data3$att_neg_integer <- as.integer(nona_data3$att_neg_integer)
zeromodel_neg_att_wins3 <- zeroinfl(att_neg_integer ~ group + chi_beh_control, nona_data3) 
summary(zeromodel_neg_att_wins3)
yarrr::pirateplot(
  formula = att_neg_wins ~ group + chi_beh_control, 
  data = nona_data3,
  ylab = "Negative Attributions",
  theme = 1, pal = "google")

nona_data4$att_neg_integer <- as.integer(nona_data4$att_neg_integer)
zeromodel_neg_att_wins4 <- zeroinfl(att_neg_integer ~ group + chi_beh_control, nona_data4) 
summary(zeromodel_neg_att_wins4)
yarrr::pirateplot(
  formula = att_neg_wins ~ group + chi_beh_control, 
  data = nona_data4,
  ylab = "Negative Attributions",
  theme = 1, pal = "google")

nona_data5$att_neg_integer <- as.integer(nona_data5$att_neg_integer)
zeromodel_neg_att_wins5 <- zeroinfl(att_neg_integer ~ group + chi_beh_control, nona_data5) 
summary(zeromodel_neg_att_wins5)
yarrr::pirateplot(
  formula = att_neg_wins ~ group + chi_beh_control, 
  data = nona_data5,
  ylab = "Negative Attributions",
  theme = 1, pal = "google")

model_posprop <- with(impute, aov(att_pos ~ group))
#pool(model_posprop) #unable to pool with an anova -- "estimates are unbalanced" 
#pool.scalar(model_posprop)

model_posprop_lm <- with(impute, lm(att_pos ~ group))
pool(model_posprop_lm)
summary(pool(model_posprop_lm)) #not significant p-value .22

#knitr::knit_exit() 
```


#MEDIATION -- When it's time to run my MEDIATION analyses and pool, follow this 
Questions
Determining my covariates?
Using child behavior ratio as a covariate for mediational model predicting maternal behavior 
```{r}
#install.packages("mediation")
library(mediation)

#CHANGE APPROPRIATE VARIABLES TO NUMERIC

nona_data$group <- as.character(nona_data$group)
nona_data$group[nona_data$group == 'Non Depressed'] <- '0'
nona_data$group[nona_data$group == 'Depressed'] <- '1'

nona_data$famid <- as.factor(nona_data$famid)
nona_data$group <- as.numeric(nona_data$group)
#1 = depressed 0 = non-depressed

#average the EPI and PSI variables --> Won't actually be using these for the final results 6/1/20
nona_data <- nona_data %>% 
  mutate(avs_rpm = ((avs_rpm_epi+avs_rpm_psi)/2),
         avs_pd = ((avs_pd_epi+avs_pd_psi)/2),
         avs_dp = ((avs_dpe_epi+avs_dpe_psi)/2),
         dys_rpm = ((dys_rpm_epi+dys_rpm_psi)/2),
         dys_pd = ((dys_pd_epi+dys_pd_psi)/2),
         dys_dpe = ((dys_dpe_epi+dys_dpe_psi)/2),
         pos_rpm = ((pos_rpm_epi+pos_rpm_psi)/2),
         pos_pd = ((pos_pd_epi+pos_pd_psi)/2),
         pos_dpe = ((pos_dpe_epi+pos_dpe_psi)/2)) 


#write.csv(nona_data, file = "lavaanhelp.csv")

```

"The mediate function gives us our Average Causal Mediation Effects (ACME), our Average Direct Effects (ADE), our combined indirect and direct effects (Total Effect), and the ratio of these estimates (Prop. Mediated). The ACME here is the indirect effect of M (total effect - direct effect) and thus this value tells us if our mediation effect is significant.

In this case, our fitMed model again shows a signifcant affect of coffee consumption on the relationship between hours since dawn and feelings of wakefulness, (ACME = .28, p < .001) with no direct effect of hours since dawn (ADE = -0.11, p = .27) and significant total effect (p < .05).

We can then bootstrap this comparison to verify this result in fitMedBoot and again find a significant mediation effect (ACME = .28, p < .001) and no direct effect of hours since dawn (ADE = -0.11, p = .27). However, with increased power, this analysis no longer shows a significant total effect (p = .08)"

>>Sensitivity analyses are essential to examine the robustness of empirical findings to the possible existences of an unmeasured confounder

>>Goal of sensitivity analyses = obtain info on when a confounding vaiable effect would be large enough to reducted the mediated effect to 0. 


A series of mediational analyses were run to test whether mothers' negative attributions mediated associations between maternal depression and parenting behaviors, adolescent internalizing behaviors, and adolescent externalizing behaviors separately. Parenting behaviors were measured by self-report measures, child-reported measures, and observed behaviors during EPI and PSI (i.e., aggression, dysphoria, positive). The bootstrapping procedure with 1000 bootstrap resamples was used for each of these analyses.

The bootstrapped models show a partial mediation between maternal depression and the rate of aggressive parenting behaviors per minute aversive parenting behavior during EPI (ACME = -0.04, p <.05, ADE = -0.123, p <.05), and a complete mediation effect during the PSI (ACME = -0.117, p <.01). The models showed significant direct effects between maternal depression and the duration of aggressive parenting at each of the events during EPI and PSI, but no sigificant mediational effects (ACME = -0.149, p=.25, ADE = -0.99, p <.02 ; ACME= -0.83, p = 0.1, ADE= -4.58, p < .00001).


# Mediational DV = PARENTING BEHAVIORS
```{r Mediation CRPBIM}
#T = group, X= covariates? chi_beh_control, M = att_neg, Y = crpbim

library(mediation)
?glm
library(gvlma)
med_fit_crpbim_na <- glm(att_neg ~ group + chi_beh_control, data = nona_data)
gvlma(lm(att_neg ~ group, data = nona_data))
summary(lm(att_neg ~ group, data = nona_data))
summary(lm(crpbim_av_rej ~ group + chi_beh_control, data = nona_data)) #IV on DV - sig. may not matter though
summary(med_fit_crpbim_na) #IV and M relationship is significant. Good, it needs to be. 
out_fit_crpbim_na <- lm(crpbim_av_rej ~ att_neg + group + chi_beh_control, data = nona_data) 
gvlma(out_fit_crpbim_na)
summary(out_fit_crpbim_na)
set.seed(567)
med_out_crpbim_na <- mediate(med_fit_crpbim_na, out_fit_crpbim_na, boot = TRUE, boot.ci = "bca", treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_crpbim_na)

sens_out_crpbim_na <- medsens(med_out_crpbim_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption? #not workung well with so only doub ubdrect
summary(sens_out_crpbim_na)
plot(sens_out_crpbim_na)

#lavaan

library(lavaan)

crpbim_model = '
att_neg ~ a*group + chi_beh_control 
crpbim_av_rej ~ c*group + chi_beh_control + b*att_neg

direct := c
 
#indirect effect
indirect := a*b

#total effect
total := c + (a*b)
'

set.seed(567)
model_crpbim = sem(crpbim_model, data=nona_data, se="bootstrap", test= "bootstrap", bootstrap=1000) 
summary(model_crpbim, rsq=T) 
parameterestimates(model_crpbim, boot.ci.type = "bca.simple", standardized = TRUE) %>% 
  knitr::kable()
#kutils::semTable(model_crpbim)

```


```{r Mediation CRPBIM table, results= 'asis'}
crpbim_table <- parameterestimates(model_crpbim, boot.ci.type = "bca.simple", standardized = TRUE)
crpbim_table <- crpbim_table[c(1,3,5,11:13),]
crpbim_table
knitr::kable(crpbim_table)
rio::export(crpbim_table, "~/crpbim_table.csv")
#papaja::apa_table(crpbim_table)

?sem

#results match up with those from mediation package
```


The mediate function gives us our Average Causal Mediation Effects (ACME), our Average Direct Effects (ADE), our combined indirect and direct effects (Total Effect), and the ratio of these estimates (Prop. Mediated). There is a significant effect of negative attributions on the relationship between maternal depression and (mother reported) negative (accepting v rejecting) parental behaviors, when controlling for adolescent aggression + positive behaviors, (ACME = .68, p<.05). Additionally there are significant direct effects of maternal depression on (ADE = 2.33, p<.05) and a significant total effect (p<.001).

>> Rho at which ACME = 0: -0.9. Rho would have to be -.9 for the true mediated effect to be 0

```{r trying to plot something for the mediation effect}
library(MBESS)
mediation.effect.plot(nona_data$group, nona_data$att_neg, nona_data$crpbim_av_rej, #not sure how to control for variables
                      ylab = "Dependent Variable", 
                      xlab = "Mediator", 
                      main = "Mediation Effect Plot", 
                      pct.from.top.a = 0.05, 
                      pct.from.left.c = 0.05, 
                      arrow.length.a = 0.05, 
                      arrow.length.c = 0.05, 
                      legend.loc = "topleft", 
                      pch = 20,
                      xlim = NULL, 
                      ylim = NULL, 
                      save.pdf = FALSE, 
                      save.eps = FALSE, 
                      save.jpg = FALSE)

?mediation.effect.bar.plot

sens_out_crpbim <- medsens(med_out_crpbim, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_crpbim)
plot(med_out_crpbim)
```

```{r Mediation CRPBIC}
#T = group, X= covariates?, M = att_neg, Y = crpbic   

#using listwise deleted data 
summary(lm(crpbic_av_rej ~ group + chi_beh_control, data = nona_data)) #IV on DV - sig. may not matter though
med_fit_crpbic_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
summary(med_fit_crpbic_na)
out_fit_crpbic_na <- lm(crpbic_av_rej ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
summary(out_fit_crpbic_na)
set.seed(567)
med_out_crpbic_na <- mediate(med_fit_crpbic_na, out_fit_crpbic_na, boot = TRUE, treat = "group", boot.ci = "bca", mediator = "att_neg", sims = 1000)
summary(med_out_crpbic_na)
plot(med_out_crpbic_na)

sens_out_crpbic_na <- medsens(med_out_crpbic_na, rho.by = 0.1, effect.type = "both", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_crpbic_na)
plot(sens_out_crpbic_na)


crpbic_model = '
att_neg ~ a*group + chi_beh_control 
crpbic_av_rej ~ c*group + chi_beh_control + b*att_neg
direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

set.seed(567)
model_crpbic = sem(crpbic_model, data=nona_data, se="bootstrap", test="bootstrap", bootstrap=1000) 
summary(model_crpbic, rsq=T) 
parameterestimates(model_crpbic, boot.ci.type = "bca.simple", standardized = TRUE) %>% 
  knitr::kable()
crpbic_table <- parameterestimates(model_crpbic, boot.ci.type = "bca.simple", standardized = TRUE)
crpbic_table <- crpbic_table[c(1,3,5,11:13),]
crpbic_table

varTable(model_crpbic)

```


>>Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct           -2.585    1.418   -1.823    0.068
    indirect         -0.909    0.492   -1.849    0.064 --> NOT SIG
    total            -3.494    1.465   -2.385    0.017

>> Rho at which ACME = 0: -0.2. Rho would have to be -.2 for the true mediated effect to be 0

There is a significant effect of negative attributions on the relationship between maternal depression and (child reported) negative (accepting v rejecting) parenting behaviors, when controlling for adolescent aggression + positive behaviors, (ACME = .68, p<.05). There is not a significant direct effect of maternal depression on (ADE = 2.58, p>.05) negative parenting behavior and a significant total effect (p<.04).

*Maybe look at how correlated those two measures as*

```{r}
cor.test(nona_data$crpbim_av_rej, nona_data$crpbic_av_rej)
#.36 
#pval <.001
```


```{r Mediation avs_rpm_epi}
#T = group, X= covariates?, M = att_neg, Y = avs_rpm_epi
summary(lm(avs_rpm_epi ~ group + chi_beh_control, data = nona_data)) #IV on DV - sig. may not matter though
med_fit_avs_rpm_epi_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
summary(med_fit_avs_rpm_epi_na)
out_fit_avs_rpm_epi_na <- lm(avs_rpm_epi ~ group + chi_beh_control + att_neg, data = nona_data) #,family = ??) 
summary(out_fit_avs_rpm_epi_na)

set.seed(567)
med_out_avs_rpm_epi_na <- mediate(med_fit_avs_rpm_epi_na, out_fit_avs_rpm_epi_na, boot = F, boot.ci.type = "bca", treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_avs_rpm_epi_na)

set.seed(6942)
med_out_avs_rpm_epi_na <- mediate(med_fit_avs_rpm_epi_na, out_fit_avs_rpm_epi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_avs_rpm_epi_na)

set.seed(20)
med_out_avs_rpm_epi_na <- mediate(med_fit_avs_rpm_epi_na, out_fit_avs_rpm_epi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_avs_rpm_epi_na)

set.seed(819)
med_out_avs_rpm_epi_na <- mediate(med_fit_avs_rpm_epi_na, out_fit_avs_rpm_epi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_avs_rpm_epi_na)

set.seed(200)
med_out_avs_rpm_epi_na <- mediate(med_fit_avs_rpm_epi_na, out_fit_avs_rpm_epi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_avs_rpm_epi_na)



sens_out_avs_rpm_epi_na <- medsens(med_out_avs_rpm_epi_na, rho.by = 0.1, effect.type = "both", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_rpm_epi_na)

plot(med_out_avs_rpm_epi_na)


#### using lavaan

nona_data %>% 
  dplyr::select(group, chi_beh_control, att_neg, avs_rpm_epi) %>% 
  pairs.panels(scale = FALSE, pch = ".")

library(lavaan)

sem_model = '
att_neg ~ a*group + chi_beh_control 
avs_rpm_epi ~ c*group + chi_beh_control + b*att_neg
 

direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

set.seed(567)
model_sem = sem(sem_model, data=nona_data, test= "bootstrap", bootstrap=1000) 
summary(model_sem, rsq=T) 
parameterestimates(model_sem, boot.ci.type = "bca.simple", standardized = TRUE) %>% 
  knitr::kable()
```


*setting boot to FALSE for mediation package*
Causal Mediation Analysis 

Quasi-Bayesian Confidence Intervals

               Estimate 95% CI Lower 95% CI Upper p-value   
ACME            0.03793      0.00886         0.08   0.008 **
ADE             0.12215      0.01296         0.24   0.028 * 
Total Effect    0.16009      0.05288         0.27   0.002 **
Prop. Mediated  0.22654      0.05082         0.79   0.010 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1


Regressions:
                   Estimate  Std.Err  z-value  P(>|z|)
  att_neg ~                                           
    group      (a)    0.049    0.016    3.077    0.002
    ch_bh_cntr        0.019    0.008    2.290    0.022
  avs_rpm_epi ~                                       
    group      (c)    0.123    0.054    2.279    0.023
    ch_bh_cntr        0.021    0.027    0.801    0.423
    att_neg    (b)    0.788    0.305    2.580    0.010

Variances:
                   Estimate  Std.Err  z-value  P(>|z|)
   .att_neg           0.009    0.001    7.657    0.000
   .avs_rpm_epi       0.111    0.016    6.921    0.000

R-Square:
                   Estimate
    att_neg           0.159
    avs_rpm_epi       0.130

Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct            0.123    0.054    2.278    0.023*
    indirect          0.038    0.020    1.892    0.059
    total             0.161    0.057    2.844    0.004*
    
    
all of the parameter estimates match up and path value estimates, EXCEPT FOR the p-value of the indirect effect. Not sure if this is related to  "lavaan can still estimate the model with binary or ordinal variables, there just is no way to produce the proper indirect effect, at least not without a lot more effort."

*TRYING MEDIATION package witH 5000 BOOTSTRAP DRAWS*
Causal Mediation Analysis 

Nonparametric Bootstrap Confidence Intervals with the Percentile Method

               Estimate 95% CI Lower 95% CI Upper p-value   
ACME            0.03825      0.00417         0.09  0.0140 * 
ADE             0.12293      0.02162         0.23  0.0144 * 
Total Effect    0.16118      0.05422         0.27  0.0036 **
Prop. Mediated  0.23730      0.02854         0.66  0.0176 * 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Sample Size Used: 163 

Simulations: 5000 

*LAVAAN PACKAGE WITH 5000 SIMULATIONS*

lavaan 0.6-5 ended normally after 27 iterations

  Estimator                                         ML
  Optimization method                           NLMINB
  Number of free parameters                          7
                                                      
  Number of observations                           163
                                                      
Model Test User Model:
                                                      
  Test statistic                                 0.000
  Degrees of freedom                                 0
                                                      
  Test statistic                                 0.000
  Degrees of freedom                                 0

Parameter Estimates:

  Standard errors                            Bootstrap
  Number of requested bootstrap draws             5000
  Number of successful bootstrap draws            5000

Regressions:
                   Estimate  Std.Err  z-value  P(>|z|)
  att_neg ~                                           
    group      (a)    0.049    0.016    3.091    0.002
    ch_bh_cntr        0.019    0.008    2.383    0.017
  avs_rpm_epi ~                                       
    group      (c)    0.123    0.054    2.278    0.023
    ch_bh_cntr        0.021    0.027    0.800    0.424
    att_neg    (b)    0.788    0.308    2.563    0.010

Variances:
                   Estimate  Std.Err  z-value  P(>|z|)
   .att_neg           0.009    0.001    7.645    0.000
   .avs_rpm_epi       0.111    0.016    6.755    0.000

R-Square:
                   Estimate
    att_neg           0.159
    avs_rpm_epi       0.130

Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct            0.123    0.054    2.278    0.023
    indirect          0.038    0.021    1.852    0.064
    total             0.161    0.056    2.870    0.004

*LAVAAN PACKAGE WITH 1000 SIMULATIONS without SE = bootstrap*

  Estimator                                         ML
  Optimization method                           NLMINB
  Number of free parameters                          7
                                                      
  Number of observations                           163
                                                      
Model Test User Model:
                                                      
  Test statistic                                 0.000
  Degrees of freedom                                 0
                                                      
  Test statistic                                 0.000
  Degrees of freedom                                 0

Parameter Estimates:

  Information                                 Expected
  Information saturated (h1) model          Structured
  Standard errors                             Standard

Regressions:
                   Estimate  Std.Err  z-value  P(>|z|)
  att_neg ~                                           
    group      (a)    0.049    0.015    3.242    0.001
    ch_bh_cntr        0.019    0.005    4.165    0.000
  avs_rpm_epi ~                                       
    group      (c)    0.123    0.054    2.268    0.023
    ch_bh_cntr        0.021    0.017    1.280    0.201
    att_neg    (b)    0.788    0.275    2.867    0.004

Variances:
                   Estimate  Std.Err  z-value  P(>|z|)
   .att_neg           0.009    0.001    9.028    0.000
   .avs_rpm_epi       0.111    0.012    9.028    0.000

R-Square:
                   Estimate
    att_neg           0.159
    avs_rpm_epi       0.130

Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct            0.123    0.054    2.268    0.023
    indirect          0.038    0.018    2.148    0.032
    total             0.161    0.054    2.993    0.003
    
    
*LAVAAN PACKAGE WITH 5000 SIMULATIONS without SE = bootstrap*


Estimator                                         ML
  Optimization method                           NLMINB
  Number of free parameters                          7
                                                      
  Number of observations                           163
                                                      
Model Test User Model:
                                                      
  Test statistic                                 0.000
  Degrees of freedom                                 0
                                                      
  Test statistic                                 0.000
  Degrees of freedom                                 0

Parameter Estimates:

  Information                                 Expected
  Information saturated (h1) model          Structured
  Standard errors                             Standard

Regressions:
                   Estimate  Std.Err  z-value  P(>|z|)
  att_neg ~                                           
    group      (a)    0.049    0.015    3.242    0.001
    ch_bh_cntr        0.019    0.005    4.165    0.000
  avs_rpm_epi ~                                       
    group      (c)    0.123    0.054    2.268    0.023
    ch_bh_cntr        0.021    0.017    1.280    0.201
    att_neg    (b)    0.788    0.275    2.867    0.004

Variances:
                   Estimate  Std.Err  z-value  P(>|z|)
   .att_neg           0.009    0.001    9.028    0.000
   .avs_rpm_epi       0.111    0.012    9.028    0.000

R-Square:
                   Estimate
    att_neg           0.159
    avs_rpm_epi       0.130

Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct            0.123    0.054    2.268    0.023
    indirect          0.038    0.018    2.148    0.032
    total             0.161    0.054    2.993    0.003

lavaan 0.6-5 ended normally after 27 iterations

  Estimator                                         ML
  Optimization method                           NLMINB
  Number of free parameters                          7
                                                      
  Number of observations                           163
                                                      
Model Test User Model:
                                                      
  Test statistic                                 0.000
  Degrees of freedom                                 0
                                                      
  Test statistic                                 0.000
  Degrees of freedom                                 0

Parameter Estimates:

  Information                                 Expected
  Information saturated (h1) model          Structured
  Standard errors                             Standard

Regressions:
                   Estimate  Std.Err  z-value  P(>|z|)
  att_neg ~                                           
    group      (a)    0.049    0.015    3.242    0.001
    ch_bh_cntr        0.019    0.005    4.165    0.000
  avs_rpm_epi ~                                       
    group      (c)    0.123    0.054    2.268    0.023
    ch_bh_cntr        0.021    0.017    1.280    0.201
    att_neg    (b)    0.788    0.275    2.867    0.004

Variances:
                   Estimate  Std.Err  z-value  P(>|z|)
   .att_neg           0.009    0.001    9.028    0.000
   .avs_rpm_epi       0.111    0.012    9.028    0.000

R-Square:
                   Estimate
    att_neg           0.159
    avs_rpm_epi       0.130

Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct            0.123    0.054    2.268    0.023
    indirect          0.038    0.018    2.148    0.032
    total             0.161    0.054    2.993    0.003


```{r AVS RPM with NEG EPI}
#"epi_vmr_att_neg", "psi_vmr_att_neg"

#### using lavaan

nona_data %>% 
  dplyr::select(group, chi_beh_control, epi_vmr_att_neg, psi_vmr_att_neg, avs_rpm_epi) %>% 
  pairs.panels(scale = FALSE, pch = ".")

library(lavaan)

sem_model_epi = '
epi_vmr_att_neg ~ a*group + chi_beh_control 
avs_rpm_epi ~ c*group + chi_beh_control + b*epi_vmr_att_neg
 

direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

set.seed(567)
model_sem_epi = sem(sem_model_epi, data=nona_data, se = "bootstrap", test= "bootstrap", bootstrap=1000) 
summary(model_sem_epi, rsq=T) 

#library(kutils)
#semTable(model_sem_epi, file = NULL, paramSets = "all", paramSetLabels,
#columns = c(est = "Estimate", se = "SE", z = "z", p = "p"),
#columnLabels, fits = c("chisq", "cfi", "tli", "rmsea"),
#fitLabels = toupper(fits), varLabels = NULL, groups = NULL,
#type = "latex", table.float = FALSE, caption = NULL,
#label = NULL, longtable = FALSE, print.results = TRUE,
#centering = "siunitx", alpha = c(0.05, 0.01, 0.001))

#%>% knitr::kable()
?sem
```

    ----

```{r avs rpm epi table}
avs_epi_table <- parameterestimates(model_sem_epi, boot.ci.type = "bca.simple", standardized = TRUE) 
avs_epi_table <- avs_epi_table[c(1,3,5,11:13),]
avs_epi_table

```



```{r Mediation avs_dpe_epi}
#T = group, X= covariates?, M = att_neg, Y = avs_dpe_epi
summary(lm(avs_dpe_epi ~ group + chi_beh_control, data = nona_data)) #IV on DV - sig. may not matter though
med_fit_avs_dpe_epi_na <- lm(att_neg ~ group + chi_beh_control,  data = nona_data)
summary(med_fit_avs_dpe_epi_na)
out_fit_avs_dpe_epi_na <- lm(avs_dpe_epi ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
summary(out_fit_avs_dpe_epi_na)
set.seed(567)
med_out_avs_dpe_epi_na <- mediate(med_fit_avs_dpe_epi_na, out_fit_avs_dpe_epi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_avs_dpe_epi_na)
set.seed(567)
med_out_avs_dpe_epi_na_noboot <- mediate(med_fit_avs_dpe_epi_na, out_fit_avs_dpe_epi_na, boot = F, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_avs_dpe_epi_na_noboot)
set.seed(567)
med_out_avs_dpe_epi_na_bca <- mediate(med_fit_avs_dpe_epi_na, out_fit_avs_dpe_epi_na, boot = T, boot.ci = "bca", treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_avs_dpe_epi_na_bca)
set.seed(567)
med_out_avs_dpe_epi_na_noboot_bca <- mediate(med_fit_avs_dpe_epi_na, out_fit_avs_dpe_epi_na, boot = F, boot.ci = "bca", treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_avs_dpe_epi_na_noboot_bca)


sens_out_avs_dpe_epi_na <- medsens(med_out_avs_dpe_epi_na, rho.by = 0.1, effect.type = "direct", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_dpe_epi_na)
plot(med_out_avs_dpe_epi_na)


sem_avs_dpe_epi = '
att_neg ~ a*group + chi_beh_control 
avs_dpe_epi ~ c*group + chi_beh_control + b*att_neg
 
#direct
direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

set.seed(567)
model_sem_avs_dpe_epi = sem(sem_avs_dpe_epi, data=nona_data, se='bootstrap', test='bootstrap', bootstrap=1000)
summary(model_sem_avs_dpe_epi, rsq=T) 
parameterestimates(model_sem_avs_dpe_epi, boot.ci.type = "bca.simple", standardized = TRUE) %>% 
  knitr::kable()
set.seed(567)
#model_sem_avs_dpe_epi_noboot = sem(sem_avs_dpe_epi, data=nona_data, bootstrap=1000)
#summary(model_sem_avs_dpe_epi_noboot, rsq=T) 
#parameterestimates(model_sem_avs_dpe_epi_noboot, boot.ci.type = "perc", standardized = TRUE) %>% 
#  knitr::kable()
#set.seed(567)
#model_sem_avs_dpe_epi_boot_bca = sem(sem_avs_dpe_epi, data=nona_data, se= "bootstrap", test = "bootstrap", bootstrap=1000)
#summary(model_sem_avs_dpe_epi_boot_bca, rsq=T) 
#parameterestimates(model_sem_avs_dpe_epi_boot_bca, boot.ci.type = "bca.simple", standardized = TRUE) %>% 
#  knitr::kable()
#set.seed(567)
#model_sem_avs_dpe_epi_boot_noboot_bca = sem(sem_avs_dpe_epi, data=nona_data, test = "bootstrap", bootstrap=1000)
#summary(model_sem_avs_dpe_epi_boot_noboot_bca, rsq=T) 
#parameterestimates(model_sem_avs_dpe_epi_boot_noboot_bca, boot.ci.type = "bca.simple", standardized = TRUE) %>% 
 # knitr::kable()


```

Regressions:
                   Estimate  Std.Err  z-value  P(>|z|)
  att_neg ~                                           
    group      (a)    0.049    0.016    3.120    0.002
    ch_bh_cntr        0.019    0.008    2.314    0.021
  avs_dpe_epi ~                                       
    group      (c)    0.992    0.437    2.270    0.023
    ch_bh_cntr        0.125    0.246    0.509    0.611
    att_neg    (b)    3.062    2.308    1.327    0.184

Variances:
                   Estimate  Std.Err  z-value  P(>|z|)
   .att_neg           0.009    0.001    7.553    0.000
   .avs_dpe_epi       7.360    1.021    7.212    0.000

R-Square:
                   Estimate
    att_neg           0.159
    avs_dpe_epi       0.068

Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct            0.992    0.442    2.246    0.025*
    indirect          0.149    0.122    1.215    0.224
    total             1.141    0.446    2.560    0.010*

```{r Mediation avs_rpm_psi}
#T = group, X= covariates?, M = att_neg, Y = avs_rpm_psi

summary(lm(avs_rpm_psi ~ group + chi_beh_control, data = nona_data)) #IV on DV - S. may not matter though
med_fit_avs_rpm_psi_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
summary(med_fit_avs_rpm_psi_na)
out_fit_avs_rpm_psi_na <- lm(avs_rpm_psi ~ att_neg + group + chi_beh_control, data = nona_data) 
summary(out_fit_avs_rpm_psi_na)
set.seed(567)
med_out_avs_rpm_psi_na <- mediate(med_fit_avs_rpm_psi_na, out_fit_avs_rpm_psi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_avs_rpm_psi_na)

sens_out_avs_rpm_psi_na <- medsens(med_out_avs_rpm_psi_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_rpm_psi_na)
plot(med_out_avs_rpm_psi_na)


#Lavaan

sem_avs_rpm_psi = '
att_neg ~ a*group + chi_beh_control 
avs_rpm_psi ~ c*group + chi_beh_control + b*att_neg
 
direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

 

set.seed(567)
model_sem_avs_rpm_psi = sem(sem_avs_rpm_psi, data=nona_data, se="bootstrap", test="bootstrap", bootstrap=1000) 
summary(model_sem_avs_rpm_psi, rsq=T)
parameterestimates(model_sem_avs_rpm_psi, boot.ci.type = "bca.simple", standardized = TRUE)
 

```
Regressions:
                   Estimate  Std.Err  z-value  P(>|z|)
  att_neg ~                                           
    group      (a)    0.049    0.016    3.017    0.003
    ch_bh_cntr        0.019    0.008    2.406    0.016
  avs_rpm_psi ~                                       
    group      (c)    0.120    0.095    1.265    0.206
    ch_bh_cntr       -0.037    0.032   -1.137    0.255
    att_neg    (b)    2.407    0.600    4.014    0.000

Variances:
                   Estimate  Std.Err  z-value  P(>|z|)
   .att_neg           0.009    0.001    7.600    0.000
   .avs_rpm_psi       0.315    0.043    7.373    0.000

R-Square:
                   Estimate
    att_neg           0.159
    avs_rpm_psi       0.175

Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct            0.120    0.095    1.264    0.206
    indirect          0.117    0.046    2.550    0.011*
    total             0.237    0.097    2.452    0.014*

```{r correlation epi & psi}
corr <- nona_data %>% select(psi_vmr_att_neg, epi_vmr_att_neg)
cor(corr, use="everything")
cor.test(nona_data$psi_vmr_att_neg, nona_data$epi_vmr_att_neg)

cor.test(x, y, method=c("pearson", "kendall", "spearman"))

?cor
nona_data %>% cor(psi_vmr_att_neg, epi_vmr_att_neg)
cor(nona_data$psi_vmr_att_neg, nona_data$epi_vmr_att_neg)
```


```{r AVS RPM PSI with NEG PSI}

#Lavaan
sem_avs_rpm_psi = '
psi_vmr_att_neg ~ a*group + chi_beh_control 
avs_rpm_psi ~ c*group + chi_beh_control + b*psi_vmr_att_neg
 
direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

 

set.seed(567)
model_sem_avs_rpm_psi = sem(sem_avs_rpm_psi, data=nona_data, se="bootstrap", test="bootstrap", bootstrap=1000) 
summary(model_sem_avs_rpm_psi, rsq=T)
#parameterestimates(model_sem_avs_rpm_psi, boot.ci.type = "bca.simple", standardized = TRUE)
 
```

```{r avs rpm psi table}
avs_psi_table <- parameterestimates(model_sem_avs_rpm_psi, boot.ci.type = "bca.simple", standardized = TRUE) 
avs_psi_table <- avs_psi_table[c(1,3,5,11:13),]
avs_psi_table
```

```{r Mediation avs_dpe_psi}
#T = group, X= covariates?, M = att_neg, Y = avs_dpe_psi

summary(lm(avs_dpe_psi ~ group + chi_beh_control, data = nona_data)) #IV on DV - S. may not matter though
med_fit_avs_dpe_psi_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
summary(med_fit_avs_dpe_psi_na)
out_fit_avs_dpe_psi_na <- lm(avs_dpe_psi ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
summary(out_fit_avs_dpe_psi_na)
set.seed(567)
med_out_avs_dpe_psi_na <- mediate(med_fit_avs_dpe_psi_na, out_fit_avs_dpe_psi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_avs_dpe_psi_na)

sens_out_avs_dpe_psi_na <- medsens(med_out_avs_dpe_psi_na, rho.by = 0.1, effect.type = "direct", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_dpe_psi_na)
plot(med_out_avs_dpe_psi_na)

#Lavaan
library(lavaan)
sem_avs_dpe_psi = '
att_neg ~ a*group + chi_beh_control 
avs_dpe_psi ~ c*group + chi_beh_control + b*att_neg
 
direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'
model_sem_avs_dpe_psi = sem(sem_avs_dpe_psi, data=nona_data, se='bootstrap', test = "bootstrap", bootstrap=1000)
summary(model_sem_avs_dpe_psi, rsq=T) 
parameterestimates(model_sem_avs_dpe_psi, boot.ci.type = "bca.simple", standardized = TRUE)

varTable(model_sem_avs_dpe_psi)

```

*lavaan WARNING: some observed variances are (at least) a factor 1000 times larger than others; use varTable(fit) to investigate*

Regressions:
                   Estimate  Std.Err  z-value  P(>|z|)
  att_neg ~                                           
    group      (a)    0.049    0.016    3.113    0.002
    ch_bh_cntr        0.019    0.008    2.377    0.017
  avs_dpe_psi ~                                       
    group      (c)    4.579    1.671    2.741    0.006
    ch_bh_cntr        1.291    0.973    1.327    0.184
    att_neg    (b)   17.101   13.032    1.312    0.189

Variances:
                   Estimate  Std.Err  z-value  P(>|z|)
   .att_neg           0.009    0.001    7.532    0.000
   .avs_dpe_psi     180.107  106.481    1.691    0.091

R-Square:
                   Estimate
    att_neg           0.159
    avs_dpe_psi       0.093

Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct            4.579    1.672    2.740    0.006**
    indirect          0.830    0.678    1.225    0.221
    total             5.409    2.049    2.640    0.008**


```{r Mediation dys_rpm_epi}
#T = group, X= covariates?, M = att_neg, Y = dys_rpm_epi
summary(lm(dys_rpm_epi ~ group + chi_beh_control, data = nona_data)) #IV on DV - NOT S. may not matter though
med_fit_dys_rpm_epi_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
summary(med_fit_dys_rpm_epi_na)
out_fit_dys_rpm_epi_na <- lm(dys_rpm_epi ~ att_neg + group + chi_beh_control, data = nona_data) 
summary(out_fit_dys_rpm_epi_na)
set.seed(567)
med_out_dys_rpm_epi_na <- mediate(med_fit_dys_rpm_epi_na, out_fit_dys_rpm_epi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_dys_rpm_epi_na) #NS

sens_out_dys_rpm_epi_na <- medsens(med_out_dys_rpm_epi_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_rpm_epi_na)
plot(med_out_dys_rpm_epi_na)

#LAVAAN

sem_dys_rpm_epi = '
att_neg ~ a*group + chi_beh_control 
dys_rpm_epi ~ c*group + chi_beh_control + b*att_neg
 
#direct
direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

set.seed(567)
model_dys_rpm_epi = sem(sem_dys_rpm_epi, data=nona_data, se='bootstrap', test = "bootstrap", bootstrap=1000)
summary(model_dys_rpm_epi, rsq=T) 
parameterestimates(model_dys_rpm_epi, boot.ci.type = "bca.simple", standardized = TRUE)


```

Regressions:
                   Estimate  Std.Err  z-value  P(>|z|)
  att_neg ~                                           
    group      (a)    0.049    0.016    3.017    0.003
    ch_bh_cntr        0.019    0.008    2.406    0.016
  dys_rpm_epi ~                                       
    group      (c)   -0.021    0.113   -0.182    0.856
    ch_bh_cntr        0.009    0.028    0.307    0.759
    att_neg    (b)    0.728    0.669    1.088    0.276

Variances:
                   Estimate  Std.Err  z-value  P(>|z|)
   .att_neg           0.009    0.001    7.600    0.000
   .dys_rpm_epi       0.467    0.051    9.203    0.000

R-Square:
                   Estimate
    att_neg           0.159
    dys_rpm_epi       0.013

Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct           -0.021    0.113   -0.181    0.856
    indirect          0.035    0.033    1.078    0.281
    total             0.015    0.110    0.135    0.893

```{r DYS RPM EPI with EPI NEG}
#LAVAAN

sem_dys_rpm_epi = '
epi_vmr_att_neg ~ a*group + chi_beh_control 
dys_rpm_epi ~ c*group + chi_beh_control + b*epi_vmr_att_neg
 
#direct
direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

set.seed(567)
model_dys_rpm_epi = sem(sem_dys_rpm_epi, data=nona_data, se='bootstrap', test = "bootstrap", bootstrap=1000)
summary(model_dys_rpm_epi, rsq=T) 
parameterestimates(model_dys_rpm_epi, boot.ci.type = "bca.simple", standardized = TRUE)

```

```{r dys rpm epi table}
dys_epi_table <- parameterestimates(model_dys_rpm_epi, boot.ci.type = "bca.simple", standardized = TRUE) 
dys_epi_table <- dys_epi_table[c(1,3,5,11:13),]
dys_epi_table
```

```{r Mediation dys_dpe_epi}
#T = group, X= covariates?, M = att_neg, Y = dys_dpe_epi --> N.S
summary(lm(dys_dpe_epi ~ group + chi_beh_control, data = nona_data)) #IV on DV - NS. may not matter though
med_fit_dys_dpe_epi_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
summary(med_fit_dys_dpe_epi_na)
out_fit_dys_dpe_epi_na <- lm(dys_dpe_epi ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
summary(out_fit_dys_dpe_epi_na)

set.seed(567)
med_out_dys_dpe_epi_na <- mediate(med_fit_dys_dpe_epi_na, out_fit_dys_dpe_epi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_dpe_epi_na <- medsens(med_out_dys_dpe_epi_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_dpe_epi_na)
summary(med_out_dys_dpe_epi_na) #NS
plot(med_out_dys_dpe_epi_na)

#lavaan
sem_dys_dpe_epi = '
att_neg ~ a*group + chi_beh_control 
dys_dpe_epi ~ c*group + chi_beh_control + b*att_neg
 
#direct
direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

set.seed(567)
model_dys_dpe_epi = sem(sem_dys_dpe_epi, data=nona_data, se='bootstrap', test = "bootstrap", bootstrap=1000)
summary(model_dys_dpe_epi, rsq=T) 
parameterestimates(model_dys_dpe_epi, boot.ci.type = "bca.simple", standardized = TRUE)


```
Regressions:
                   Estimate  Std.Err  z-value  P(>|z|)
  att_neg ~                                           
    group      (a)    0.049    0.016    3.017    0.003
    ch_bh_cntr        0.019    0.008    2.406    0.016
  dys_dpe_epi ~                                       
    group      (c)    1.115    0.736    1.515    0.130
    ch_bh_cntr        0.319    0.259    1.235    0.217
    att_neg    (b)   -5.285    3.008   -1.757    0.079

Variances:
                   Estimate  Std.Err  z-value  P(>|z|)
   .att_neg           0.009    0.001    7.600    0.000
   .dys_dpe_epi      17.747    2.816    6.302    0.000

R-Square:
                   Estimate
    att_neg           0.159
    dys_dpe_epi       0.033

Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct            1.115    0.737    1.514    0.130
    indirect         -0.256    0.164   -1.564    0.118
    total             0.859    0.703    1.222    0.222

```{r Mediation dys_rpm_psi}
#T = group, X= covariates?, M = att_neg, Y = dys_rpm_psi  --> N.S.

summary(lm(dys_rpm_psi ~ group + chi_beh_control, data = nona_data)) #IV on DV - NS. may not matter though
med_fit_dys_rpm_psi_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
summary(med_fit_dys_rpm_psi_na)
out_fit_dys_rpm_psi_na <- lm(dys_rpm_psi ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
summary(out_fit_dys_rpm_psi_na)
set.seed(567)
med_out_dys_rpm_psi_na <- mediate(med_fit_dys_rpm_psi_na, out_fit_dys_rpm_psi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_dys_rpm_psi_na)
sens_out_dys_rpm_psi_na <- medsens(med_out_dys_rpm_psi_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_rpm_psi_na)

plot(med_out_dys_rpm_psi_na)


sem_dys_rpm_psi = '
att_neg ~ a*group + chi_beh_control 
dys_rpm_psi ~ c*group + chi_beh_control + b*att_neg
 
#direct
direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

set.seed(567)
model_dys_rpm_psi = sem(sem_dys_rpm_psi, data=nona_data, se='bootstrap', test = "bootstrap", bootstrap=1000)
summary(model_dys_rpm_psi, rsq=T) 
parameterestimates(model_dys_rpm_psi, boot.ci.type = "bca.simple", standardized = TRUE)


```
Regressions:
                   Estimate  Std.Err  z-value  P(>|z|)
  att_neg ~                                           
    group      (a)    0.049    0.016    3.017    0.003
    ch_bh_cntr        0.019    0.008    2.406    0.016
  dys_rpm_psi ~                                       
    group      (c)    0.053    0.113    0.471    0.637
    ch_bh_cntr       -0.017    0.029   -0.562    0.574
    att_neg    (b)   -0.231    0.744   -0.311    0.756

Variances:
                   Estimate  Std.Err  z-value  P(>|z|)
   .att_neg           0.009    0.001    7.600    0.000
   .dys_rpm_psi       0.468    0.064    7.305    0.000

R-Square:
                   Estimate
    att_neg           0.159
    dys_rpm_psi       0.004

Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct            0.053    0.114    0.471    0.638
    indirect         -0.011    0.036   -0.311    0.756
    total             0.042    0.110    0.385    0.700


```{r DYS RPM PSI with PSI NEG}

sem_dys_rpm_psi = '
psi_vmr_att_neg ~ a*group + chi_beh_control 
dys_rpm_psi ~ c*group + chi_beh_control + b*psi_vmr_att_neg
 
#direct
direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

set.seed(567)
model_dys_rpm_psi = sem(sem_dys_rpm_psi, data=nona_data, se='bootstrap', test = "bootstrap", bootstrap=1000)
summary(model_dys_rpm_psi, rsq=T) 
parameterestimates(model_dys_rpm_psi, boot.ci.type = "bca.simple", standardized = TRUE)

```

```{r dys rpm psi table}
dys_psi_table <- parameterestimates(model_dys_rpm_psi, boot.ci.type = "bca.simple", standardized = TRUE) 
dys_psi_table <- dys_psi_table[c(1,3,5,11:13),]
dys_psi_table
```

```{r Mediation dys_dpe_psi}
#T = group, X= covariates?, M = att_neg, Y = dys_dpe_psi  --> ACME Sig
summary(lm(dys_dpe_psi ~ group + chi_beh_control, data = nona_data)) #IV on DV - NS. may not matter though
med_fit_dys_dpe_psi_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
summary(med_fit_dys_dpe_psi_na)
out_fit_dys_dpe_psi_na <- lm(dys_dpe_psi ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??)
summary(out_fit_dys_dpe_psi_na)

set.seed(567)
med_out_dys_dpe_psi_na <- mediate(med_fit_dys_dpe_psi_na, out_fit_dys_dpe_psi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_dys_dpe_psi_na)

set.seed(567)
med_out_dys_dpe_psi_na_noboot <- mediate(med_fit_dys_dpe_psi_na, out_fit_dys_dpe_psi_na, boot = F, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_dys_dpe_psi_na_noboot)

set.seed(567)
med_out_dys_dpe_psi_na_bca <- mediate(med_fit_dys_dpe_psi_na, out_fit_dys_dpe_psi_na, boot = T, boot.ci = "bca", treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_dys_dpe_psi_na_bca)

set.seed(567)
med_out_dys_dpe_psi_na_noboot_bca <- mediate(med_fit_dys_dpe_psi_na, out_fit_dys_dpe_psi_na, boot = F, boot.ci = "bca", treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_dys_dpe_psi_na_noboot_bca)

sens_out_dys_dpe_psi_na <- medsens(med_out_dys_dpe_psi_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_dpe_psi_na)
summary(med_out_dys_dpe_psi_na)
plot(med_out_dys_dpe_psi_na)

#lavaan
sem_dys_dpe_psi = '
att_neg ~ a*group + chi_beh_control 
dys_dpe_psi ~ c*group + chi_beh_control + b*att_neg
 
#direct
direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'


set.seed(567)
model_sem_dys_dpe_psi = sem(sem_dys_dpe_psi, data=nona_data, se='bootstrap', test = "bootstrap", bootstrap=1000)
summary(model_sem_dys_dpe_psi, rsq=T) 
parameterestimates(model_sem_dys_dpe_psi, boot.ci.type = "bca.simple", standardized = TRUE)

#set.seed(567)
#model_sem_dys_dpe_psi = sem(sem_dys_dpe_psi, data=nona_data, se='bootstrap', test='bootstrap', bootstrap=1000)
#summary(model_sem_dys_dpe_psi, rsq=T) 
#parameterestimates(model_sem_dys_dpe_psi, boot.ci.type = "perc", standardized = TRUE) %>% 
 # knitr::kable()

#set.seed(567)
#model_sem_dys_dpe_psi_noboot = sem(sem_dys_dpe_psi, data=nona_data, test='bootstrap', bootstrap=1000)
#summary(model_sem_dys_dpe_psi_noboot, rsq=T) 
#parameterestimates(model_sem_dys_dpe_psi_noboot, boot.ci.type = "perc", standardized = TRUE) %>% 
 # knitr::kable()

#set.seed(567)
#model_sem_dys_dpe_psi_boot_bca = sem(sem_dys_dpe_psi, data=nona_data, se= "bootstrap", test = "bootstrap", bootstrap=1000)
#summary(model_sem_dys_dpe_psi_boot_bca, rsq=T) 
#parameterestimates(model_sem_dys_dpe_psi_boot_bca, boot.ci.type = "bca.simple", standardized = TRUE) %>% 
#  knitr::kable()

#set.seed(567)
#model_sem_dys_dpe_psi_boot_noboot_bca = sem(sem_dys_dpe_psi, data=nona_data, test = "bootstrap", bootstrap=1000)
#summary(model_sem_dys_dpe_psi_boot_noboot_bca, rsq=T) 
#parameterestimates(model_sem_dys_dpe_psi_boot_noboot_bca, boot.ci.type = "bca.simple", standardized = TRUE) %>% 
#  knitr::kable()



```

*lavaan WARNING: some observed variances are (at least) a factor 1000 times larger than others; use varTable(fit) to investigate*

Regressions:
                   Estimate  Std.Err  z-value  P(>|z|)
  att_neg ~                                           
    group      (a)    0.049    0.016    3.017    0.003
    ch_bh_cntr        0.019    0.008    2.406    0.016
  dys_dpe_psi ~                                       
    group      (c)    0.527    0.976    0.540    0.590
    ch_bh_cntr        0.496    0.388    1.277    0.202
    att_neg    (b)  -10.132    4.313   -2.349    0.019

Variances:
                   Estimate  Std.Err  z-value  P(>|z|)
   .att_neg           0.009    0.001    7.600    0.000
   .dys_dpe_psi      46.980   27.123    1.732    0.083

R-Square:
                   Estimate
    att_neg           0.159
    dys_dpe_psi       0.025

Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct            0.527    0.977    0.539    0.590
    indirect         -0.492    0.262   -1.873    0.061
    total             0.035    1.047    0.034    0.973

```{r Mediation pos_rpm_epi}
#T = group, X= covariates?, M = att_neg, Y = pos_rpm_epi
summary(lm(pos_rpm_epi ~ group + chi_beh_control, data = nona_data)) #IV on DV - S. may not matter though
med_fit_pos_rpm_epi_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
summary(med_fit_pos_rpm_epi_na)
out_fit_pos_rpm_epi_na <- lm(pos_rpm_epi ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
summary(out_fit_pos_rpm_epi_na)

set.seed(567)
med_out_pos_rpm_epi_na <- mediate(med_fit_pos_rpm_epi_na, out_fit_pos_rpm_epi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_pos_rpm_epi_na) #total effect 

sens_out_pos_rpm_epi_na <- medsens(med_out_pos_rpm_epi_na, rho.by = 0.1, effect.type = "both", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_rpm_epi_na)
plot(med_out_pos_rpm_epi_na)

#lavaan
sem_pos_rpm_epi = '
att_neg ~ a*group + chi_beh_control 
pos_rpm_epi ~ c*group + chi_beh_control + b*att_neg
 
#direct
direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

set.seed(567)
model_pos_rpm_epi = sem(sem_pos_rpm_epi, data=nona_data, se='bootstrap', test = "bootstrap", bootstrap=1000)
summary(model_pos_rpm_epi, rsq=T) 
parameterestimates(model_pos_rpm_epi, boot.ci.type = "bca.simple", standardized = TRUE)

```

Regression:
att_neg ~                                           
    group      (a)    0.049    0.016    3.017    0.003
    ch_bh_cntr        0.019    0.008    2.406    0.016
  pos_rpm_epi ~                                       
    group      (c)   -0.222    0.122   -1.822    0.068
    ch_bh_cntr       -0.067    0.042   -1.596    0.111
    att_neg    (b)   -0.227    0.586   -0.387    0.698

Variances:
                   Estimate  Std.Err  z-value  P(>|z|)
   .att_neg           0.009    0.001    7.600    0.000
   .pos_rpm_epi       0.525    0.052   10.025    0.000

R-Square:
                   Estimate
    att_neg           0.159
    pos_rpm_epi       0.055

Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct           -0.222    0.122   -1.822    0.069
    indirect         -0.011    0.029   -0.385    0.701
    total            -0.233    0.117   -1.980    0.048 *<-- I don't really understand what this means*

```{r POS RPM EPI with EPI NEG}
sem_pos_rpm_epi = '
epi_vmr_att_neg ~ a*group + chi_beh_control 
pos_rpm_epi ~ c*group + chi_beh_control + b*epi_vmr_att_neg
 
#direct
direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

set.seed(567)
model_pos_rpm_epi = sem(sem_pos_rpm_epi, data=nona_data, se='bootstrap', test = "bootstrap", bootstrap=1000)
summary(model_pos_rpm_epi, rsq=T) 
parameterestimates(model_pos_rpm_epi, boot.ci.type = "bca.simple", standardized = TRUE)


```

```{r pos rpm epi table}
pos_epi_table <- parameterestimates(model_pos_rpm_epi, boot.ci.type = "bca.simple", standardized = TRUE) 
pos_epi_table <- pos_epi_table[c(1,3,5,11:13),]
pos_epi_table
```

```{r Mediation pos_dpe_epi}
#T = group, X= covariates?, M = att_neg, Y = pos_dpe_epi
summary(lm(pos_dpe_epi ~ group + chi_beh_control, data = nona_data)) #IV on DV - NS. may not matter though
med_fit_pos_dpe_epi_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
summary(med_fit_pos_dpe_epi_na)
out_fit_pos_dpe_epi_na <- lm(pos_dpe_epi ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??)
summary(out_fit_pos_dpe_epi_na)

set.seed(567)
med_out_pos_dpe_epi_na <- mediate(med_fit_pos_dpe_epi_na, out_fit_pos_dpe_epi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_pos_dpe_epi_na) #ACME, BUT the IV isn't sig on DV

sens_out_pos_dpe_epi_na <- medsens(med_out_pos_dpe_epi_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_dpe_epi_na)
plot(med_out_pos_dpe_epi_na)

#lavaan
sem_pos_dpe_epi = '
att_neg ~ a*group + chi_beh_control 
pos_dpe_epi ~ c*group + chi_beh_control + b*att_neg
 
#direct
direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

set.seed(567)
model_pos_dpe_epi = sem(sem_pos_dpe_epi, data=nona_data, se='bootstrap', test = "bootstrap", bootstrap=1000)
summary(model_pos_dpe_epi, rsq=T) 
parameterestimates(model_pos_dpe_epi, boot.ci.type = "bca.simple", standardized = TRUE)
```

lavaan 0.6-7 ended normally after 32 iterations

  Estimator                                         ML
  Optimization method                           NLMINB
  Number of free parameters                          7
                                                      
  Number of observations                           163
                                                      
Model Test User Model:
                                                      
  Test statistic                                 0.000
  Degrees of freedom                                 0
                                                      
  Test statistic                                 0.000
  Degrees of freedom                                 0

Parameter Estimates:

  Standard errors                            Bootstrap
  Number of requested bootstrap draws             1000
  Number of successful bootstrap draws            1000

Regressions:
                   Estimate  Std.Err  z-value  P(>|z|)
  att_neg ~                                           
    group      (a)    0.049    0.016    3.017    0.003
    ch_bh_cntr        0.019    0.008    2.406    0.016
  pos_dpe_epi ~                                       
    group      (c)    0.036    0.296    0.120    0.904
    ch_bh_cntr       -0.054    0.054   -1.005    0.315
    att_neg    (b)   -2.627    1.217   -2.158    0.031

Variances:
                   Estimate  Std.Err  z-value  P(>|z|)
   .att_neg           0.009    0.001    7.600    0.000
   .pos_dpe_epi       3.134    0.617    5.078    0.000

R-Square:
                   Estimate
    att_neg           0.159
    pos_dpe_epi       0.030

Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct            0.036    0.296    0.120    0.904
    indirect         -0.127    0.073   -1.740    0.082
    total            -0.092    0.292   -0.315    0.753


```{r Mediation pos_rpm_psi}
#T = group, X= covariates?, M = att_neg, Y = pos_rpm_psi
summary(lm(pos_rpm_psi ~ group + chi_beh_control, data = nona_data)) #IV on DV - S. may not matter though
med_fit_pos_rpm_psi_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
summary(med_fit_pos_rpm_psi_na)
out_fit_pos_rpm_psi_na <- lm(pos_rpm_psi ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
summary(out_fit_pos_rpm_psi_na)
set.seed(567)
med_out_pos_rpm_psi_na <- mediate(med_fit_pos_rpm_psi_na, out_fit_pos_rpm_psi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_pos_rpm_psi_na)
sens_out_pos_rpm_psi_na <- medsens(med_out_pos_rpm_psi_na, rho.by = 0.1, effect.type = "both", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_rpm_psi_na)
plot(med_out_pos_rpm_psi_na)

#lavaan
sem_pos_rpm_psi = '
att_neg ~ a*group + chi_beh_control 
pos_rpm_psi ~ c*group + chi_beh_control + b*att_neg
 
#direct
direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

set.seed(567)
model_pos_rpm_psi = sem(sem_pos_rpm_psi, data=nona_data, se='bootstrap', test = "bootstrap", bootstrap=1000)
summary(model_pos_rpm_psi, rsq=T) 
parameterestimates(model_pos_rpm_psi, boot.ci.type = "bca.simple", standardized = TRUE)
```
Regressions:
                   Estimate  Std.Err  z-value  P(>|z|)
  att_neg ~                                           
    group      (a)    0.049    0.016    3.017    0.003
    ch_bh_cntr        0.019    0.008    2.406    0.016
  pos_rpm_psi ~                                       
    group      (c)   -0.384    0.109   -3.524    0.000
    ch_bh_cntr       -0.086    0.036   -2.410    0.016
    att_neg    (b)   -1.308    0.639   -2.049    0.040

Variances:
                   Estimate  Std.Err  z-value  P(>|z|)
   .att_neg           0.009    0.001    7.600    0.000
   .pos_rpm_psi       0.478    0.048    9.934    0.000

R-Square:
                   Estimate
    att_neg           0.159
    pos_rpm_psi       0.184

Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct           -0.384    0.109   -3.522    0.000
    indirect         -0.063    0.035   -1.826    0.068
    total            -0.448    0.110   -4.061    0.000
    
```{r POS RPM PSI with PSI NEG}
sem_pos_rpm_psi = '
psi_vmr_att_neg ~ a*group + chi_beh_control 
pos_rpm_psi ~ c*group + chi_beh_control + b*psi_vmr_att_neg
 
#direct
direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

set.seed(567)
model_pos_rpm_psi = sem(sem_pos_rpm_psi, data=nona_data, se='bootstrap', test = "bootstrap", bootstrap=1000)
summary(model_pos_rpm_psi, rsq=T) 
parameterestimates(model_pos_rpm_psi, boot.ci.type = "bca.simple", standardized = TRUE)

```
direct	-0.377	0.107	-3.524	0.000	
indirect	-0.071	0.037	-1.902	0.057	
total	-0.448	0.110	-4.061	0.000	
 
```{r pos rpm psi table}
pos_psi_table <- parameterestimates(model_pos_rpm_psi, boot.ci.type = "bca.simple", standardized = TRUE) 
pos_psi_table <- pos_psi_table[c(1,3,5,11:13),]
pos_psi_table
```

```{r COMBINED PARENTING TABLE}

all_parenting_tables <- bind_rows(crpbic_table, crpbim_table, avs_epi_table, avs_psi_table, pos_epi_table, pos_psi_table, dys_epi_table, dys_psi_table)
all_parenting_tables
knitr::kable(all_parenting_tables)

all_parenting_tables <- all_parenting_tables %>% 
  dplyr::rename("Path" = label, "Estimate" = est, "SE" = se, "p" = pvalue, "Lower 95% CI" = ci.lower, "Upper 95% CI" = ci.upper) 

all_parenting_tables<- as.data.frame(all_parenting_tables)

all_parenting_tables$Estimate <- round(all_parenting_tables$Estimate,2)
all_parenting_tables$SE <- round(all_parenting_tables$SE,2)
all_parenting_tables$z <- round(all_parenting_tables$z,2)
all_parenting_tables$p <- round(all_parenting_tables$p,3)
all_parenting_tables$`Lower 95% CI` <- round(all_parenting_tables$`Lower 95% CI`,4)
all_parenting_tables$`Upper 95% CI` <- round(all_parenting_tables$`Upper 95% CI`,3)


rio::export(all_parenting_tables, "~/all_parenting_sem_tables.csv")
```

```{r Mediation pos_dpe_psi}
#T = group, X= covariates?, M = att_neg, Y = pos_dpe_psi --> ACME sig
summary(lm(pos_dpe_psi ~ group + chi_beh_control, data = nona_data)) #IV on DV - NS. may not matter though
med_fit_pos_dpe_psi_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
summary(med_fit_pos_dpe_psi_na)
out_fit_pos_dpe_psi_na <- lm(pos_dpe_psi ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
summary(out_fit_pos_dpe_psi_na)

set.seed(567)
med_out_pos_dpe_psi_na <- mediate(med_fit_pos_dpe_psi_na, out_fit_pos_dpe_psi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_pos_dpe_psi_na)

sens_out_pos_dpe_psi_na <- medsens(med_out_pos_dpe_psi_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_dpe_psi_na)

plot(med_out_pos_dpe_psi_na)

#lavaan

sem_pos_dpe_psi = '
att_neg ~ a*group + chi_beh_control 
pos_dpe_psi ~ c*group + chi_beh_control + b*att_neg
 
#direct
direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'


set.seed(567)
model_pos_dpe_psi = sem(sem_pos_dpe_psi, data=nona_data, se='bootstrap', test = "bootstrap", bootstrap=1000)
summary(model_pos_dpe_psi, rsq=T) 
parameterestimates(model_pos_dpe_psi, boot.ci.type = "bca.simple", standardized = TRUE)

```
Regressions:
                   Estimate  Std.Err  z-value  P(>|z|)
  att_neg ~                                           
    group      (a)    0.049    0.016    3.017    0.003
    ch_bh_cntr        0.019    0.008    2.406    0.016
  pos_dpe_psi ~                                       
    group      (c)    0.076    0.375    0.204    0.839
    ch_bh_cntr       -0.035    0.093   -0.381    0.703
    att_neg    (b)   -3.273    1.482   -2.209    0.027

Variances:
                   Estimate  Std.Err  z-value  P(>|z|)
   .att_neg           0.009    0.001    7.600    0.000
   .pos_dpe_psi       4.536    0.955    4.748    0.000

R-Square:
                   Estimate
    att_neg           0.159
    pos_dpe_psi       0.027

Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct            0.076    0.375    0.204    0.839
    indirect         -0.159    0.086   -1.847    0.065
    total            -0.082    0.357   -0.231    0.817

```{r Mediation avs_rpm - don't run} 
#T = group, X= covariates?, M = att_neg, Y = avs_rpm
summary(glm(avs_rpm ~ group + chi_beh_control, data = nona_data)) #IV on DV - sig. may not matter though
med_fit_avs_rpm_na <- glm(att_neg ~ group + chi_beh_control, data = nona_data)
out_fit_avs_rpm_na <- glm(avs_rpm ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
set.seed(567)
med_out_avs_rpm_na <- mediate(med_fit_avs_rpm_na, out_fit_avs_rpm_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_avs_rpm_na)
sens_out_avs_rpm_na <- medsens(med_out_avs_rpm_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_rpm_na)

plot(med_out_avs_rpm_na)

```

```{r Mediation avs_pd_epi - don't run}
#T = group, X= covariates?, M = att_neg, Y = avs_pd_epi
summary(lm(avs_pd_epi ~ group + chi_beh_control, data = nona_data)) #IV on DV - sig. may not matter though
med_fit_avs_pd_epi_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
med_fit_avs_pd_epi_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
out_fit_avs_pd_epi_na <- lm(avs_pd_epi ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
set.seed(567)
med_out_avs_pd_epi_na <- mediate(med_fit_avs_pd_epi_na, out_fit_avs_pd_epi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_avs_pd_epi_na)
sens_out_avs_pd_epi_na <- medsens(med_out_avs_pd_epi_na, rho.by = 0.1, effect.type = "both", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_pd_epi_na)

plot(med_out_avs_pd_epi_na)
``` 

```{r Mediation avs_pd - don't run}
#T = group, X= covariates?, M = att_neg, Y = avs_pd
summary(lm(avs_pd ~ group + chi_beh_control, data = nona_data)) #IV on DV - sig. may not matter though
med_fit_avs_pd_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
med_fit_avs_pd_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
out_fit_avs_pd_na <- lm(avs_pd ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
set.seed(567)
med_out_avs_pd_na <- mediate(med_fit_avs_pd_na, out_fit_avs_pd_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_avs_pd_na)

sens_out_avs_pd_na <- medsens(med_out_avs_pd_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_pd_na)
plot(med_out_avs_pd_na)
``` 

```{r Mediation avs_dp - don't run}
#T = group, X= covariates?, M = att_neg, Y = avs_dp
summary(glm(avs_dp ~ group + chi_beh_control, data = nona_data)) #IV on DV - sig. may not matter though
med_fit_avs_dp_na <- glm(att_neg ~ group + chi_beh_control,  data = nona_data)
out_fit_avs_dp_na <- glm(avs_dp ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_dp_na <- mediate(med_fit_avs_dp_na, out_fit_avs_dp_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_avs_dp_na)

sens_out_avs_dp_na <- medsens(med_out_avs_dp_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_dp_na)
plot(med_out_avs_dp_na)
```

```{r Mediation avs_pd_psi - don't run}
#T = group, X= covariates?, M = att_neg, Y = avs_pd_psi

summary(lm(avs_pd_psi ~ group + chi_beh_control, data = nona_data)) #IV on DV - S. may not matter though
med_fit_avs_pd_psi_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
out_fit_avs_pd_psi_na <- lm(avs_pd_psi ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
set.seed(567)
med_out_avs_pd_psi_na <- mediate(med_fit_avs_pd_psi_na, out_fit_avs_pd_psi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_avs_pd_psi_na)

sens_out_avs_pd_psi_na <- medsens(med_out_avs_pd_psi_na, rho.by = 0.1, effect.type = "both", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_pd_psi_na)
plot(med_out_avs_pd_psi_na)
```

```{r Mediation dys_pd_psi - dont run}
#T = group, X= covariates?, M = att_neg, Y = dys_pd_psi --> N.S.
summary(lm(dys_pd_psi ~ group + chi_beh_control, data = nona_data)) #IV on DV - NS. may not matter though
med_fit_dys_pd_psi_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
summary(med_fit_dys_pd_psi_na)
out_fit_dys_pd_psi_na <- lm(dys_pd_psi ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
summary(out_fit_dys_pd_psi_na)
set.seed(567)
med_out_dys_pd_psi_na <- mediate(med_fit_dys_pd_psi_na, out_fit_dys_pd_psi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_pd_psi_na <- medsens(med_out_dys_pd_psi_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_pd_psi_na)
summary(med_out_dys_pd_psi_na)
plot(med_out_dys_pd_psi_na)


```

```{r Mediation dys_rpm - don't run}
#T = group, X= covariates?, M = att_neg, Y = dys_rpm
summary(glm(dys_rpm ~ group + chi_beh_control, data = nona_data)) #IV on DV - NS. may not matter though
med_fit_dys_rpm_na <- glm(att_neg ~ group + chi_beh_control, data = nona_data)
out_fit_dys_rpm_na <- glm(dys_rpm ~ att_neg + group + chi_beh_control, data = nona_data) 
set.seed(567)
med_out_dys_rpm_na <- mediate(med_fit_dys_rpm_na, out_fit_dys_rpm_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_dys_rpm_na) #NS

sens_out_dys_rpm_na <- medsens(med_out_dys_rpm_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_rpm_na)
plot(med_out_dys_rpm_na)
```


```{r Mediation dys_pd - don't run}
#T = group, X= covariates?, M = att_neg, Y = dys_pd --> N.S

summary(glm(dys_pd ~ group + chi_beh_control, data = nona_data)) #IV on DV - NS. may not matter though
med_fit_dys_pd_na <- glm(att_neg ~ group + chi_beh_control, data = nona_data)
summary(med_fit_dys_pd_na)
out_fit_dys_pd_na <- glm(dys_pd ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
summary(out_fit_dys_pd_na)
set.seed(567)
med_out_dys_pd_na <- mediate(med_fit_dys_pd_na, out_fit_dys_pd_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_pd_na <- medsens(med_out_dys_pd_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_pd_na)
summary(med_out_dys_pd_na) #NS
plot(med_out_dys_pd_na)
```


```{r Mediation dys_pd_epi - don't run}
#T = group, X= covariates?, M = att_neg, Y = dys_pd_epi
summary(lm(dys_pd_epi ~ group + chi_beh_control, data = nona_data)) #IV on DV - NS. may not matter though
med_fit_dys_pd_epi_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
out_fit_dys_pd_epi_na <- lm(dys_pd_epi ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
set.seed(567)
med_out_dys_pd_epi_na <- mediate(med_fit_dys_pd_epi_na, out_fit_dys_pd_epi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_pd_epi_na <- medsens(med_out_dys_pd_epi_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_pd_epi_na)
summary(med_out_dys_pd_epi_na) #NS
plot(med_out_dys_pd_epi_na)
```

```{r Mediation dys_dp - don't run}
#T = group, X= covariates?, M = att_neg, Y = dys_dp --> ACME, but the IV on DV isn't SIG - so unsure about this
summary(glm(dys_dpe ~ group + chi_beh_control, data = nona_data)) #IV on DV - NS. may not matter though
med_fit_dys_dpe_na <- glm(att_neg ~ group + chi_beh_control, data = nona_data)
out_fit_dys_dpe_na <- glm(dys_dpe ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
set.seed(567)
med_out_dys_dpe_na <- mediate(med_fit_dys_dpe_na, out_fit_dys_dpe_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_dpe_na <- medsens(med_out_dys_dp_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_dpe_na)
summary(med_out_dys_dpe_na)
plot(med_out_dys_dpe_na)
```


```{r Mediation pos_rpm - don't run}
#T = group, X= covariates?, M = att_neg, Y = pos_rpm -- ADE, Total Effect
summary(glm(pos_rpm ~ group + chi_beh_control, data = nona_data)) #IV on DV - S. may not matter though
med_fit_pos_rpm_na <- glm(att_neg ~ group + chi_beh_control, data = nona_data)
out_fit_pos_rpm_na <- glm(pos_rpm ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
set.seed(567)
med_out_pos_rpm_na <- mediate(med_fit_pos_rpm_na, out_fit_pos_rpm_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_pos_rpm_na)

sens_out_pos_rpm_na <- medsens(med_out_pos_rpm_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_rpm_na)
plot(med_out_pos_rpm_na)
```

```{r Mediation pos_pd - don't run}
#T = group, X= covariates?, M = att_neg, Y = pos_pd
summary(glm(pos_pd ~ group + chi_beh_control, data = nona_data)) #IV on DV - S. may not matter though

med_fit_pos_pd_na <- glm(att_neg ~ group + chi_beh_control, data = nona_data)
out_fit_pos_pd_na <- glm(pos_pd ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
set.seed(567)
med_out_pos_pd_na <- mediate(med_fit_pos_pd_na, out_fit_pos_pd_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_pos_pd_na) #ACME, Total, Prop Med

sens_out_pos_pd_na <- medsens(med_out_pos_pd_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_pd_na)
plot(med_out_pos_pd_na)
```

```{r Mediation pos_pd_epi - don't run}
#T = group, X= covariates?, M = att_neg, Y = pos_pd_epi
summary(lm(pos_pd_epi ~ group + chi_beh_control, data = nona_data)) #IV on DV - NS. may not matter though
med_fit_pos_pd_epi_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
out_fit_pos_pd_epi_na <- lm(pos_pd_epi ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
set.seed(567)
med_out_pos_pd_epi_na <- mediate(med_fit_pos_pd_epi_na, out_fit_pos_pd_epi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_pos_pd_epi_na) #NS

sens_out_pos_pd_epi_na <- medsens(med_out_pos_pd_epi_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_pd_epi_na)
plot(med_out_pos_pd_epi_na)
```

```{r Mediation pos_dpe - dont run}
#T = group, X= covariates?, M = att_neg, Y = pos_dpe

summary(glm(pos_dpe ~ group + chi_beh_control, data = nona_data)) #IV on DV - NS. may not matter though
med_fit_pos_dpe_na <- glm(att_neg ~ group + chi_beh_control, data = nona_data)
out_fit_pos_dpe_na <- glm(pos_dpe ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??)
set.seed(567)
med_out_pos_dpe_na <- mediate(med_fit_pos_dpe_na, out_fit_pos_dpe_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_pos_dpe_na) #ACME

sens_out_pos_dpe_na <- medsens(med_out_pos_dpe_na, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_dpe_na)
plot(med_out_pos_dpe_na)
```

```{r Mediation pos_pd_psi - dont run}
#T = group, X= covariates?, M = att_neg, Y = pos_pd_psi
summary(lm(pos_pd_psi ~ group + chi_beh_control, data = nona_data)) #IV on DV - S. may not matter though
med_fit_pos_pd_psi_na <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
out_fit_pos_pd_psi_na <- lm(pos_pd_psi ~ att_neg + group + chi_beh_control, data = nona_data) #,family = ??) 
set.seed(567)
med_out_pos_pd_psi_na <- mediate(med_fit_pos_pd_psi_na, out_fit_pos_pd_psi_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_pos_pd_psi_na)

sens_out_pos_pd_psi_na <- medsens(med_out_pos_pd_psi_na, rho.by = 0.1, effect.type = "both", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_pd_psi_na)
plot(med_out_pos_pd_psi_na)
```

#MOD MEDiation
```{r Mod Mediation set ups}

#mean center predictor variables
nona_data <- nona_data %>% 
  mutate(famid = factor(famid),
         att_neg_c = att_neg - mean(att_neg))

#CHANGE APPROPRIATE VARIABLES TO NUMERIC
nona_data$group <- as.character(nona_data$group)
nona_data$group[nona_data$group == 'Non Depressed'] <- '0'
nona_data$group[nona_data$group == 'Depressed'] <- '1'
nona_data$group <- as.numeric(nona_data$group)
nona_data$c_sex[nona_data$c_sex == 'Female'] <- '-1'
nona_data$c_sex[nona_data$c_sex == 'Male'] <- '1'
nona_data$c_sex <- as.numeric(nona_data$c_sex)
#1 = depressed 0 = non-depressed

#Compute interaction terms
nona_data <- nona_data %>% 
  mutate(att_sex = att_neg_c * c_sex)

#https://nickmichalak.com/post/2019-02-14-testing-conditional-indirect-effects-mediation-in-r/testing-conditional-indirect-effects-mediation-in-r/
```

```{r Mediation CBCL int_t}
#T = group, X= covariates?, M = att_neg, Y = cbcl_int_t
summary(lm(cbcl_int_t ~ group + chi_beh_control, data = nona_data)) #IV on DV - S. may not matter though
med_fit_cbcl_int_t_na <- lm(att_neg ~ group, data = nona_data)
summary(med_fit_cbcl_int_t_na)
out_fit_cbcl_int_t_na <- lm(cbcl_int_t ~ att_neg + group, data = nona_data) #,family = ??) 
summary(out_fit_cbcl_int_t_na)

set.seed(567)
med_out_cbcl_int_t_na <- mediate(med_fit_cbcl_int_t_na, out_fit_cbcl_int_t_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_cbcl_int_t_na)

sens_out_cbcl_int_t_na <- medsens(med_out_cbcl_int_t_na, rho.by = 0.1, effect.type = "direct", sims = 1000) #only doing direct effect type
summary(sens_out_cbcl_int_t_na)
plot(med_out_cbcl_int_t_na)

#mediation controlling 
med_fit_cbcl_int_t_con <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
summary(med_fit_cbcl_int_t_con)
out_fit_cbcl_int_t_con <- lm(cbcl_int_t ~ att_neg + group, data = nona_data)  
summary(out_fit_cbcl_int_t_con)

set.seed(567)
med_out_cbcl_int_t_con <- mediate(med_fit_cbcl_int_t_con, out_fit_cbcl_int_t_con, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_cbcl_int_t_con)

#lavaan controlling for chi_beh --- NOT MODERATED

sem_con_cbcl_i= '
att_neg ~ a*group + chi_beh_control 
cbcl_int_t ~ c*group + b*att_neg
 

direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

model_con_cbcl_i = sem(sem_con_cbcl_i, data=nona_data, se='boot', bootstrap=1000)
summary(model_con_cbcl_i, rsq=T) 

```

DV = CBCL int, mediation controlling chi_beh

               Estimate 95% CI Lower 95% CI Upper p-value    
ACME             0.3704      -0.3762         1.15    0.33    
ADE              9.1860       5.8618        12.62  <2e-16 ***
Total Effect     9.5564       6.4198        12.79  <2e-16 ***
Prop. Mediated   0.0388      -0.0401         0.14    0.33   

DV = CBCL int, lavaan mediation controlling chi_beh

Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct            9.186    1.672    5.493    0.000 *
    indirect          0.370    0.373    0.992    0.321
    total             9.556    1.586    6.025    0.000 *

```{r Mod Mediation CBCL int_t}
#T = group, X= covariates?, M = att_neg, Y = cbcl_int_t, mod = c_sex
library(lavaan)

mod_cbcl_i <- "# a path
         att_neg_c ~ 1 + a1 * group

         # b paths
         cbcl_int_t ~ 1 + b1 * att_neg_c
         cbcl_int_t ~ b2 * c_sex
         cbcl_int_t ~ b3 * att_sex

         # c prime path 
         cbcl_int_t ~ cp * group

         # index of moderated mediation and conditional indirect effects
         a1b3 := a1 * b3
         maleie := a1 * b1 + a1b3 * 1
         femaleie := a1 * b1 + a1b3 * -1"

set.seed(567)
sem.cbcl.i <- sem(mod_cbcl_i, data = nona_data, test = "bootstrap", se = "bootstrap", bootstrap = 1000) 
summary(sem.cbcl.i, standardized = TRUE, fit.measures = TRUE)
library(knitr)
library(kableExtra)
parameterestimates(sem.cbcl.i, boot.ci.type = "bca.simple", standardized = TRUE) %>% 
  kable()
#lavaan WARNING: some observed variances are (at least) a factor 1000 times larger than others; use varTable(fit) to investigate

varTable(sem.cbcl.i)

#controlling 
mod_cbcl_i_chibeh <- "# a path
         att_neg_c ~ 1 + a1 * group + chi_beh_control

         # b paths
         cbcl_int_t ~ 1 + b1 * att_neg_c
         cbcl_int_t ~ b2 * c_sex
         cbcl_int_t ~ b3 * att_sex

         # c prime path 
         cbcl_int_t ~ cp * group

         # index of moderated mediation and conditional indirect effects
         a1b3 := a1 * b3
         maleie := a1 * b1 + a1b3 * 1
         femaleie := a1 * b1 + a1b3 * -1"
set.seed(567)
sem.cbcl.i.chibeh <- sem(mod_cbcl_i_chibeh, data = nona_data, test = "bootstrap", se = "bootstrap", bootstrap = 1000) 
summary(sem.cbcl.i.chibeh, standardized = TRUE, fit.measures = TRUE)
parameterestimates(sem.cbcl.i.chibeh, boot.ci.type = "bca.simple", standardized = TRUE) %>% kable()
```

```{r MOD MED CBCL INT TABLE}
cbcl_i <- parameterestimates(sem.cbcl.i.chibeh, boot.ci.type = "bca.simple", standardized = TRUE)
cbcl_i <- cbcl_i[c(2,5:8,25:27), ]
cbcl_i
```


*lavaan WARNING: some observed variances are (at least) a factor 1000 times larger than others; use varTable(fit) to investigate*
 
Controlling for chibeh: 
CBCL INT _ covariate >>		
a		S
cp		S
b1		NS
b2		NS
b3		NS
a1b3	Indirect Effect	NS
		
a1b1 + a1b3 -.5 		NS
a1b1 + a1b3+.5 		NS

 
```{r Mediation YRS int_t}
#T = group, X= covariates?, M = att_neg, Y = yrs_int_t

summary(lm(yrs_int_t ~ group + chi_beh_control, data = nona_data)) #IV on DV - S. may not matter though
med_fit_yrs_int_t_na <- lm(att_neg ~ group, data = nona_data)
summary(med_fit_yrs_int_t_na)
out_fit_yrs_int_t_na <- lm(yrs_int_t ~ att_neg + group, data = nona_data) #,family = ??) 
summary(out_fit_yrs_int_t_na)

set.seed(567)
med_out_yrs_int_t_na <- mediate(med_fit_yrs_int_t_na, out_fit_yrs_int_t_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_yrs_int_t_na)
plot(med_out_yrs_int_t_na)

sens_out_yrs_int_t_na <- medsens(med_out_yrs_int_t_na, rho.by = 0.1, effect.type = "direct", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_yrs_int_t_na)

#mediation controlling 
med_fit_yrs_int_t_con <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
summary(med_fit_yrs_int_t_con)
out_fit_yrs_int_t_con <- lm(yrs_int_t ~ att_neg + group, data = nona_data)  
summary(out_fit_yrs_int_t_con)

set.seed(567)
med_out_yrs_int_t_con <- mediate(med_fit_yrs_int_t_con, out_fit_yrs_int_t_con, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_yrs_int_t_con)


#lavaan controlling for chi_beh --- NOT MODERATED

sem_con_yrs_i= '
att_neg ~ a*group + chi_beh_control 
yrs_int_t ~ c*group + b*att_neg
 

direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

model_con_yrs_i = sem(sem_con_yrs_i, data=nona_data, se='boot', bootstrap=1000)
summary(model_con_yrs_i, rsq=T) 


```
DV = YRS INT, mediation controlling for chi_behavior
               Estimate 95% CI Lower 95% CI Upper p-value   
ACME             0.6693      -0.1066         1.55   0.080 . 
ADE              4.5750       1.2530         7.55   0.016 * 
Total Effect     5.2443       1.9248         8.22   0.008 **
Prop. Mediated   0.1276      -0.0288         0.46   0.088 . 

*lavaan WARNING: some observed variances are (at least) a factor 1000 times larger than others; use varTable(fit) to investigate*

DV = YRS int, lavaan mediation controlling chi_beh

Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct            4.575    1.692    2.703    0.007 *
    indirect          0.669    0.423    1.582    0.114
    total             5.244    1.671    3.139    0.002


```{r Mod Mediation YRS int_t}
#T = group, X= covariates?, M = att_neg, Y = yrs_int_t, mod = c_sex

#LAVAAN
mod_yrs_i <- "# a path
         att_neg_c ~ 1 + a1 * group

         # b paths
         yrs_int_t ~ 1 + b1 * att_neg_c
         yrs_int_t ~ b2 * c_sex
         yrs_int_t ~ b3 * att_sex

         # c prime path 
         yrs_int_t ~ cp * group

         # index of moderated mediation and conditional indirect effects
         a1b3 := a1 * b3
         maleie := a1 * b1 + a1b3 * 1
         femaleie := a1 * b1 + a1b3 * -1"
set.seed(567)
sem.yrs.i <- sem(mod_yrs_i, data = nona_data, test = "bootstrap", se = "bootstrap", bootstrap = 1000)
summary(sem.yrs.i, standardized = TRUE, fit.measures = TRUE)
varTable(sem.yrs.i)

library(knitr)
library(kableExtra)
parameterestimates(sem.yrs.i, boot.ci.type = "bca.simple", standardized = TRUE) %>% 
  kable()

#controlling
mod_yrs_i_chibeh <- "# a path
         att_neg_c ~ 1 + a1 * group + chi_beh_control

         # b paths
         yrs_int_t ~ 1 + b1 * att_neg_c
         yrs_int_t ~ b2 * c_sex
         yrs_int_t ~ b3 * att_sex

         # c prime path 
         yrs_int_t ~ cp * group

         # index of moderated mediation and conditional indirect effects
         a1b3 := a1 * b3
         maleie := a1 * b1 + a1b3 * 1
         femaleie := a1 * b1 + a1b3 * -1"
set.seed(567)
sem.yrs.i.chibeh <- sem(mod_yrs_i_chibeh, data = nona_data, test = "bootstrap", se = "bootstrap", bootstrap = 1000) #lavaan warning
summary(sem.yrs.i.chibeh, standardized = TRUE, fit.measures = TRUE)
#varTable(sem.yrs.i)
parameterestimates(sem.yrs.i.chibeh, boot.ci.type = "bca.simple", standardized = TRUE) %>% 
  kable()

```
lavaan WARNING: some observed variances are (at least) a factor 1000 times larger than others; use varTable(fit) to investigate

```{r MOD MED YRS INT TABLE}
yrs_i <- parameterestimates(sem.yrs.i.chibeh, boot.ci.type = "bca.simple", standardized = TRUE)
yrs_i <- yrs_i[c(2,5:8,25:27), ]
yrs_i
```

```{r Mediation CBCL ext_t}
#OUTCOME VARIABLES = EXTERNALIZING SXS
#T = group, X= covariates?, M = att_neg, Y = cbcl_ext_t

summary(lm(cbcl_ext_t ~ group + chi_beh_control, data = nona_data)) #IV on DV - S. may not matter though
med_fit_cbcl_ext_t_na <- lm(att_neg ~ group, data = nona_data)
summary(med_fit_cbcl_ext_t_na)
out_fit_cbcl_ext_t_na <- lm(cbcl_ext_t ~ att_neg + group, data = nona_data) #,family = ??) 
summary(out_fit_cbcl_ext_t_na)
set.seed(567) 
med_out_cbcl_ext_t_na <- mediate(med_fit_cbcl_ext_t_na, out_fit_cbcl_ext_t_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_cbcl_ext_t_na)

sens_out_cbcl_ext_t_na <- medsens(med_out_cbcl_ext_t_na, rho.by = 0.1, effect.type = "both", sims = 1000) #both
summary(sens_out_cbcl_ext_t_na)
plot(med_out_cbcl_ext_t_na)

#mediation controlling 
med_fit_cbcl_ext_t_con <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
summary(med_fit_cbcl_ext_t_con)
out_fit_cbcl_ext_t_con <- lm(cbcl_ext_t ~ att_neg + group, data = nona_data)  
summary(out_fit_cbcl_ext_t_con)

set.seed(567)
med_out_cbcl_ext_t_con <- mediate(med_fit_cbcl_ext_t_con, out_fit_cbcl_ext_t_con, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_cbcl_ext_t_con)

#lavaan controlling for chi_beh --- NOT MODERATED

sem_con_cbcl_e= '
att_neg ~ a*group + chi_beh_control 
cbcl_ext_t ~ c*group + b*att_neg
 

direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

model_con_cbcl_e = sem(sem_con_cbcl_e, data=nona_data, se='boot', bootstrap=1000)
summary(model_con_cbcl_e, rsq=T) 
```
*lavaan WARNING: some observed variances are (at least) a factor 1000 times larger than others; use varTable(fit) to investigate*

DV = CBCL Ext, Mediation with chi_beh controlled 

               Estimate 95% CI Lower 95% CI Upper p-value    
ACME             0.8021       0.1584         1.64   0.008 ** 
ADE              9.6947       6.5552        12.56  <2e-16 ***
Total Effect    10.4968       7.4574        13.19  <2e-16 ***
Prop. Mediated   0.0764       0.0138         0.17   0.008 ** 

DV = CBCL Ext, lavaan with chi_beh controlled 

Defined Parameters:
                   Estimate  Std.Err  z-value  P(>|z|)
    direct            9.695    1.502    6.456    0.000 *
    indirect          0.802    0.390    2.055    0.040 *
    total            10.497    1.445    7.266    0.000 *


```{r MOD MED CBCL ext_t}
#T = group, X= covariates?, M = att_neg, Y = cbcl_ext_t, mod = c_sex

#LAVAAN
mod_cbcl_e <- "# a path
         att_neg_c ~ 1 + a1 * group + chi_beh_control

         # b paths
         cbcl_ext_t ~ 1 + b1 * att_neg_c
         cbcl_ext_t ~ b2 * c_sex
         cbcl_ext_t ~ b3 * att_sex

         # c prime path 
         cbcl_ext_t ~ cp * group

         # index of moderated mediation and conditional indirect effects
         a1b3 := a1 * b3
         maleie := a1 * b1 + a1b3 * 1
         femaleie := a1 * b1 + a1b3 * .1"
set.seed(567)
sem.cbcl.e <- sem(mod_cbcl_e, data = nona_data, se = "bootstrap", test = "bootstrap", bootstrap = 1000)
summary(sem.cbcl.e, standardized = TRUE, fit.measures = TRUE)
varTable(sem.cbcl.e)

parameterestimates(sem.cbcl.e, boot.ci.type = "bca.simple", standardized = TRUE) %>% 
  kable()

## controlling for chi behavior
mod_cbcl_e_chibeh <- "# a path
         att_neg_c ~ 1 + a1 * group + chi_beh_control

         # b paths
         cbcl_ext_t ~ 1 + b1 * att_neg_c
         cbcl_ext_t ~ b2 * c_sex
         cbcl_ext_t ~ b3 * att_sex

         # c prime path 
         cbcl_ext_t ~ cp * group

         # index of moderated mediation and conditional indirect effects
         a1b3 := a1 * b3
         maleie := a1 * b1 + a1b3 * 1
         femaleie := a1 * b1 + a1b3 * -1"

set.seed(567)
sem.cbcl.e.chibeh <- sem(mod_cbcl_e_chibeh, data = nona_data, test = "bootstrap", se = "bootstrap", bootstrap = 1000) #lavaan warning
summary(sem.cbcl.e.chibeh, standardized = TRUE, fit.measures = TRUE)
parameterestimates(sem.cbcl.e.chibeh, boot.ci.type = "bca.simple", standardized = TRUE) %>% 
  kable()

varTable(sem.cbcl.e.chibeh)
```
lavaan WARNING: some observed variances are (at least) a factor 1000 times larger than others; use varTable(fit) to investigate


```{r MOD MED CBCL EXT TABLE}
cbcl_e <- parameterestimates(sem.cbcl.e.chibeh, boot.ci.type = "bca.simple", standardized = TRUE)
cbcl_e <- cbcl_e[c(2,5:8,25:27), ]
cbcl_e
```

```{r Mediation YRS ext_t}
#T = group, X= covariates?, M = att_neg, Y = yrs_ext_t

summary(lm(yrs_ext_t ~ group + chi_beh_control, data = nona_data)) #IV on DV - S. may not matter though
med_fit_yrs_ext_t_na <- lm(att_neg ~ group, data = nona_data)
summary(med_fit_yrs_ext_t_na)
out_fit_yrs_ext_t_na <- lm(yrs_ext_t ~ att_neg + group, data = nona_data) #,family = ??) 
summary(out_fit_yrs_ext_t_na)
set.seed(567)
med_out_yrs_ext_t_na <- mediate(med_fit_yrs_ext_t_na, out_fit_yrs_ext_t_na, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_yrs_ext_t_na)

sens_out_yrs_ext_t_na <- medsens(med_out_yrs_ext_t_na, rho.by = 0.1, effect.type = "direct", sims = 1000) 
summary(sens_out_yrs_ext_t_na)
plot(med_out_yrs_ext_t_na)

#mediation controlling 
med_fit_yrs_ext_t_con <- lm(att_neg ~ group + chi_beh_control, data = nona_data)
summary(med_fit_yrs_ext_t_con)
out_fit_yrs_ext_t_con <- lm(yrs_ext_t ~ att_neg + group, data = nona_data)  
summary(out_fit_yrs_ext_t_con)

set.seed(567)
med_out_yrs_ext_t_con <- mediate(med_fit_yrs_ext_t_con, out_fit_yrs_ext_t_con, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
summary(med_out_yrs_ext_t_con)


#lavaan controlling for chi_beh --- NOT MODERATED

sem_con_yrs_e= '
att_neg ~ a*group + chi_beh_control 
yrs_ext_t ~ c*group + b*att_neg
 

direct := c
 
#indirect effect
indirect := a*b
 
#total effect
total := c + (a*b)
'

model_con_yrs_e = sem(sem_con_yrs_e, data=nona_data, se='boot', bootstrap=1000)
summary(model_con_yrs_e, rsq=T) 
```

DV = YRS ext, mediation controlling for chi_beh

              Estimate 95% CI Lower 95% CI Upper p-value   
ACME             0.6302      -0.1661         1.79   0.164   
ADE              3.7831       0.6278         6.50   0.012 * 
Total Effect     4.4133       1.2149         7.25   0.004 **
Prop. Mediated   0.1428      -0.0576         0.54   0.168   

             Estimate  Std.Err  z-value  P(>|z|)
direct            3.783    1.449    2.611    0.009 *
indirect          0.630    0.508    1.241    0.215
total             4.413    1.469    3.004    0.003 *

```{r Mod Mediation YRS ext_t}
#T = group, X= covariates?, M = att_neg, Y = yrs_int_t, mod = c_sex

#LAVAAN
mod_yrs_e <- "# a path
         att_neg_c ~ 1 + a1 * group

         # b paths
         yrs_ext_t ~ 1 + b1 * att_neg_c
         yrs_ext_t ~ b2 * c_sex
         yrs_ext_t ~ b3 * att_sex

         # c prime path 
         yrs_ext_t ~ cp * group

         # index of moderated mediation and conditional indirect effects
         a1b3 := a1 * b3
         maleie := a1 * b1 + a1b3 * 1
         femaleie := a1 * b1 + a1b3 * -1"
set.seed(567)
sem.yrs.e <- sem(mod_yrs_e, data = nona_data, se = "bootstrap", test = "bootstrap", bootstrap = 1000)
summary(sem.yrs.e, standardized = TRUE, fit.measures = TRUE)
parameterestimates(sem.yrs.e, boot.ci.type = "bca.simple", standardized = TRUE) %>% 
  kable()
varTable(sem.yrs.e)

#controlling for chibeh
mod_yrs_e_chibeh <- "# a path
         att_neg_c ~ 1 + a1 * group + chi_beh_control

         # b paths
         yrs_ext_t ~ 1 + b1 * att_neg_c
         yrs_ext_t ~ b2 * c_sex
         yrs_ext_t ~ b3 * att_sex

         # c prime path 
         yrs_ext_t ~ cp * group

         # index of moderated mediation and conditional indirect effects
         a1b3 := a1 * b3
         maleie := a1 * b1 + a1b3 * 1
         femaleie := a1 * b1 + a1b3 * -1"

set.seed(567)
sem.yrs.e.chibeh <- sem(mod_yrs_e_chibeh, data = nona_data, se = "bootstrap", test = "bootstrap", bootstrap = 1000)
summary(sem.yrs.e.chibeh, standardized = TRUE, fit.measures = TRUE)
parameterestimates(sem.yrs.e.chibeh, boot.ci.type = "bca.simple", standardized = TRUE) %>% 
  kable()

```
lavaan WARNING: some observed variances are (at least) a factor 1000 times larger than others; use varTable(fit) to investigate

```{r MOD MED YRS EXT TABLE}
yrs_e <- parameterestimates(sem.yrs.e.chibeh, boot.ci.type = "bca.simple", standardized = TRUE)
yrs_e <- yrs_e[c(2,5:8,25:27), ]
yrs_e
```

```{r ALL MOD MED SXS TABLE}
ado_sxs_tables <- bind_rows(cbcl_i, yrs_i, cbcl_e, yrs_e)
ado_sxs_tables
knitr::kable(ado_sxs_tables)
ado_sxs_tables <- ado_sxs_tables %>% 
  dplyr::rename("Path" = label, "Estimate" = est, "SE" = se, "p" = pvalue, "Lower 95% CI" = ci.lower, "Upper 95% CI" = ci.upper) 

ado_sxs_tables<- as.data.frame(ado_sxs_tables)

ado_sxs_tables$Estimate <- round(ado_sxs_tables$Estimate,2)
ado_sxs_tables$SE <- round(ado_sxs_tables$SE,2)
ado_sxs_tables$z <- round(ado_sxs_tables$z,2)
ado_sxs_tables$p <- round(ado_sxs_tables$p,3)
ado_sxs_tables$`Lower 95% CI` <- round(ado_sxs_tables$`Lower 95% CI`,2)
ado_sxs_tables$`Upper 95% CI` <- round(ado_sxs_tables$`Upper 95% CI`,2)

rio::export(ado_sxs_tables, "~/ado_sxs.csv")
```


```{r Mediation CRPBIM - dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = crpbim
#Imputed Set 1
library(mediation)
med_fit_crpbim_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_crpbim_1 <- glm(crpbim_av_rej ~ att_neg + group, data = nona_data) #,family = ??) 
set.seed(567)
med_out_crpbim_1 <- mediate(med_fit_crpbim_1, out_fit_crpbim_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_crpbim_1 <- medsens(med_out_crpbim_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_crpbim_1)
summary(med_out_crpbim_1)
plot(med_out_crpbim_1)

#Imputed Set 2
med_fit_crpbim_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_crpbim_2 <- glm(crpbim_av_rej ~ att_neg + group, data = nona_data2) #,family = ??) 
set.seed(567)
med_out_crpbim_2 <- mediate(med_fit_crpbim_2, out_fit_crpbim_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_crpbim_2 <- medsens(med_out_crpbim_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_crpbim_2)
summary(med_out_crpbim_2)
plot(med_out_crpbim_2)

#Imputed Set 3
med_fit_crpbim_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_crpbim_3 <- glm(crpbim_av_rej ~ att_neg + group, data = nona_data3) #,family = ??) 
set.seed(567)
med_out_crpbim_3 <- mediate(med_fit_crpbim_3, out_fit_crpbim_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_crpbim_3 <- medsens(med_out_crpbim_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_crpbim_3)
summary(med_out_crpbim_3)
plot(med_out_crpbim_3)

#Imputed Set 4
med_fit_crpbim_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_crpbim_4 <- glm(crpbim_av_rej ~ att_neg + group, data = nona_data4) #,family = ??) 
set.seed(567)
med_out_crpbim_4 <- mediate(med_fit_crpbim_4, out_fit_crpbim_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_crpbim_4 <- medsens(med_out_crpbim_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_crpbim_4)
summary(med_out_crpbim_4)
plot(med_out_crpbim_4)

#Imputed Set 5
med_fit_crpbim_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_crpbim_5 <- glm(crpbim_av_rej ~ att_neg + group, data = nona_data5) #,family = ??) 
set.seed(567)
med_out_crpbim_5 <- mediate(med_fit_crpbim_5, out_fit_crpbim_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_crpbim_5 <- medsens(med_out_crpbim_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_crpbim_5)
summary(med_out_crpbim_5)
plot(med_out_crpbim_5)

#COMBINE MEDIATION OUTPUTS
library(mediation)
datasets_crpbim<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_crpbim <- c("att_neg")
outcome_crpbim <- c("crpbim_av_rej")
treatment_crpbim <- c("group", "group", "group", "group", "group")
pooling_crpbim <- mediations(datasets_crpbim, treatment_crpbim, mediator_crpbim, outcome_crpbim, conf.level = .95, sims =1000)
med_crpbim_output <- amelidiate(pooling_crpbim)
summary(med_crpbim_output) #the function does not calculate p-value though
plot(med_crpbim_output)
```

```{r Mediation CRPBIC - don't run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = crpbic  
#Imputed Set 1
med_fit_crpbic_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_crpbic_1 <- glm(crpbic_av_rej ~ att_neg + group, data = nona_data) #,family = ??) 
set.seed(567)
med_out_crpbic_1 <- mediate(med_fit_crpbic_1, out_fit_crpbic_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_crpbic_1 <- medsens(med_out_crpbic_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_crpbic_1)
summary(med_out_crpbic_1)
plot(med_out_crpbic_1)

#Imputed Set 2
med_fit_crpbic_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_crpbic_2 <- glm(crpbic_av_rej ~ att_neg + group, data = nona_data2) #,family = ??) 
set.seed(567)
med_out_crpbic_2 <- mediate(med_fit_crpbic_2, out_fit_crpbic_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_crpbic_2 <- medsens(med_out_crpbic_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_crpbic_2)
summary(med_out_crpbic_2)
plot(med_out_crpbic_2)

#Imputed Set 3
med_fit_crpbic_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_crpbic_3 <- glm(crpbic_av_rej ~ att_neg + group, data = nona_data3) #,family = ??) 
set.seed(567)
med_out_crpbic_3 <- mediate(med_fit_crpbic_3, out_fit_crpbic_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_crpbic_3 <- medsens(med_out_crpbic_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_crpbic_3)
summary(med_out_crpbic_3)
plot(med_out_crpbic_3)

#Imputed Set 4
med_fit_crpbic_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_crpbic_4 <- glm(crpbic_av_rej ~ att_neg + group, data = nona_data4) #,family = ??) 
set.seed(567)
med_out_crpbic_4 <- mediate(med_fit_crpbic_4, out_fit_crpbic_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_crpbic_4 <- medsens(med_out_crpbic_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_crpbic_4)
summary(med_out_crpbic_4)
plot(med_out_crpbic_4)

#Imputed Set 5
med_fit_crpbic_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_crpbic_5 <- glm(crpbic_av_rej ~ att_neg + group, data = nona_data5) #,family = ??) 
set.seed(567)
med_out_crpbic_5 <- mediate(med_fit_crpbic_5, out_fit_crpbic_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_crpbic_5 <- medsens(med_out_crpbic_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_crpbic_5)
summary(med_out_crpbic_5)
plot(med_out_crpbic_5)

#COMBINE MEDIATION OUTPUTS
datasets_crpbic<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_crpbic <- c("att_neg")
outcome_crpbic <- c("crpbic_av_rej")
treatment_crpbic <- c("group", "group", "group", "group", "group")
pooling_crpbic <- mediations(datasets_crpbic, treatment_crpbic, mediator_crpbic, outcome_crpbic, conf.level = .95, sims =1000)
med_crpbic_output <- amelidiate(pooling_crpbic)
summary(med_crpbic_output) #the function does not calculate p-value though
plot(med_crpbic_output)
```


```{r Mediation avs_rpm_epi - don't run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = avs_rpm_epi
#Imputed Set 1
med_fit_avs_rpm_epi_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_avs_rpm_epi_1 <- glm(avs_rpm_epi ~ att_neg + group, data = nona_data) #,family = ??) 
set.seed(567)
med_out_avs_rpm_epi_1 <- mediate(med_fit_avs_rpm_epi_1, out_fit_avs_rpm_epi_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_rpm_epi_1 <- medsens(med_out_avs_rpm_epi_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_rpm_epi_1)
summary(med_out_avs_rpm_epi_1)
plot(med_out_avs_rpm_epi_1)

#Imputed Set 2
med_fit_avs_rpm_epi_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_avs_rpm_epi_2 <- glm(avs_rpm_epi ~ att_neg + group, data = nona_data2) #,family = ??) 
set.seed(567)
med_out_avs_rpm_epi_2 <- mediate(med_fit_avs_rpm_epi_2, out_fit_avs_rpm_epi_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_rpm_epi_2 <- medsens(med_out_avs_rpm_epi_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_rpm_epi_2)
summary(med_out_avs_rpm_epi_2)
plot(med_out_avs_rpm_epi_2)

#Imputed Set 3
med_fit_avs_rpm_epi_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_avs_rpm_epi_3 <- glm(avs_rpm_epi ~ att_neg + group, data = nona_data3) #,family = ??) 
set.seed(567)
med_out_avs_rpm_epi_3 <- mediate(med_fit_avs_rpm_epi_3, out_fit_avs_rpm_epi_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_rpm_epi_3 <- medsens(med_out_avs_rpm_epi_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_rpm_epi_3)
summary(med_out_avs_rpm_epi_3)
plot(med_out_avs_rpm_epi_3)

#Imputed Set 4
med_fit_avs_rpm_epi_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_avs_rpm_epi_4 <- glm(avs_rpm_epi ~ att_neg + group, data = nona_data4) #,family = ??) 
set.seed(567)
med_out_avs_rpm_epi_4 <- mediate(med_fit_avs_rpm_epi_4, out_fit_avs_rpm_epi_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_rpm_epi_4 <- medsens(med_out_avs_rpm_epi_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_rpm_epi_4)
summary(med_out_avs_rpm_epi_4)
plot(med_out_avs_rpm_epi_4)

#Imputed Set 5
med_fit_avs_rpm_epi_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_avs_rpm_epi_5 <- glm(avs_rpm_epi ~ att_neg + group, data = nona_data5) #,family = ??) 
set.seed(567)
med_out_avs_rpm_epi_5 <- mediate(med_fit_avs_rpm_epi_5, out_fit_avs_rpm_epi_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_rpm_epi_5 <- medsens(med_out_avs_rpm_epi_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_rpm_epi_5)
summary(med_out_avs_rpm_epi_5)
plot(med_out_avs_rpm_epi_5)

#COMBINE MEDIATION OUTPUTS
datasets_avs_rpm_epi<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_avs_rpm_epi <- c("att_neg")
outcome_avs_rpm_epi <- c("avs_rpm_epi")
treatment_avs_rpm_epi <- c("group", "group", "group", "group", "group")
pooling_avs_rpm_epi <- mediations(datasets_avs_rpm_epi, treatment_avs_rpm_epi, mediator_avs_rpm_epi, outcome_avs_rpm_epi, conf.level = .95, sims =1000)
med_avs_rpm_epi_output <- amelidiate(pooling_avs_rpm_epi)
summary(med_avs_rpm_epi_output) #the function does not calculate p-value though
plot(med_avs_rpm_epi_output)
```

```{r Mediation avs_pd_epi - dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = avs_pd_epi
#Imputed Set 1
med_fit_avs_pd_epi_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_avs_pd_epi_1 <- glm(avs_pd_epi ~ att_neg + group, data = nona_data) #,family = ??) 
set.seed(567)
med_out_avs_pd_epi_1 <- mediate(med_fit_avs_pd_epi_1, out_fit_avs_pd_epi_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_pd_epi_1 <- medsens(med_out_avs_pd_epi_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_pd_epi_1)
summary(med_out_avs_pd_epi_1)
plot(med_out_avs_pd_epi_1)

#Imputed Set 2
med_fit_avs_pd_epi_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_avs_pd_epi_2 <- glm(avs_pd_epi ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_pd_epi_2 <- mediate(med_fit_avs_pd_epi_2, out_fit_avs_pd_epi_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_pd_epi_2 <- medsens(med_out_avs_pd_epi_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_pd_epi_2)
summary(med_out_avs_pd_epi_2)
plot(med_out_avs_pd_epi_2)

#Imputed Set 3
med_fit_avs_pd_epi_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_avs_pd_epi_3 <- glm(avs_pd_epi ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_pd_epi_3 <- mediate(med_fit_avs_pd_epi_3, out_fit_avs_pd_epi_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_pd_epi_3 <- medsens(med_out_avs_pd_epi_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_pd_epi_3)
summary(med_out_avs_pd_epi_3)
plot(med_out_avs_pd_epi_3)

#Imputed Set 4
med_fit_avs_pd_epi_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_avs_pd_epi_4 <- glm(avs_pd_epi ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_pd_epi_4 <- mediate(med_fit_avs_pd_epi_4, out_fit_avs_pd_epi_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_pd_epi_4 <- medsens(med_out_avs_pd_epi_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_pd_epi_4)
summary(med_out_avs_pd_epi_4)
plot(med_out_avs_pd_epi_4)

#Imputed Set 5
med_fit_avs_pd_epi_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_avs_pd_epi_5 <- glm(avs_pd_epi ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_pd_epi_5 <- mediate(med_fit_avs_pd_epi_5, out_fit_avs_pd_epi_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_pd_epi_5 <- medsens(med_out_avs_pd_epi_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_pd_epi_5)
summary(med_out_avs_pd_epi_5)
plot(med_out_avs_pd_epi_5)

#COMBINE MEDIATION OUTPUTS
datasets_avs_pd_epi<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_avs_pd_epi <- c("att_neg")
outcome_avs_pd_epi <- c("avs_pd_epi")
treatment_avs_pd_epi <- c("group", "group", "group", "group", "group")
pooling_avs_pd_epi <- mediations(datasets_avs_pd_epi, treatment_avs_pd_epi, mediator_avs_pd_epi, outcome_avs_pd_epi, conf.level = .95, sims =1000)
med_avs_pd_epi_output <- amelidiate(pooling_avs_pd_epi)
summary(med_avs_pd_epi_output) #the function does not calculate p-value though
plot(med_avs_pd_epi_output)
```

```{r Mediation avs_dpe_epi - dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = avs_dpe_epi
#Imputed Set 1
med_fit_avs_dpe_epi_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_avs_dpe_epi_1 <- glm(avs_dpe_epi ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_dpe_epi_1 <- mediate(med_fit_avs_dpe_epi_1, out_fit_avs_dpe_epi_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_dpe_epi_1 <- medsens(med_out_avs_dpe_epi_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_dpe_epi_1)
summary(med_out_avs_dpe_epi_1)
plot(med_out_avs_dpe_epi_1)

#Imputed Set 2
med_fit_avs_dpe_epi_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_avs_dpe_epi_2 <- glm(avs_dpe_epi ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_dpe_epi_2 <- mediate(med_fit_avs_dpe_epi_2, out_fit_avs_dpe_epi_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_dpe_epi_2 <- medsens(med_out_avs_dpe_epi_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_dpe_epi_2)
summary(med_out_avs_dpe_epi_2)
plot(med_out_avs_dpe_epi_2)

#Imputed Set 3
med_fit_avs_dpe_epi_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_avs_dpe_epi_3 <- glm(avs_dpe_epi ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_dpe_epi_3 <- mediate(med_fit_avs_dpe_epi_3, out_fit_avs_dpe_epi_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_dpe_epi_3 <- medsens(med_out_avs_dpe_epi_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_dpe_epi_3)
summary(med_out_avs_dpe_epi_3)
plot(med_out_avs_dpe_epi_3)

#Imputed Set 4
med_fit_avs_dpe_epi_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_avs_dpe_epi_4 <- glm(avs_dpe_epi ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_dpe_epi_4 <- mediate(med_fit_avs_dpe_epi_4, out_fit_avs_dpe_epi_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_dpe_epi_4 <- medsens(med_out_avs_dpe_epi_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_dpe_epi_4)
summary(med_out_avs_dpe_epi_4)
plot(med_out_avs_dpe_epi_4)

#Imputed Set 5
med_fit_avs_dpe_epi_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_avs_dpe_epi_5 <- glm(avs_dpe_epi ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_dpe_epi_5 <- mediate(med_fit_avs_dpe_epi_5, out_fit_avs_dpe_epi_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_dpe_epi_5 <- medsens(med_out_avs_dpe_epi_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_dpe_epi_5)
summary(med_out_avs_dpe_epi_5)
plot(med_out_avs_dpe_epi_5)

#COMBINE MEDIATION OUTPUTS
datasets_avs_dpe_epi<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_avs_dpe_epi <- c("att_neg")
outcome_avs_dpe_epi <- c("avs_dpe_epi")
treatment_avs_dpe_epi <- c("group", "group", "group", "group", "group")
pooling_avs_dpe_epi <- mediations(datasets_avs_dpe_epi, treatment_avs_dpe_epi, mediator_avs_dpe_epi, outcome_avs_dpe_epi, conf.level = .95, sims =1000)
med_avs_dpe_epi_output <- amelidiate(pooling_avs_dpe_epi)
summary(med_avs_dpe_epi_output) #the function does not calculate p-value though
plot(med_avs_dpe_epi_output)
```

```{r Mediation dys_rpm_epi - dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = dys_rpm_epi
#Imputed Set 1
med_fit_dys_rpm_epi_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_dys_rpm_epi_1 <- glm(dys_rpm_epi ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_rpm_epi_1 <- mediate(med_fit_dys_rpm_epi_1, out_fit_dys_rpm_epi_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_rpm_epi_1 <- medsens(med_out_dys_rpm_epi_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_rpm_epi_1)
summary(med_out_dys_rpm_epi_1)
plot(med_out_dys_rpm_epi_1)

#Imputed Set 2
med_fit_dys_rpm_epi_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_dys_rpm_epi_2 <- glm(dys_rpm_epi ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_rpm_epi_2 <- mediate(med_fit_dys_rpm_epi_2, out_fit_dys_rpm_epi_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_rpm_epi_2 <- medsens(med_out_dys_rpm_epi_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_rpm_epi_2)
summary(med_out_dys_rpm_epi_2)
plot(med_out_dys_rpm_epi_2)

#Imputed Set 3
med_fit_dys_rpm_epi_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_dys_rpm_epi_3 <- glm(dys_rpm_epi ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_rpm_epi_3 <- mediate(med_fit_dys_rpm_epi_3, out_fit_dys_rpm_epi_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_rpm_epi_3 <- medsens(med_out_dys_rpm_epi_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_rpm_epi_3)
summary(med_out_dys_rpm_epi_3)
plot(med_out_dys_rpm_epi_3)

#Imputed Set 4
med_fit_dys_rpm_epi_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_dys_rpm_epi_4 <- glm(dys_rpm_epi ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_rpm_epi_4 <- mediate(med_fit_dys_rpm_epi_4, out_fit_dys_rpm_epi_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_rpm_epi_4 <- medsens(med_out_dys_rpm_epi_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_rpm_epi_4)
summary(med_out_dys_rpm_epi_4)
plot(med_out_dys_rpm_epi_4)

#Imputed Set 5
med_fit_dys_rpm_epi_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_dys_rpm_epi_5 <- glm(dys_rpm_epi ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_rpm_epi_5 <- mediate(med_fit_dys_rpm_epi_5, out_fit_dys_rpm_epi_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_rpm_epi_5 <- medsens(med_out_dys_rpm_epi_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_rpm_epi_5)
summary(med_out_dys_rpm_epi_5)
plot(med_out_dys_rpm_epi_5)

#COMBINE MEDIATION OUTPUTS
datasets_dys_rpm_epi<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_dys_rpm_epi <- c("att_neg")
outcome_dys_rpm_epi <- c("dys_rpm_epi")
treatment_dys_rpm_epi <- c("group", "group", "group", "group", "group")
pooling_dys_rpm_epi <- mediations(datasets_dys_rpm_epi, treatment_dys_rpm_epi, mediator_dys_rpm_epi, outcome_dys_rpm_epi, conf.level = .95, sims =1000)
med_dys_rpm_epi_output <- amelidiate(pooling_dys_rpm_epi)
summary(med_dys_rpm_epi_output) #the function does not calculate p-value though
plot(med_dys_rpm_epi_output)
```

```{r Mediation dys_pd_epi - dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = dys_pd_epi
#Imputed Set 1
med_fit_dys_pd_epi_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_dys_pd_epi_1 <- glm(dys_pd_epi ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_pd_epi_1 <- mediate(med_fit_dys_pd_epi_1, out_fit_dys_pd_epi_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_pd_epi_1 <- medsens(med_out_dys_pd_epi_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_pd_epi_1)
summary(med_out_dys_pd_epi_1)
plot(med_out_dys_pd_epi_1)

#Imputed Set 2
med_fit_dys_pd_epi_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_dys_pd_epi_2 <- glm(dys_pd_epi ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_pd_epi_2 <- mediate(med_fit_dys_pd_epi_2, out_fit_dys_pd_epi_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_pd_epi_2 <- medsens(med_out_dys_pd_epi_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_pd_epi_2)
summary(med_out_dys_pd_epi_2)
plot(med_out_dys_pd_epi_2)

#Imputed Set 3
med_fit_dys_pd_epi_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_dys_pd_epi_3 <- glm(dys_pd_epi ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_pd_epi_3 <- mediate(med_fit_dys_pd_epi_3, out_fit_dys_pd_epi_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_pd_epi_3 <- medsens(med_out_dys_pd_epi_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_pd_epi_3)
summary(med_out_dys_pd_epi_3)
plot(med_out_dys_pd_epi_3)

#Imputed Set 4
med_fit_dys_pd_epi_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_dys_pd_epi_4 <- glm(dys_pd_epi ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_pd_epi_4 <- mediate(med_fit_dys_pd_epi_4, out_fit_dys_pd_epi_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_pd_epi_4 <- medsens(med_out_dys_pd_epi_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_pd_epi_4)
summary(med_out_dys_pd_epi_4)
plot(med_out_dys_pd_epi_4)

#Imputed Set 5
med_fit_dys_pd_epi_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_dys_pd_epi_5 <- glm(dys_pd_epi ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_pd_epi_5 <- mediate(med_fit_dys_pd_epi_5, out_fit_dys_pd_epi_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_pd_epi_5 <- medsens(med_out_dys_pd_epi_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_pd_epi_5)
summary(med_out_dys_pd_epi_5)
plot(med_out_dys_pd_epi_5)

#COMBINE MEDIATION OUTPUTS
datasets_dys_pd_epi<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_dys_pd_epi <- c("att_neg")
outcome_dys_pd_epi <- c("dys_pd_epi")
treatment_dys_pd_epi <- c("group", "group", "group", "group", "group")
pooling_dys_pd_epi <- mediations(datasets_dys_pd_epi, treatment_dys_pd_epi, mediator_dys_pd_epi, outcome_dys_pd_epi, conf.level = .95, sims =1000)
med_dys_pd_epi_output <- amelidiate(pooling_dys_pd_epi)
summary(med_dys_pd_epi_output) #the function does not calculate p-value though
plot(med_dys_pd_epi_output)
```

```{r Mediation dys_dpe_epi- dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = dys_dpe_epi
#Imputed Set 1
med_fit_dys_dpe_epi_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_dys_dpe_epi_1 <- glm(dys_dpe_epi ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_dpe_epi_1 <- mediate(med_fit_dys_dpe_epi_1, out_fit_dys_dpe_epi_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_dpe_epi_1 <- medsens(med_out_dys_dpe_epi_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_dpe_epi_1)
summary(med_out_dys_dpe_epi_1)
plot(med_out_dys_dpe_epi_1)

#Imputed Set 2
med_fit_dys_dpe_epi_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_dys_dpe_epi_2 <- glm(dys_dpe_epi ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_dpe_epi_2 <- mediate(med_fit_dys_dpe_epi_2, out_fit_dys_dpe_epi_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_dpe_epi_2 <- medsens(med_out_dys_dpe_epi_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_dpe_epi_2)
summary(med_out_dys_dpe_epi_2)
plot(med_out_dys_dpe_epi_2)

#Imputed Set 3
med_fit_dys_dpe_epi_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_dys_dpe_epi_3 <- glm(dys_dpe_epi ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_dpe_epi_3 <- mediate(med_fit_dys_dpe_epi_3, out_fit_dys_dpe_epi_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_dpe_epi_3 <- medsens(med_out_dys_dpe_epi_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_dpe_epi_3)
summary(med_out_dys_dpe_epi_3)
plot(med_out_dys_dpe_epi_3)

#Imputed Set 4
med_fit_dys_dpe_epi_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_dys_dpe_epi_4 <- glm(dys_dpe_epi ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_dpe_epi_4 <- mediate(med_fit_dys_dpe_epi_4, out_fit_dys_dpe_epi_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_dpe_epi_4 <- medsens(med_out_dys_dpe_epi_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_dpe_epi_4)
summary(med_out_dys_dpe_epi_4)
plot(med_out_dys_dpe_epi_4)

#Imputed Set 5
med_fit_dys_dpe_epi_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_dys_dpe_epi_5 <- glm(dys_dpe_epi ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_dpe_epi_5 <- mediate(med_fit_dys_dpe_epi_5, out_fit_dys_dpe_epi_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_dpe_epi_5 <- medsens(med_out_dys_dpe_epi_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_dpe_epi_5)
summary(med_out_dys_dpe_epi_5)
plot(med_out_dys_dpe_epi_5)

#COMBINE MEDIATION OUTPUTS
datasets_dys_dpe_epi<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_dys_dpe_epi <- c("att_neg")
outcome_dys_dpe_epi <- c("dys_dpe_epi")
treatment_dys_dpe_epi <- c("group", "group", "group", "group", "group")
pooling_dys_dpe_epi <- mediations(datasets_dys_dpe_epi, treatment_dys_dpe_epi, mediator_dys_dpe_epi, outcome_dys_dpe_epi, conf.level = .95, sims =1000)
med_dys_dpe_epi_output <- amelidiate(pooling_dys_dpe_epi)
summary(med_dys_dpe_epi_output) #the function does not calculate p-value though
plot(med_dys_dpe_epi_output)
```

```{r Mediation pos_rpm_epi-- dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = pos_rpm_epi
#Imputed Set 1
med_fit_pos_rpm_epi_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_pos_rpm_epi_1 <- glm(pos_rpm_epi ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_rpm_epi_1 <- mediate(med_fit_pos_rpm_epi_1, out_fit_pos_rpm_epi_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_rpm_epi_1 <- medsens(med_out_pos_rpm_epi_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_rpm_epi_1)
summary(med_out_pos_rpm_epi_1)
plot(med_out_pos_rpm_epi_1)

#Imputed Set 2
med_fit_pos_rpm_epi_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_pos_rpm_epi_2 <- glm(pos_rpm_epi ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_rpm_epi_2 <- mediate(med_fit_pos_rpm_epi_2, out_fit_pos_rpm_epi_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_rpm_epi_2 <- medsens(med_out_pos_rpm_epi_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_rpm_epi_2)
summary(med_out_pos_rpm_epi_2)
plot(med_out_pos_rpm_epi_2)

#Imputed Set 3
med_fit_pos_rpm_epi_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_pos_rpm_epi_3 <- glm(pos_rpm_epi ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_rpm_epi_3 <- mediate(med_fit_pos_rpm_epi_3, out_fit_pos_rpm_epi_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_rpm_epi_3 <- medsens(med_out_pos_rpm_epi_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_rpm_epi_3)
summary(med_out_pos_rpm_epi_3)
plot(med_out_pos_rpm_epi_3)

#Imputed Set 4
med_fit_pos_rpm_epi_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_pos_rpm_epi_4 <- glm(pos_rpm_epi ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_rpm_epi_4 <- mediate(med_fit_pos_rpm_epi_4, out_fit_pos_rpm_epi_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_rpm_epi_4 <- medsens(med_out_pos_rpm_epi_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_rpm_epi_4)
summary(med_out_pos_rpm_epi_4)
plot(med_out_pos_rpm_epi_4)

#Imputed Set 5
med_fit_pos_rpm_epi_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_pos_rpm_epi_5 <- glm(pos_rpm_epi ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_rpm_epi_5 <- mediate(med_fit_pos_rpm_epi_5, out_fit_pos_rpm_epi_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_rpm_epi_5 <- medsens(med_out_pos_rpm_epi_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_rpm_epi_5)
summary(med_out_pos_rpm_epi_5)
plot(med_out_pos_rpm_epi_5)

#COMBINE MEDIATION OUTPUTS
datasets_pos_rpm_epi<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_pos_rpm_epi <- c("att_neg")
outcome_pos_rpm_epi <- c("pos_rpm_epi")
treatment_pos_rpm_epi <- c("group", "group", "group", "group", "group")
pooling_pos_rpm_epi <- mediations(datasets_pos_rpm_epi, treatment_pos_rpm_epi, mediator_pos_rpm_epi, outcome_pos_rpm_epi, conf.level = .95, sims =1000)
med_pos_rpm_epi_output <- amelidiate(pooling_pos_rpm_epi)
summary(med_pos_rpm_epi_output) #the function does not calculate p-value though
plot(med_pos_rpm_epi_output)
```

```{r Mediation pos_pd_epi - dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = pos_pd_epi
#Imputed Set 1
med_fit_pos_pd_epi_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_pos_pd_epi_1 <- glm(pos_pd_epi ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_pd_epi_1 <- mediate(med_fit_pos_pd_epi_1, out_fit_pos_pd_epi_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_pd_epi_1 <- medsens(med_out_pos_pd_epi_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_pd_epi_1)
summary(med_out_pos_pd_epi_1)
plot(med_out_pos_pd_epi_1)

#Imputed Set 2
med_fit_pos_pd_epi_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_pos_pd_epi_2 <- glm(pos_pd_epi ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_pd_epi_2 <- mediate(med_fit_pos_pd_epi_2, out_fit_pos_pd_epi_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_pd_epi_2 <- medsens(med_out_pos_pd_epi_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_pd_epi_2)
summary(med_out_pos_pd_epi_2)
plot(med_out_pos_pd_epi_2)

#Imputed Set 3
med_fit_pos_pd_epi_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_pos_pd_epi_3 <- glm(pos_pd_epi ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_pd_epi_3 <- mediate(med_fit_pos_pd_epi_3, out_fit_pos_pd_epi_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_pd_epi_3 <- medsens(med_out_pos_pd_epi_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_pd_epi_3)
summary(med_out_pos_pd_epi_3)
plot(med_out_pos_pd_epi_3)

#Imputed Set 4
med_fit_pos_pd_epi_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_pos_pd_epi_4 <- glm(pos_pd_epi ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_pd_epi_4 <- mediate(med_fit_pos_pd_epi_4, out_fit_pos_pd_epi_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_pd_epi_4 <- medsens(med_out_pos_pd_epi_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_pd_epi_4)
summary(med_out_pos_pd_epi_4)
plot(med_out_pos_pd_epi_4)

#Imputed Set 5
med_fit_pos_pd_epi_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_pos_pd_epi_5 <- glm(pos_pd_epi ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_pd_epi_5 <- mediate(med_fit_pos_pd_epi_5, out_fit_pos_pd_epi_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_pd_epi_5 <- medsens(med_out_pos_pd_epi_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_pd_epi_5)
summary(med_out_pos_pd_epi_5)
plot(med_out_pos_pd_epi_5)

#COMBINE MEDIATION OUTPUTS
datasets_pos_pd_epi<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_pos_pd_epi <- c("att_neg")
outcome_pos_pd_epi <- c("pos_pd_epi")
treatment_pos_pd_epi <- c("group", "group", "group", "group", "group")
pooling_pos_pd_epi <- mediations(datasets_pos_pd_epi, treatment_pos_pd_epi, mediator_pos_pd_epi, outcome_pos_pd_epi, conf.level = .95, sims =1000)
med_pos_pd_epi_output <- amelidiate(pooling_pos_pd_epi)
summary(med_pos_pd_epi_output) #the function does not calculate p-value though
plot(med_pos_pd_epi_output)
```

```{r Mediation pos_dpe_epi - dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = pos_dpe_epi
#Imputed Set 1
med_fit_pos_dpe_epi_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_pos_dpe_epi_1 <- glm(pos_dpe_epi ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_dpe_epi_1 <- mediate(med_fit_pos_dpe_epi_1, out_fit_pos_dpe_epi_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_dpe_epi_1 <- medsens(med_out_pos_dpe_epi_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_dpe_epi_1)
summary(med_out_pos_dpe_epi_1)
plot(med_out_pos_dpe_epi_1)

#Imputed Set 2
med_fit_pos_dpe_epi_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_pos_dpe_epi_2 <- glm(pos_dpe_epi ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_dpe_epi_2 <- mediate(med_fit_pos_dpe_epi_2, out_fit_pos_dpe_epi_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_dpe_epi_2 <- medsens(med_out_pos_dpe_epi_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_dpe_epi_2)
summary(med_out_pos_dpe_epi_2)
plot(med_out_pos_dpe_epi_2)

#Imputed Set 3
med_fit_pos_dpe_epi_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_pos_dpe_epi_3 <- glm(pos_dpe_epi ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_dpe_epi_3 <- mediate(med_fit_pos_dpe_epi_3, out_fit_pos_dpe_epi_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_dpe_epi_3 <- medsens(med_out_pos_dpe_epi_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_dpe_epi_3)
summary(med_out_pos_dpe_epi_3)
plot(med_out_pos_dpe_epi_3)

#Imputed Set 4
med_fit_pos_dpe_epi_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_pos_dpe_epi_4 <- glm(pos_dpe_epi ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_dpe_epi_4 <- mediate(med_fit_pos_dpe_epi_4, out_fit_pos_dpe_epi_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_dpe_epi_4 <- medsens(med_out_pos_dpe_epi_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_dpe_epi_4)
summary(med_out_pos_dpe_epi_4)
plot(med_out_pos_dpe_epi_4)

#Imputed Set 5
med_fit_pos_dpe_epi_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_pos_dpe_epi_5 <- glm(pos_dpe_epi ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_dpe_epi_5 <- mediate(med_fit_pos_dpe_epi_5, out_fit_pos_dpe_epi_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_dpe_epi_5 <- medsens(med_out_pos_dpe_epi_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_dpe_epi_5)
summary(med_out_pos_dpe_epi_5)
plot(med_out_pos_dpe_epi_5)

#COMBINE MEDIATION OUTPUTS
datasets_pos_dpe_epi<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_pos_dpe_epi <- c("att_neg")
outcome_pos_dpe_epi <- c("pos_dpe_epi")
treatment_pos_dpe_epi <- c("group", "group", "group", "group", "group")
pooling_pos_dpe_epi <- mediations(datasets_pos_dpe_epi, treatment_pos_dpe_epi, mediator_pos_dpe_epi, outcome_pos_dpe_epi, conf.level = .95, sims =1000)
med_pos_dpe_epi_output <- amelidiate(pooling_pos_dpe_epi)
summary(med_pos_dpe_epi_output) #the function does not calculate p-value though
plot(med_pos_dpe_epi_output)
```

```{r Mediation avs_rpm_psi- dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = avs_rpm_psi
#Imputed Set 1
med_fit_avs_rpm_psi_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_avs_rpm_psi_1 <- glm(avs_rpm_psi ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_rpm_psi_1 <- mediate(med_fit_avs_rpm_psi_1, out_fit_avs_rpm_psi_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_rpm_psi_1 <- medsens(med_out_avs_rpm_psi_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_rpm_psi_1)
summary(med_out_avs_rpm_psi_1)
plot(med_out_avs_rpm_psi_1)

#Imputed Set 2
med_fit_avs_rpm_psi_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_avs_rpm_psi_2 <- glm(avs_rpm_psi ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_rpm_psi_2 <- mediate(med_fit_avs_rpm_psi_2, out_fit_avs_rpm_psi_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_rpm_psi_2 <- medsens(med_out_avs_rpm_psi_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_rpm_psi_2)
summary(med_out_avs_rpm_psi_2)
plot(med_out_avs_rpm_psi_2)

#Imputed Set 3
med_fit_avs_rpm_psi_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_avs_rpm_psi_3 <- glm(avs_rpm_psi ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_rpm_psi_3 <- mediate(med_fit_avs_rpm_psi_3, out_fit_avs_rpm_psi_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_rpm_psi_3 <- medsens(med_out_avs_rpm_psi_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_rpm_psi_3)
summary(med_out_avs_rpm_psi_3)
plot(med_out_avs_rpm_psi_3)

#Imputed Set 4
med_fit_avs_rpm_psi_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_avs_rpm_psi_4 <- glm(avs_rpm_psi ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_rpm_psi_4 <- mediate(med_fit_avs_rpm_psi_4, out_fit_avs_rpm_psi_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_rpm_psi_4 <- medsens(med_out_avs_rpm_psi_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_rpm_psi_4)
summary(med_out_avs_rpm_psi_4)
plot(med_out_avs_rpm_psi_4)

#Imputed Set 5
med_fit_avs_rpm_psi_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_avs_rpm_psi_5 <- glm(avs_rpm_psi ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_rpm_psi_5 <- mediate(med_fit_avs_rpm_psi_5, out_fit_avs_rpm_psi_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_rpm_psi_5 <- medsens(med_out_avs_rpm_psi_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_rpm_psi_5)
summary(med_out_avs_rpm_psi_5)
plot(med_out_avs_rpm_psi_5)

#COMBINE MEDIATION OUTPUTS
datasets_avs_rpm_psi<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_avs_rpm_psi <- c("att_neg")
outcome_avs_rpm_psi <- c("avs_rpm_psi")
treatment_avs_rpm_psi <- c("group", "group", "group", "group", "group")
pooling_avs_rpm_psi <- mediations(datasets_avs_rpm_psi, treatment_avs_rpm_psi, mediator_avs_rpm_psi, outcome_avs_rpm_psi, conf.level = .95, sims =1000)
med_avs_rpm_psi_output <- amelidiate(pooling_avs_rpm_psi)
summary(med_avs_rpm_psi_output) #the function does not calculate p-value though
plot(med_avs_rpm_psi_output)
```

```{r Mediation avs_pd_psi - dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = avs_pd_psi
#Imputed Set 1
med_fit_avs_pd_psi_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_avs_pd_psi_1 <- glm(avs_pd_psi ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_pd_psi_1 <- mediate(med_fit_avs_pd_psi_1, out_fit_avs_pd_psi_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_pd_psi_1 <- medsens(med_out_avs_pd_psi_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_pd_psi_1)
summary(med_out_avs_pd_psi_1)
plot(med_out_avs_pd_psi_1)

#Imputed Set 2
med_fit_avs_pd_psi_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_avs_pd_psi_2 <- glm(avs_pd_psi ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_pd_psi_2 <- mediate(med_fit_avs_pd_psi_2, out_fit_avs_pd_psi_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_pd_psi_2 <- medsens(med_out_avs_pd_psi_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_pd_psi_2)
summary(med_out_avs_pd_psi_2)
plot(med_out_avs_pd_psi_2)

#Imputed Set 3
med_fit_avs_pd_psi_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_avs_pd_psi_3 <- glm(avs_pd_psi ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_pd_psi_3 <- mediate(med_fit_avs_pd_psi_3, out_fit_avs_pd_psi_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_pd_psi_3 <- medsens(med_out_avs_pd_psi_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_pd_psi_3)
summary(med_out_avs_pd_psi_3)
plot(med_out_avs_pd_psi_3)

#Imputed Set 4
med_fit_avs_pd_psi_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_avs_pd_psi_4 <- glm(avs_pd_psi ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_pd_psi_4 <- mediate(med_fit_avs_pd_psi_4, out_fit_avs_pd_psi_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_pd_psi_4 <- medsens(med_out_avs_pd_psi_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_pd_psi_4)
summary(med_out_avs_pd_psi_4)
plot(med_out_avs_pd_psi_4)

#Imputed Set 5
med_fit_avs_pd_psi_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_avs_pd_psi_5 <- glm(avs_pd_psi ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_pd_psi_5 <- mediate(med_fit_avs_pd_psi_5, out_fit_avs_pd_psi_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_pd_psi_5 <- medsens(med_out_avs_pd_psi_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_pd_psi_5)
summary(med_out_avs_pd_psi_5)
plot(med_out_avs_pd_psi_5)

#COMBINE MEDIATION OUTPUTS
datasets_avs_pd_psi<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_avs_pd_psi <- c("att_neg")
outcome_avs_pd_psi <- c("avs_pd_psi")
treatment_avs_pd_psi <- c("group", "group", "group", "group", "group")
pooling_avs_pd_psi <- mediations(datasets_avs_pd_psi, treatment_avs_pd_psi, mediator_avs_pd_psi, outcome_avs_pd_psi, conf.level = .95, sims =1000)
med_avs_pd_psi_output <- amelidiate(pooling_avs_pd_psi)
summary(med_avs_pd_psi_output) #the function does not calculate p-value though
plot(med_avs_pd_psi_output)
```

```{r Mediation avs_dpe_psi- dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = avs_dpe_psi
#Imputed Set 1
med_fit_avs_dpe_psi_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_avs_dpe_psi_1 <- glm(avs_dpe_psi ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_dpe_psi_1 <- mediate(med_fit_avs_dpe_psi_1, out_fit_avs_dpe_psi_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_dpe_psi_1 <- medsens(med_out_avs_dpe_psi_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_dpe_psi_1)
summary(med_out_avs_dpe_psi_1)
plot(med_out_avs_dpe_psi_1)

#Imputed Set 2
med_fit_avs_dpe_psi_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_avs_dpe_psi_2 <- glm(avs_dpe_psi ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_dpe_psi_2 <- mediate(med_fit_avs_dpe_psi_2, out_fit_avs_dpe_psi_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_dpe_psi_2 <- medsens(med_out_avs_dpe_psi_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_dpe_psi_2)
summary(med_out_avs_dpe_psi_2)
plot(med_out_avs_dpe_psi_2)

#Imputed Set 3
med_fit_avs_dpe_psi_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_avs_dpe_psi_3 <- glm(avs_dpe_psi ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_dpe_psi_3 <- mediate(med_fit_avs_dpe_psi_3, out_fit_avs_dpe_psi_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_dpe_psi_3 <- medsens(med_out_avs_dpe_psi_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_dpe_psi_3)
summary(med_out_avs_dpe_psi_3)
plot(med_out_avs_dpe_psi_3)

#Imputed Set 4
med_fit_avs_dpe_psi_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_avs_dpe_psi_4 <- glm(avs_dpe_psi ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_dpe_psi_4 <- mediate(med_fit_avs_dpe_psi_4, out_fit_avs_dpe_psi_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_dpe_psi_4 <- medsens(med_out_avs_dpe_psi_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_dpe_psi_4)
summary(med_out_avs_dpe_psi_4)
plot(med_out_avs_dpe_psi_4)

#Imputed Set 5
med_fit_avs_dpe_psi_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_avs_dpe_psi_5 <- glm(avs_dpe_psi ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_avs_dpe_psi_5 <- mediate(med_fit_avs_dpe_psi_5, out_fit_avs_dpe_psi_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_avs_dpe_psi_5 <- medsens(med_out_avs_dpe_psi_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_avs_dpe_psi_5)
summary(med_out_avs_dpe_psi_5)
plot(med_out_avs_dpe_psi_5)

#COMBINE MEDIATION OUTPUTS
datasets_avs_dpe_psi<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_avs_dpe_psi <- c("att_neg")
outcome_avs_dpe_psi <- c("avs_dpe_psi")
treatment_avs_dpe_psi <- c("group", "group", "group", "group", "group")
pooling_avs_dpe_psi <- mediations(datasets_avs_dpe_psi, treatment_avs_dpe_psi, mediator_avs_dpe_psi, outcome_avs_dpe_psi, conf.level = .95, sims =1000)
med_avs_dpe_psi_output <- amelidiate(pooling_avs_dpe_psi)
summary(med_avs_dpe_psi_output) #the function does not calculate p-value though
plot(med_avs_dpe_psi_output)
```

```{r Mediation dys_rpm_psi- dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = dys_rpm_psi
#Imputed Set 1
med_fit_dys_rpm_psi_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_dys_rpm_psi_1 <- glm(dys_rpm_psi ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_rpm_psi_1 <- mediate(med_fit_dys_rpm_psi_1, out_fit_dys_rpm_psi_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_rpm_psi_1 <- medsens(med_out_dys_rpm_psi_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_rpm_psi_1)
summary(med_out_dys_rpm_psi_1)
plot(med_out_dys_rpm_psi_1)

#Imputed Set 2
med_fit_dys_rpm_psi_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_dys_rpm_psi_2 <- glm(dys_rpm_psi ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_rpm_psi_2 <- mediate(med_fit_dys_rpm_psi_2, out_fit_dys_rpm_psi_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_rpm_psi_2 <- medsens(med_out_dys_rpm_psi_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_rpm_psi_2)
summary(med_out_dys_rpm_psi_2)
plot(med_out_dys_rpm_psi_2)

#Imputed Set 3
med_fit_dys_rpm_psi_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_dys_rpm_psi_3 <- glm(dys_rpm_psi ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_rpm_psi_3 <- mediate(med_fit_dys_rpm_psi_3, out_fit_dys_rpm_psi_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_rpm_psi_3 <- medsens(med_out_dys_rpm_psi_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_rpm_psi_3)
summary(med_out_dys_rpm_psi_3)
plot(med_out_dys_rpm_psi_3)

#Imputed Set 4
med_fit_dys_rpm_psi_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_dys_rpm_psi_4 <- glm(dys_rpm_psi ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_rpm_psi_4 <- mediate(med_fit_dys_rpm_psi_4, out_fit_dys_rpm_psi_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_rpm_psi_4 <- medsens(med_out_dys_rpm_psi_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_rpm_psi_4)
summary(med_out_dys_rpm_psi_4)
plot(med_out_dys_rpm_psi_4)

#Imputed Set 5
med_fit_dys_rpm_psi_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_dys_rpm_psi_5 <- glm(dys_rpm_psi ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_rpm_psi_5 <- mediate(med_fit_dys_rpm_psi_5, out_fit_dys_rpm_psi_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_rpm_psi_5 <- medsens(med_out_dys_rpm_psi_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_rpm_psi_5)
summary(med_out_dys_rpm_psi_5)
plot(med_out_dys_rpm_psi_5)

#COMBINE MEDIATION OUTPUTS
datasets_dys_rpm_psi<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_dys_rpm_psi <- c("att_neg")
outcome_dys_rpm_psi <- c("dys_rpm_psi")
treatment_dys_rpm_psi <- c("group", "group", "group", "group", "group")
pooling_dys_rpm_psi <- mediations(datasets_dys_rpm_psi, treatment_dys_rpm_psi, mediator_dys_rpm_psi, outcome_dys_rpm_psi, conf.level = .95, sims =1000)
med_dys_rpm_psi_output <- amelidiate(pooling_dys_rpm_psi)
summary(med_dys_rpm_psi_output) #the function does not calculate p-value though
plot(med_dys_rpm_psi_output)
```

```{r Mediation dys_pd_psi- dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = dys_pd_psi
#Imputed Set 1
med_fit_dys_pd_psi_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_dys_pd_psi_1 <- glm(dys_pd_psi ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_pd_psi_1 <- mediate(med_fit_dys_pd_psi_1, out_fit_dys_pd_psi_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_pd_psi_1 <- medsens(med_out_dys_pd_psi_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_pd_psi_1)
summary(med_out_dys_pd_psi_1)
plot(med_out_dys_pd_psi_1)

#Imputed Set 2
med_fit_dys_pd_psi_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_dys_pd_psi_2 <- glm(dys_pd_psi ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_pd_psi_2 <- mediate(med_fit_dys_pd_psi_2, out_fit_dys_pd_psi_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_pd_psi_2 <- medsens(med_out_dys_pd_psi_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_pd_psi_2)
summary(med_out_dys_pd_psi_2)
plot(med_out_dys_pd_psi_2)

#Imputed Set 3
med_fit_dys_pd_psi_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_dys_pd_psi_3 <- glm(dys_pd_psi ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_pd_psi_3 <- mediate(med_fit_dys_pd_psi_3, out_fit_dys_pd_psi_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_pd_psi_3 <- medsens(med_out_dys_pd_psi_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_pd_psi_3)
summary(med_out_dys_pd_psi_3)
plot(med_out_dys_pd_psi_3)

#Imputed Set 4
med_fit_dys_pd_psi_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_dys_pd_psi_4 <- glm(dys_pd_psi ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_pd_psi_4 <- mediate(med_fit_dys_pd_psi_4, out_fit_dys_pd_psi_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_pd_psi_4 <- medsens(med_out_dys_pd_psi_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_pd_psi_4)
summary(med_out_dys_pd_psi_4)
plot(med_out_dys_pd_psi_4)

#Imputed Set 5
med_fit_dys_pd_psi_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_dys_pd_psi_5 <- glm(dys_pd_psi ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_pd_psi_5 <- mediate(med_fit_dys_pd_psi_5, out_fit_dys_pd_psi_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_pd_psi_5 <- medsens(med_out_dys_pd_psi_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_pd_psi_5)
summary(med_out_dys_pd_psi_5)
plot(med_out_dys_pd_psi_5)

#COMBINE MEDIATION OUTPUTS
datasets_dys_pd_psi<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_dys_pd_psi <- c("att_neg")
outcome_dys_pd_psi <- c("dys_pd_psi")
treatment_dys_pd_psi <- c("group", "group", "group", "group", "group")
pooling_dys_pd_psi <- mediations(datasets_dys_pd_psi, treatment_dys_pd_psi, mediator_dys_pd_psi, outcome_dys_pd_psi, conf.level = .95, sims =1000)
med_dys_pd_psi_output <- amelidiate(pooling_dys_pd_psi)
summary(med_dys_pd_psi_output) #the function does not calculate p-value though
plot(med_dys_pd_psi_output)
```

```{r Mediation dys_dpe_psi - dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = dys_dpe_psi
#Imputed Set 1
med_fit_dys_dpe_psi_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_dys_dpe_psi_1 <- glm(dys_dpe_psi ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_dpe_psi_1 <- mediate(med_fit_dys_dpe_psi_1, out_fit_dys_dpe_psi_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_dpe_psi_1 <- medsens(med_out_dys_dpe_psi_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_dpe_psi_1)
summary(med_out_dys_dpe_psi_1)
plot(med_out_dys_dpe_psi_1)

#Imputed Set 2
med_fit_dys_dpe_psi_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_dys_dpe_psi_2 <- glm(dys_dpe_psi ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_dpe_psi_2 <- mediate(med_fit_dys_dpe_psi_2, out_fit_dys_dpe_psi_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_dpe_psi_2 <- medsens(med_out_dys_dpe_psi_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_dpe_psi_2)
summary(med_out_dys_dpe_psi_2)
plot(med_out_dys_dpe_psi_2)

#Imputed Set 3
med_fit_dys_dpe_psi_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_dys_dpe_psi_3 <- glm(dys_dpe_psi ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_dpe_psi_3 <- mediate(med_fit_dys_dpe_psi_3, out_fit_dys_dpe_psi_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_dpe_psi_3 <- medsens(med_out_dys_dpe_psi_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_dpe_psi_3)
summary(med_out_dys_dpe_psi_3)
plot(med_out_dys_dpe_psi_3)

#Imputed Set 4
med_fit_dys_dpe_psi_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_dys_dpe_psi_4 <- glm(dys_dpe_psi ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_dpe_psi_4 <- mediate(med_fit_dys_dpe_psi_4, out_fit_dys_dpe_psi_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_dpe_psi_4 <- medsens(med_out_dys_dpe_psi_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_dpe_psi_4)
summary(med_out_dys_dpe_psi_4)
plot(med_out_dys_dpe_psi_4)

#Imputed Set 5
med_fit_dys_dpe_psi_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_dys_dpe_psi_5 <- glm(dys_dpe_psi ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_dys_dpe_psi_5 <- mediate(med_fit_dys_dpe_psi_5, out_fit_dys_dpe_psi_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_dys_dpe_psi_5 <- medsens(med_out_dys_dpe_psi_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_dys_dpe_psi_5)
summary(med_out_dys_dpe_psi_5)
plot(med_out_dys_dpe_psi_5)

#COMBINE MEDIATION OUTPUTS
datasets_dys_dpe_psi<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_dys_dpe_psi <- c("att_neg")
outcome_dys_dpe_psi <- c("dys_dpe_psi")
treatment_dys_dpe_psi <- c("group", "group", "group", "group", "group")
pooling_dys_dpe_psi <- mediations(datasets_dys_dpe_psi, treatment_dys_dpe_psi, mediator_dys_dpe_psi, outcome_dys_dpe_psi, conf.level = .95, sims =1000)
med_dys_dpe_psi_output <- amelidiate(pooling_dys_dpe_psi)
summary(med_dys_dpe_psi_output) #the function does not calculate p-value though
plot(med_dys_dpe_psi_output)
```

```{r Mediation pos_rpm_psi - dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = pos_rpm_psi
#Imputed Set 1
med_fit_pos_rpm_psi_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_pos_rpm_psi_1 <- glm(pos_rpm_psi ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_rpm_psi_1 <- mediate(med_fit_pos_rpm_psi_1, out_fit_pos_rpm_psi_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_rpm_psi_1 <- medsens(med_out_pos_rpm_psi_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_rpm_psi_1)
summary(med_out_pos_rpm_psi_1)
plot(med_out_pos_rpm_psi_1)

#Imputed Set 2
med_fit_pos_rpm_psi_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_pos_rpm_psi_2 <- glm(pos_rpm_psi ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_rpm_psi_2 <- mediate(med_fit_pos_rpm_psi_2, out_fit_pos_rpm_psi_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_rpm_psi_2 <- medsens(med_out_pos_rpm_psi_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_rpm_psi_2)
summary(med_out_pos_rpm_psi_2)
plot(med_out_pos_rpm_psi_2)

#Imputed Set 3
med_fit_pos_rpm_psi_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_pos_rpm_psi_3 <- glm(pos_rpm_psi ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_rpm_psi_3 <- mediate(med_fit_pos_rpm_psi_3, out_fit_pos_rpm_psi_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_rpm_psi_3 <- medsens(med_out_pos_rpm_psi_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_rpm_psi_3)
summary(med_out_pos_rpm_psi_3)
plot(med_out_pos_rpm_psi_3)

#Imputed Set 4
med_fit_pos_rpm_psi_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_pos_rpm_psi_4 <- glm(pos_rpm_psi ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_rpm_psi_4 <- mediate(med_fit_pos_rpm_psi_4, out_fit_pos_rpm_psi_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_rpm_psi_4 <- medsens(med_out_pos_rpm_psi_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_rpm_psi_4)
summary(med_out_pos_rpm_psi_4)
plot(med_out_pos_rpm_psi_4)

#Imputed Set 5
med_fit_pos_rpm_psi_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_pos_rpm_psi_5 <- glm(pos_rpm_psi ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_rpm_psi_5 <- mediate(med_fit_pos_rpm_psi_5, out_fit_pos_rpm_psi_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_rpm_psi_5 <- medsens(med_out_pos_rpm_psi_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_rpm_psi_5)
summary(med_out_pos_rpm_psi_5)
plot(med_out_pos_rpm_psi_5)

#COMBINE MEDIATION OUTPUTS
datasets_pos_rpm_psi<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_pos_rpm_psi <- c("att_neg")
outcome_pos_rpm_psi <- c("pos_rpm_psi")
treatment_pos_rpm_psi <- c("group", "group", "group", "group", "group")
pooling_pos_rpm_psi <- mediations(datasets_pos_rpm_psi, treatment_pos_rpm_psi, mediator_pos_rpm_psi, outcome_pos_rpm_psi, conf.level = .95, sims =1000)
med_pos_rpm_psi_output <- amelidiate(pooling_pos_rpm_psi)
summary(med_pos_rpm_psi_output) #the function does not calculate p-value though
plot(med_pos_rpm_psi_output)
```

```{r Mediation pos_pd_psi - dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = pos_pd_psi
#Imputed Set 1
med_fit_pos_pd_psi_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_pos_pd_psi_1 <- glm(pos_pd_psi ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_pd_psi_1 <- mediate(med_fit_pos_pd_psi_1, out_fit_pos_pd_psi_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_pd_psi_1 <- medsens(med_out_pos_pd_psi_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_pd_psi_1)
summary(med_out_pos_pd_psi_1)
plot(med_out_pos_pd_psi_1)

#Imputed Set 2
med_fit_pos_pd_psi_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_pos_pd_psi_2 <- glm(pos_pd_psi ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_pd_psi_2 <- mediate(med_fit_pos_pd_psi_2, out_fit_pos_pd_psi_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_pd_psi_2 <- medsens(med_out_pos_pd_psi_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_pd_psi_2)
summary(med_out_pos_pd_psi_2)
plot(med_out_pos_pd_psi_2)

#Imputed Set 3
med_fit_pos_pd_psi_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_pos_pd_psi_3 <- glm(pos_pd_psi ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_pd_psi_3 <- mediate(med_fit_pos_pd_psi_3, out_fit_pos_pd_psi_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_pd_psi_3 <- medsens(med_out_pos_pd_psi_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_pd_psi_3)
summary(med_out_pos_pd_psi_3)
plot(med_out_pos_pd_psi_3)

#Imputed Set 4
med_fit_pos_pd_psi_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_pos_pd_psi_4 <- glm(pos_pd_psi ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_pd_psi_4 <- mediate(med_fit_pos_pd_psi_4, out_fit_pos_pd_psi_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_pd_psi_4 <- medsens(med_out_pos_pd_psi_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_pd_psi_4)
summary(med_out_pos_pd_psi_4)
plot(med_out_pos_pd_psi_4)

#Imputed Set 5
med_fit_pos_pd_psi_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_pos_pd_psi_5 <- glm(pos_pd_psi ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_pd_psi_5 <- mediate(med_fit_pos_pd_psi_5, out_fit_pos_pd_psi_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_pd_psi_5 <- medsens(med_out_pos_pd_psi_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_pd_psi_5)
summary(med_out_pos_pd_psi_5)
plot(med_out_pos_pd_psi_5)

#COMBINE MEDIATION OUTPUTS
datasets_pos_pd_psi<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_pos_pd_psi <- c("att_neg")
outcome_pos_pd_psi <- c("pos_pd_psi")
treatment_pos_pd_psi <- c("group", "group", "group", "group", "group")
pooling_pos_pd_psi <- mediations(datasets_pos_pd_psi, treatment_pos_pd_psi, mediator_pos_pd_psi, outcome_pos_pd_psi, conf.level = .95, sims =1000)
med_pos_pd_psi_output <- amelidiate(pooling_pos_pd_psi)
summary(med_pos_pd_psi_output) #the function does not calculate p-value though
plot(med_pos_pd_psi_output)
```

```{r Mediation pos_dpe_psi - dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = pos_dpe_psi
#Imputed Set 1
med_fit_pos_dpe_psi_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_pos_dpe_psi_1 <- glm(pos_dpe_psi ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_dpe_psi_1 <- mediate(med_fit_pos_dpe_psi_1, out_fit_pos_dpe_psi_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_dpe_psi_1 <- medsens(med_out_pos_dpe_psi_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_dpe_psi_1)
summary(med_out_pos_dpe_psi_1)
plot(med_out_pos_dpe_psi_1)

#Imputed Set 2
med_fit_pos_dpe_psi_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_pos_dpe_psi_2 <- glm(pos_dpe_psi ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_dpe_psi_2 <- mediate(med_fit_pos_dpe_psi_2, out_fit_pos_dpe_psi_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_dpe_psi_2 <- medsens(med_out_pos_dpe_psi_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_dpe_psi_2)
summary(med_out_pos_dpe_psi_2)
plot(med_out_pos_dpe_psi_2)

#Imputed Set 3
med_fit_pos_dpe_psi_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_pos_dpe_psi_3 <- glm(pos_dpe_psi ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_dpe_psi_3 <- mediate(med_fit_pos_dpe_psi_3, out_fit_pos_dpe_psi_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_dpe_psi_3 <- medsens(med_out_pos_dpe_psi_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_dpe_psi_3)
summary(med_out_pos_dpe_psi_3)
plot(med_out_pos_dpe_psi_3)

#Imputed Set 4
med_fit_pos_dpe_psi_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_pos_dpe_psi_4 <- glm(pos_dpe_psi ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_dpe_psi_4 <- mediate(med_fit_pos_dpe_psi_4, out_fit_pos_dpe_psi_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_dpe_psi_4 <- medsens(med_out_pos_dpe_psi_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_dpe_psi_4)
summary(med_out_pos_dpe_psi_4)
plot(med_out_pos_dpe_psi_4)

#Imputed Set 5
med_fit_pos_dpe_psi_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_pos_dpe_psi_5 <- glm(pos_dpe_psi ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_pos_dpe_psi_5 <- mediate(med_fit_pos_dpe_psi_5, out_fit_pos_dpe_psi_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_pos_dpe_psi_5 <- medsens(med_out_pos_dpe_psi_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_pos_dpe_psi_5)
summary(med_out_pos_dpe_psi_5)
plot(med_out_pos_dpe_psi_5)

#COMBINE MEDIATION OUTPUTS
datasets_pos_dpe_psi<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_pos_dpe_psi <- c("att_neg")
outcome_pos_dpe_psi <- c("pos_dpe_psi")
treatment_pos_dpe_psi <- c("group", "group", "group", "group", "group")
pooling_pos_dpe_psi <- mediations(datasets_pos_dpe_psi, treatment_pos_dpe_psi, mediator_pos_dpe_psi, outcome_pos_dpe_psi, conf.level = .95, sims =1000)
med_pos_dpe_psi_output <- amelidiate(pooling_pos_dpe_psi)
summary(med_pos_dpe_psi_output) #the function does not calculate p-value though
plot(med_pos_dpe_psi_output)
```

```{r Mediation CBCL INT - dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = cbcl_int
#Imputed Set 1
med_fit_cbcl_int_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_cbcl_int_1 <- glm(cbcl_int ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_cbcl_int_1 <- mediate(med_fit_cbcl_int_1, out_fit_cbcl_int_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_cbcl_int_1 <- medsens(med_out_cbcl_int_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_cbcl_int_1)
summary(med_out_cbcl_int_1)
plot(med_out_cbcl_int_1)

#Imputed Set 2
med_fit_cbcl_int_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_cbcl_int_2 <- glm(cbcl_int ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_cbcl_int_2 <- mediate(med_fit_cbcl_int_2, out_fit_cbcl_int_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_cbcl_int_2 <- medsens(med_out_cbcl_int_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_cbcl_int_2)
summary(med_out_cbcl_int_2)
plot(med_out_cbcl_int_2)

#Imputed Set 3
med_fit_cbcl_int_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_cbcl_int_3 <- glm(cbcl_int ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_cbcl_int_3 <- mediate(med_fit_cbcl_int_3, out_fit_cbcl_int_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_cbcl_int_3 <- medsens(med_out_cbcl_int_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_cbcl_int_3)
summary(med_out_cbcl_int_3)
plot(med_out_cbcl_int_3)

#Imputed Set 4
med_fit_cbcl_int_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_cbcl_int_4 <- glm(cbcl_int ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_cbcl_int_4 <- mediate(med_fit_cbcl_int_4, out_fit_cbcl_int_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_cbcl_int_4 <- medsens(med_out_cbcl_int_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_cbcl_int_4)
summary(med_out_cbcl_int_4)
plot(med_out_cbcl_int_4)

#Imputed Set 5
med_fit_cbcl_int_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_cbcl_int_5 <- glm(cbcl_int ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_cbcl_int_5 <- mediate(med_fit_cbcl_int_5, out_fit_cbcl_int_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_cbcl_int_5 <- medsens(med_out_cbcl_int_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_cbcl_int_5)
summary(med_out_cbcl_int_5)
plot(med_out_cbcl_int_5)

#COMBINE MEDIATION OUTPUTS
datasets_cbcl_int<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_cbcl_int <- c("att_neg")
outcome_cbcl_int <- c("cbcl_int")
treatment_cbcl_int <- c("group", "group", "group", "group", "group")
pooling_cbcl_int <- mediations(datasets_cbcl_int, treatment_cbcl_int, mediator_cbcl_int, outcome_cbcl_int, conf.level = .95, sims =1000)
med_cbcl_int_output <- amelidiate(pooling_cbcl_int)
summary(med_cbcl_int_output) #the function does not calculate p-value though
plot(med_cbcl_int_output)

```

```{r Mediation YRS INT-- dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = yrs_int
#Imputed Set 1
med_fit_yrs_int_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_yrs_int_1 <- glm(ysr_int ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_yrs_int_1 <- mediate(med_fit_yrs_int_1, out_fit_yrs_int_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_yrs_int_1 <- medsens(med_out_yrs_int_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_yrs_int_1)
summary(med_out_yrs_int_1)
plot(med_out_yrs_int_1)

#Imputed Set 2
med_fit_yrs_int_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_yrs_int_2 <- glm(yrs_int ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_yrs_int_2 <- mediate(med_fit_yrs_int_2, out_fit_yrs_int_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_yrs_int_2 <- medsens(med_out_yrs_int_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_yrs_int_2)
summary(med_out_yrs_int_2)
plot(med_out_yrs_int_2)

#Imputed Set 3
med_fit_yrs_int_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_yrs_int_3 <- glm(yrs_int ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_yrs_int_3 <- mediate(med_fit_yrs_int_3, out_fit_yrs_int_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_yrs_int_3 <- medsens(med_out_yrs_int_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_yrs_int_3)
summary(med_out_yrs_int_3)
plot(med_out_yrs_int_3)

#Imputed Set 4
med_fit_yrs_int_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_yrs_int_4 <- glm(yrs_int ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_yrs_int_4 <- mediate(med_fit_yrs_int_4, out_fit_yrs_int_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_yrs_int_4 <- medsens(med_out_yrs_int_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_yrs_int_4)
summary(med_out_yrs_int_4)
plot(med_out_yrs_int_4)

#Imputed Set 5
med_fit_yrs_int_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_yrs_int_5 <- glm(yrs_int ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_yrs_int_5 <- mediate(med_fit_yrs_int_5, out_fit_yrs_int_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_yrs_int_5 <- medsens(med_out_yrs_int_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_yrs_int_5)
summary(med_out_yrs_int_5)
plot(med_out_yrs_int_5)

#COMBINE MEDIATION OUTPUTS
datasets_yrs_int<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_yrs_int <- c("att_neg")
outcome_yrs_int <- c("yrs_int")
treatment_yrs_int <- c("group", "group", "group", "group", "group")
pooling_yrs_int <- mediations(datasets_yrs_int, treatment_yrs_int, mediator_yrs_int, outcome_yrs_int, conf.level = .95, sims =1000)
med_yrs_int_output <- amelidiate(pooling_yrs_int)
summary(med_yrs_int_output) #the function does not calculate p-value though
plot(med_yrs_int_output)
```

```{r Mediation CBCL EXT -- dont run, eval=FALSE, include=FALSE}
#OUTCOME VARIABLES = EXTERNALIZING SXS
#T = group, X= covariates?, M = att_neg, Y = cbcl_ext
#Imputed Set 1
med_fit_cbcl_ext_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_cbcl_ext_1 <- glm(cbcl_ext ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_cbcl_ext_1 <- mediate(med_fit_cbcl_ext_1, out_fit_cbcl_ext_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_cbcl_ext_1 <- medsens(med_out_cbcl_ext_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_cbcl_ext_1)
summary(med_out_cbcl_ext_1)
plot(med_out_cbcl_ext_1)

#Imputed Set 2
med_fit_cbcl_ext_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_cbcl_ext_2 <- glm(cbcl_ext ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_cbcl_ext_2 <- mediate(med_fit_cbcl_ext_2, out_fit_cbcl_ext_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_cbcl_ext_2 <- medsens(med_out_cbcl_ext_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_cbcl_ext_2)
summary(med_out_cbcl_ext_2)
plot(med_out_cbcl_ext_2)

#Imputed Set 3
med_fit_cbcl_ext_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_cbcl_ext_3 <- glm(cbcl_ext ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_cbcl_ext_3 <- mediate(med_fit_cbcl_ext_3, out_fit_cbcl_ext_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_cbcl_ext_3 <- medsens(med_out_cbcl_ext_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_cbcl_ext_3)
summary(med_out_cbcl_ext_3)
plot(med_out_cbcl_ext_3)

#Imputed Set 4
med_fit_cbcl_ext_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_cbcl_ext_4 <- glm(cbcl_ext ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_cbcl_ext_4 <- mediate(med_fit_cbcl_ext_4, out_fit_cbcl_ext_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_cbcl_ext_4 <- medsens(med_out_cbcl_ext_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_cbcl_ext_4)
summary(med_out_cbcl_ext_4)
plot(med_out_cbcl_ext_4)

#Imputed Set 5
med_fit_cbcl_ext_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_cbcl_ext_5 <- glm(cbcl_ext ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_cbcl_ext_5 <- mediate(med_fit_cbcl_ext_5, out_fit_cbcl_ext_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_cbcl_ext_5 <- medsens(med_out_cbcl_ext_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_cbcl_ext_5)
summary(med_out_cbcl_ext_5)
plot(med_out_cbcl_ext_5)

#COMBINE MEDIATION OUTPUTS
datasets_cbcl_ext<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_cbcl_ext <- c("att_neg")
outcome_cbcl_ext <- c("cbcl_ext")
treatment_cbcl_ext <- c("group", "group", "group", "group", "group")
pooling_cbcl_ext <- mediations(datasets_cbcl_ext, treatment_cbcl_ext, mediator_cbcl_ext, outcome_cbcl_ext, conf.level = .95, sims =1000)
med_cbcl_ext_output <- amelidiate(pooling_cbcl_ext)
summary(med_cbcl_ext_output) #the function does not calculate p-value though
plot(med_cbcl_ext_output)
```

```{r Mediation YRS EXT - dont run, eval=FALSE, include=FALSE}
#T = group, X= covariates?, M = att_neg, Y = yrs_ext
#Imputed Set 1
med_fit_yrs_ext_1 <- glm(att_neg ~ group, data = nona_data)
out_fit_yrs_ext_1 <- glm(ysr_ext ~ att_neg + group, data = nona_data) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_yrs_ext_1 <- mediate(med_fit_yrs_ext_1, out_fit_yrs_ext_1, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_yrs_ext_1 <- medsens(med_out_yrs_ext_1, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_yrs_ext_1)
summary(med_out_yrs_ext_1)
plot(med_out_yrs_ext_1)

#Imputed Set 2
med_fit_yrs_ext_2 <- glm(att_neg ~ group, data = nona_data2)
out_fit_yrs_ext_2 <- glm(yrs_ext ~ att_neg + group, data = nona_data2) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_yrs_ext_2 <- mediate(med_fit_yrs_ext_2, out_fit_yrs_ext_2, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_yrs_ext_2 <- medsens(med_out_yrs_ext_2, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_yrs_ext_2)
summary(med_out_yrs_ext_2)
plot(med_out_yrs_ext_2)

#Imputed Set 3
med_fit_yrs_ext_3 <- glm(att_neg ~ group, data = nona_data3)
out_fit_yrs_ext_3 <- glm(yrs_ext ~ att_neg + group, data = nona_data3) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_yrs_ext_3 <- mediate(med_fit_yrs_ext_3, out_fit_yrs_ext_3, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_yrs_ext_3 <- medsens(med_out_yrs_ext_3, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_yrs_ext_3)
summary(med_out_yrs_ext_3)
plot(med_out_yrs_ext_3)

#Imputed Set 4
med_fit_yrs_ext_4 <- glm(att_neg ~ group, data = nona_data4)
out_fit_yrs_ext_4 <- glm(yrs_ext ~ att_neg + group, data = nona_data4) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_yrs_ext_4 <- mediate(med_fit_yrs_ext_4, out_fit_yrs_ext_4, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_yrs_ext_4 <- medsens(med_out_yrs_ext_4, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_yrs_ext_4)
summary(med_out_yrs_ext_4)
plot(med_out_yrs_ext_4)

#Imputed Set 5
med_fit_yrs_ext_5 <- glm(att_neg ~ group, data = nona_data5)
out_fit_yrs_ext_5 <- glm(yrs_ext ~ att_neg + group, data = nona_data5) #,family = ??) #not sure if glm or gglm
set.seed(567)
med_out_yrs_ext_5 <- mediate(med_fit_yrs_ext_5, out_fit_yrs_ext_5, boot = TRUE, treat = "group", mediator = "att_neg", sims = 1000)
sens_out_yrs_ext_5 <- medsens(med_out_yrs_ext_5, rho.by = 0.1, effect.type = "indirect", sims = 1000) #sensitivity check for that assumption?
summary(sens_out_yrs_ext_5)
summary(med_out_yrs_ext_5)
plot(med_out_yrs_ext_5)

#COMBINE MEDIATION OUTPUTS
datasets_yrs_ext<- list(D1=nona_data, D2 = nona_data2, D3=nona_data3, D4 = nona_data4,D5=nona_data5)
mediator_yrs_ext <- c("att_neg")
outcome_yrs_ext <- c("yrs_ext")
treatment_yrs_ext <- c("group", "group", "group", "group", "group")
pooling_yrs_ext <- mediations(datasets_yrs_ext, treatment_yrs_ext, mediator_yrs_ext, outcome_yrs_ext, conf.level = .95, sims =1000)
med_yrs_ext_output <- amelidiate(pooling_yrs_ext)
summary(med_yrs_ext_output) #the function does not calculate p-value though
plot(med_yrs_ext_output)

fit <- with(imp, lm(bmi ~ chl))
pool.fit <- pool(fit)
summary(pool.fit)
#https://stefvanbuuren.name/Winnipeg/Practicals/Practical_III.html
```

```{r}
corr()
```

